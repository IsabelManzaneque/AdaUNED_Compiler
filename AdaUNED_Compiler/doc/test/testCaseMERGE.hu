-- programa vacio

procedure testCase01 () is

begin

end testCase01;

-- salida 



procedure testCase02 () is

begin
	Put_line("hola");
	Put_line("mundo");

end testCase02;



-- constantes  

procedure testCase03 () is

CIERTO: constant := True;
FALSO: constant := False;
UNO: constant := 1;

begin

	Put_line("CONSTANTES");

	Put_line("CIERTO(true):");
        Put_line(CIERTO);

	Put_line("FALSO(false):");
        Put_line(FALSO);

	Put_line("UNO(1):");
        Put_line(UNO);


end testCase03;



-- variables y aritmetica simple 

procedure testCase04 () is

	x: Integer;
	t: Boolean;

begin

	Put_line("VARIABLES Y ARITMETICA SIMPLE");

        x := 2-1;
        Put_line("x(1):");
        Put_line(x);

	t := True;
        Put_line("t(true):");
        Put_line(t);


end testCase04;



-- if sin else, operadores relacionales >  /= logico and


procedure testCase05 () is

      	t: Boolean;
	x: Integer;

begin
	Put_line("IF OPERADORES");
	
	t := True;
        Put_line("t(cierto):");
       
	if t and (True and True) then
                Put_line("cierto");
        end if;

	x := 2;	
	Put_line("x mayor (cierto):");
	
	-- if sin parentesis
	if x > 1 then
		Put_line("cierto");
	end if;

	Put_line("x desigual (cierto):");

	-- if con parentesis. Es posible al ser una expresion logica en si misma
	if (x/=3) then		
        	Put_line("cierto");
	end if;

end testCase05;



-- funciones paso por referencia


procedure testCase06 () is

z: Integer;

a,b: Integer;

function resta (x,y: out Integer) return Integer is
begin
		
	return x-y;	

end resta;


begin

	Put_line ("SUBPROGRAMAS FUNCIONES");
	a:= 5;
	b:= 3;
	z:= resta (a,b);
	Put_line("z(2):");
	Put_line(z);
			

end testCase06;



-- Control de flujo WHILE

procedure testCase7 () is

        x: Integer;

begin	
        Put_line ("CRONTROL FLUJO WHILE");
	
	x:=5;
	

	while x > 1 loop

		Put_line(x);
		x:=x-1;

	end loop;

end testCase7;



