package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// TERMINALES ------------------------------------------------

// DELIMITADORES
terminal Token DOUBLEQ;
terminal Token LEFTBRACKET;
terminal Token RIGHTBRACKET;
terminal Token COMMENT;
terminal Token COMMA;
terminal Token SEMICOLON;
terminal Token COLON;


// OPERADORES ARITMETICOS
terminal Token MINUS;
terminal Token MULT;
terminal Token GREATERTHAN;
terminal Token NOTEQUAL;
terminal Token ASIGN;
terminal Token ACCESS;


// PALABRAS RESERVADAS
terminal Token AND;
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONSTANT;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FUNCTION;
terminal Token IF;
terminal Token INTEGER;
terminal Token IS;
terminal Token LOOP;
terminal Token OUT;
terminal Token PROCEDURE;
terminal Token PUT_LINE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token THEN;
terminal Token TRUE;
terminal Token TYPE;
terminal Token WHILE;

// PATRONES
terminal Token ID;
terminal Token STRING;
terminal Token INT;

// NO TERMINALES ------------------------------------------------

non terminal  			program;
non terminal Axiom		axiom;

non terminal cabecera;
non terminal cuerpo;
non terminal decGlobal;
non terminal decFunPro;

non terminal sentencia;
non terminal sentencias;
non terminal sentenciaES;
non terminal sentenciaAsign;
non terminal sentenciaIf;
non terminal sentenciaWhile;
non terminal sentenciaReturn;
non terminal sentenciaSubprograma;

non terminal tipo;
non terminal tipos;
non terminal tipoRecord;
non terminal tipoPrimitivo;
non terminal tipoVariable;
non terminal tipoConstante;

non terminal constanteSimbolica;
non terminal constantesSimbolicas;

non terminal expresionAritmetica;
non terminal expresionSubprograma;
non terminal expresionLogica;
non terminal expresionAcceso;
non terminal expresion;
non terminal expresiones;
non terminal variable;
non terminal variables;

non terminal paramValor;
non terminal paramReferencia;
non terminal paramsSub;
non terminal paramSub;
non terminal subprograma;
non terminal subprogramas;
non terminal funcion;
non terminal cuerpoFuncion;
non terminal procedimiento;
non terminal cuerpoProcedimiento;

// REGLAS DE PRECEDENCIA --------------------------------------------------------------------

precedence left     AND; 
precedence left     NOTEQUAL;
precedence left     GREATERTHAN;
precedence left     MINUS;
precedence left     MULT;
precedence left     ACCESS, LEFTBRACKET, RIGHTBRACKET; 


// REGLAS DE PRODUCCION -----------------------------------------------------------------------


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};
   
   

////////////////////////////////////////////////////////
//                                                    //
//               GRAMATICA DEL LENGUAJE               //                    
//                                                    //
////////////////////////////////////////////////////////


// Estructura del programa ----------------------------------------------------------------------------------------

axiom          ::= cabecera cuerpo;

cabecera       ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS
                 | ID error {:syntaxErrorManager.syntaxFatalError("Falta 'procedure' en cabecera del programa"); errorCounter ++;:} LEFTBRACKET RIGHTBRACKET IS 
				 | PROCEDURE error {:syntaxErrorManager.syntaxFatalError("Falta ID en cabecera del programa"); errorCounter ++;:} LEFTBRACKET RIGHTBRACKET IS 
			     | PROCEDURE ID error {:syntaxErrorManager.syntaxFatalError("Falta '(' en cabecera del programa"); errorCounter ++;:} RIGHTBRACKET IS 
				 | PROCEDURE ID LEFTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta ')' en cabecera del programa"); errorCounter ++;:} IS 
				 | PROCEDURE ID LEFTBRACKET RIGHTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta 'is' en cabecera del programa"); errorCounter ++;:};
			
cuerpo         ::= decGlobal BEGIN sentencias END ID SEMICOLON
 		         | BEGIN sentencias END ID SEMICOLON
 		         | decGlobal BEGIN END ID SEMICOLON
 		         | BEGIN END ID SEMICOLON; 


// Declaraciones --------------------------------------------------------------------------------------------------

decGlobal       ::= constantesSimbolicas decFunPro 
 				  | decFunPro
 				  | constantesSimbolicas
 				  | error {:syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;:};
           				        		 
decFunPro       ::= tipos variables subprogramas
		          | tipos variables
		          | tipos subprogramas           		 
		          | variables subprogramas           		 
		          | tipos
		          | variables
		          | subprogramas
		          | variables tipos {:syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;:}
		          | subprogramas tipos {:syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;:}
		          | subprogramas variables {:syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;:}
		          | tipos subprogramas variables {:syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;:};
		                      	
  		 		           		  

// Declaracion de tipos -------------------------------------------------------------------------------------------

tipoConstante     ::= TRUE | FALSE | INTEGER;

tipoVariable      ::= tipoPrimitivo | ID;

tipos             ::= tipos tipo | tipo;
 
tipo              ::= tipoPrimitivo | tipoRecord;

tipoRecord        ::= TYPE ID IS RECORD variables END RECORD SEMICOLON
				    | ID error {:syntaxErrorManager.syntaxFatalError("Falta 'type' en tipo estructurado"); errorCounter ++;:} IS RECORD variables END RECORD SEMICOLON
				    | TYPE error {:syntaxErrorManager.syntaxFatalError("Falta ID en tipo estructurado");errorCounter ++;:} IS RECORD variables END RECORD SEMICOLON
				    | TYPE ID error {:syntaxErrorManager.syntaxFatalError("Falta 'is' en tipo estructurado");errorCounter ++;:} RECORD variables END RECORD SEMICOLON
				    | TYPE ID IS error {:syntaxErrorManager.syntaxFatalError("Falta 'record' en tipo estructurado");errorCounter ++;:} variables END RECORD SEMICOLON
				    | TYPE ID IS RECORD error {:syntaxErrorManager.syntaxFatalError("Falta cuerpo en tipo estructurado");errorCounter ++;:} END RECORD SEMICOLON
				    | TYPE ID IS RECORD variables error {:syntaxErrorManager.syntaxFatalError("Falta 'end' en tipo estructurado");errorCounter ++;:} RECORD SEMICOLON
				    | TYPE ID IS RECORD variables END error {:syntaxErrorManager.syntaxFatalError("Falta 'record' en tipo estructurado");errorCounter ++;:} SEMICOLON
				    | TYPE ID IS RECORD variables END RECORD error {:syntaxErrorManager.syntaxFatalError("Falta ';' en tipo estructurado");errorCounter ++;:};

tipoPrimitivo     ::= INTEGER | BOOLEAN;



// Declaracion de expresiones ------------------------------------------------------------------------------------


expresiones          ::= expresion COMMA expresiones 
				       | expresion;

expresion            ::= expresionSubprograma
					   | expresionAritmetica
					   | expresionLogica
					   | expresionAcceso;
					  
expresionSubprograma ::= ID LEFTBRACKET expresiones RIGHTBRACKET
					   | LEFTBRACKET expresiones RIGHTBRACKET
					   | ID LEFTBRACKET RIGHTBRACKET;

			   
expresionAritmetica  ::= expresion MINUS expresion
					   | expresion MULT expresion
					   | INTEGER
					   | ID;
					  
expresionLogica      ::= expresion GREATERTHAN expresion
				       | expresion NOTEQUAL expresion
					   | expresion AND expresion
                       | TRUE
                       | FALSE;
                      
expresionAcceso      ::= ID ACCESS ID
					   | ID ACCESS expresionAcceso;



// Declaracion de sentencias ------------------------------------------------------------------------------------

sentencias         ::= sentencia SEMICOLON 
                     | sentencias sentencia SEMICOLON;

sentencia          ::= sentenciaES
                     | sentenciaAsign
                     | sentenciaIf
				     | sentenciaWhile
				     | sentenciaReturn
				     | sentenciaSubprograma;

sentenciaES        ::= PUT_LINE LEFTBRACKET expresiones RIGHTBRACKET
					 | PUT_LINE LEFTBRACKET STRING RIGHTBRACKET
                     | LEFTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta 'Put_line' en sentencia E/S");errorCounter ++;:} expresiones RIGHTBRACKET
                     | LEFTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta 'Put_line' en sentencia E/S");errorCounter ++;:} STRING RIGHTBRACKET
                     | PUT_LINE error {:syntaxErrorManager.syntaxFatalError("Falta '(' en sentencia E/S");errorCounter ++;:} expresiones RIGHTBRACKET
                     | PUT_LINE error {:syntaxErrorManager.syntaxFatalError("Falta '(' en sentencia E/S");errorCounter ++;:} STRING RIGHTBRACKET
                     | PUT_LINE LEFTBRACKET expresion {:syntaxErrorManager.syntaxFatalError("Falta ')' en sentencia E/S");errorCounter ++;:}
       				 | PUT_LINE LEFTBRACKET STRING {:syntaxErrorManager.syntaxFatalError("Falta ')' en sentencia E/S");errorCounter ++;:};

sentenciaAsign     ::= ID ACCESS sentenciaAsign 
			         | ID ASIGN expresion;

sentenciaReturn    ::= RETURN expresion;

sentenciaIf        ::= IF expresion THEN sentencias END IF 
                     | IF expresion THEN sentencias ELSE sentencias END IF
                     | IF expresion error {:syntaxErrorManager.syntaxFatalError("sentencia if mal formada");errorCounter ++;:} sentencias END IF
                     | IF expresion THEN sentencias error {:syntaxErrorManager.syntaxFatalError("Falta 'end' en sentencia if");errorCounter ++;:} IF;

sentenciaWhile     ::= WHILE expresion LOOP sentencias END LOOP
                     | WHILE expresion error {:syntaxErrorManager.syntaxFatalError("Falta 'loop' en sentencia while");errorCounter ++;:} sentencias END LOOP
                     | WHILE expresion LOOP sentencias error {:syntaxErrorManager.syntaxFatalError("Falta 'end' en sentencia while");errorCounter ++;:} LOOP
                     | WHILE expresion LOOP sentencias END error{:syntaxErrorManager.syntaxFatalError("Falta 'loop' en sentencia while");errorCounter ++;:};

sentenciaSubprograma ::= ID LEFTBRACKET expresiones RIGHTBRACKET 
					   | ID LEFTBRACKET STRING RIGHTBRACKET 
					   | ID LEFTBRACKET RIGHTBRACKET; 



// Declaracion de constantes -----------------------------------------------------------------------------------

constantesSimbolicas ::= constantesSimbolicas constanteSimbolica | constanteSimbolica;

constanteSimbolica   ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON
					   | COLON error {:syntaxErrorManager.syntaxFatalError("Falta ID en constante"); errorCounter ++;:} CONSTANT ASIGN tipoConstante SEMICOLON
					   | ID error {:syntaxErrorManager.syntaxFatalError("Falta ':' en constante"); errorCounter ++;:} CONSTANT ASIGN tipoConstante SEMICOLON
					   | ID COLON error {:syntaxErrorManager.syntaxFatalError("Falta 'constant' en constante"); errorCounter ++;:} ASIGN tipoConstante SEMICOLON
					   | ID COLON CONSTANT error {:syntaxErrorManager.syntaxFatalError("Falta ':=' en constante"); errorCounter ++;:} tipoConstante SEMICOLON
					   | ID COLON CONSTANT ASIGN error {:syntaxErrorManager.syntaxFatalError("Falta valor entero/logico en constante"); errorCounter ++;:} SEMICOLON
					   | ID COLON CONSTANT ASIGN tipoConstante error {:syntaxErrorManager.syntaxFatalError("Falta ';' en constante"); errorCounter ++;:};					   




// Declaracion de variables -----------------------------------------------------------------------------------

variables       ::= variables variable | variable; 

variable        ::= ID COLON tipoVariable SEMICOLON | ID COMMA variable
				  | COLON error {:syntaxErrorManager.syntaxFatalError("Falta ID en variable"); errorCounter ++;:} tipoVariable SEMICOLON
                  | ID error {:syntaxErrorManager.syntaxFatalError("Falta ':' en variable"); errorCounter ++;:} tipoVariable SEMICOLON
                  | ID COLON error {:syntaxErrorManager.syntaxFatalError("Falta tipo primitivo/id en variable"); errorCounter ++;:} SEMICOLON
                  | ID COLON tipoVariable error {:syntaxErrorManager.syntaxFatalError("Falta ';' en variable"); errorCounter ++;:};
                  
                  


// Declaracion de subprogramas --------------------------------------------------------------------------------

subprogramas   		  ::= subprogramas subprograma | subprograma;

subprograma			  ::= funcion | procedimiento;

funcion               ::= FUNCTION ID LEFTBRACKET paramsSub RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion
  					    | FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion
					    | ID error {:syntaxErrorManager.syntaxFatalError("Falta 'function/procedure' en subprograma"); errorCounter ++;:} LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion
					    | FUNCTION error {:syntaxErrorManager.syntaxFatalError("Falta ID en funcion"); errorCounter ++;:} LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion
					    | FUNCTION ID error {:syntaxErrorManager.syntaxFatalError("Falta '(' en funcion"); errorCounter ++;:} RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion
					    | FUNCTION ID LEFTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta ')' en funcion"); errorCounter ++;:} RETURN tipoPrimitivo IS cuerpoFuncion
					    | FUNCTION ID LEFTBRACKET RIGHTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta 'return' en funcion"); errorCounter ++;:} tipoPrimitivo IS cuerpoFuncion
					    | FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN error {:syntaxErrorManager.syntaxFatalError("Falta tipo primitivo en funcion"); errorCounter ++;:} IS cuerpoFuncion
					    | FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo error {:syntaxErrorManager.syntaxFatalError("Falta 'is' en funcion"); errorCounter ++;:} cuerpoFuncion;

cuerpoFuncion         ::= decFunPro BEGIN sentencias END ID SEMICOLON
	 		            | BEGIN sentencias END ID SEMICOLON
	 		            | error {:syntaxErrorManager.syntaxFatalError("Error en la estructura del cuerpo de una funcion"); errorCounter ++;:};		
 		            					
procedimiento         ::= PROCEDURE ID LEFTBRACKET paramsSub RIGHTBRACKET IS cuerpoProcedimiento
				        | PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento
				        | PROCEDURE error {:syntaxErrorManager.syntaxFatalError("Falta ID en procedimiento"); errorCounter ++;:} LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento
					    | PROCEDURE ID error {:syntaxErrorManager.syntaxFatalError("Falta '(' en procedimiento"); errorCounter ++;:} RIGHTBRACKET IS cuerpoProcedimiento
					    | PROCEDURE ID LEFTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta ')' en procedimiento"); errorCounter ++;:} IS cuerpoProcedimiento
					    | PROCEDURE ID LEFTBRACKET RIGHTBRACKET error {:syntaxErrorManager.syntaxFatalError("Falta 'is' en procedimiento"); errorCounter ++;:} cuerpoProcedimiento;
				 
cuerpoProcedimiento   ::= decFunPro BEGIN sentencias END ID SEMICOLON
 		                | BEGIN sentencias END ID SEMICOLON
 		                | decFunPro BEGIN END ID SEMICOLON
 		                | BEGIN END ID SEMICOLON	
 		                | error {:syntaxErrorManager.syntaxFatalError("Error en la estructura del cuerpo de un procedimiento"); errorCounter ++;:};			 
			
paramsSub             ::= paramsSub paramSub 
					    | paramsSub SEMICOLON paramSub
						| paramSub;

paramSub              ::= paramValor 
					    | paramReferencia
						| error {:syntaxErrorManager.syntaxFatalError("Error en parametros de subprograma"); errorCounter ++;:};

paramValor            ::= ID COLON tipo 
						| ID COMMA paramValor;

paramReferencia       ::= ID COLON OUT tipo 
						| ID COMMA paramReferencia;

	







  
  

           		 
 
 

 
 
 
 
 

