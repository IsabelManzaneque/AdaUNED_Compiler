package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales ------------------------------------------------

// DELIMITADORES
terminal Token DOUBLEQ;
terminal Token LEFTBRACKET;
terminal Token RIGHTBRACKET;
terminal Token COMMENT;
terminal Token COMMA;
terminal Token SEMICOLON;
terminal Token COLON;


// OPERADORES ARITMETICOS
terminal Token MINUS;
terminal Token MULT;
terminal Token GREATERTHAN;
terminal Token NOTEQUAL;
terminal Token ASIGN;
terminal Token ACCESS;


// PALABRAS RESERVADAS
terminal Token AND;
terminal Token BEGIN;
terminal Token BOOLEAN;
terminal Token CONSTANT;
terminal Token ELSE;
terminal Token END;
terminal Token FALSE;
terminal Token FUNCTION;
terminal Token IF;
terminal Token INTEGER;
terminal Token IS;
terminal Token LOOP;
terminal Token OUT;
terminal Token PROCEDURE;
terminal Token PUT_LINE;
terminal Token RECORD;
terminal Token RETURN;
terminal Token THEN;
terminal Token TRUE;
terminal Token TYPE;
terminal Token WHILE;

// PATRONES
terminal Token ID;
terminal Token STRING;
terminal Token INT;

// Declaracion de no terminales ------------------------------------------------

non terminal  			program;
non terminal Axiom		axiom;

non terminal cabecera;
non terminal cuerpo;
non terminal declaraciones;

non terminal sentencia;
non terminal sentencias;
non terminal sentenciaES;
non terminal sentenciaAsign;
non terminal sentenciaIf;
non terminal sentenciaReturn;
non terminal sentenciaWhile;

non terminal tipo;
non terminal tipos;
non terminal tipoEstructurado;
non terminal tipoPrimitivo;
non terminal tipoVariable;
non terminal tipoConstante;

non terminal constanteSimbolica;
non terminal constantesSimbolicas;

non terminal expresion;
non terminal variable;
non terminal variables;

non terminal parametrosSubprograma;
non terminal parametroSubprograma;
non terminal subprograma;
non terminal subprogramas;
non terminal funcion;
non terminal procedimiento;
non terminal parametro;

// Declaracion de relaciones de precedencia ------------------------------------------------

precedence left     AND; 
precedence left     NOTEQUAL;
precedence left     GREATERTHAN;
precedence left     MINUS;
precedence left     MULT;
precedence left     ACCESS, LEFTBRACKET, RIGHTBRACKET; 


// Declaración de reglas de produccion -----------------------------------------------------


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};
   
   

////////////////////////////////////////////////////////
//                                                    //
//               GRAMATICA DEL LENGUAJE               //                    
//                                                    //
////////////////////////////////////////////////////////

// Estructura del programa -----------------------------------------------------------

axiom          ::= cabecera cuerpo;

cabecera       ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS;

cuerpo         ::= declaraciones BEGIN sentencias END ID SEMICOLON
 		         | BEGIN sentencias END ID SEMICOLON
 		         | declaraciones BEGIN END ID SEMICOLON
 		         | BEGIN END ID SEMICOLON;
 		         
declaraciones  ::= constantesSimbolicas tipos variables subprogramas 
 				 | constantesSimbolicas variables subprogramas 
 				 | constantesSimbolicas tipos subprogramas
 				 | constantesSimbolicas tipos variables
                 | constantesSimbolicas tipos
           		 | constantesSimbolicas variables
           		 | constantesSimbolicas subprogramas
           		 | tipos variables
           		 | tipos subprogramas
           		 | variables subprogramas
           		 | constantesSimbolicas 
           		 | tipos
           		 | variables
           		 | subprogramas;
           		 

// Declaracion de tipos ---------------------------------------------------------------

tipoConstante    ::= TRUE | FALSE | INTEGER;

tipoVariable     ::= tipoPrimitivo | ID;

tipos            ::= tipos tipo | tipo;

tipo             ::= tipoPrimitivo | tipoEstructurado;

tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD SEMICOLON; 

tipoPrimitivo    ::= INTEGER | BOOLEAN;


// Declaracion de expresiones ---------------------------------------------------------

expresion        ::= expresion MINUS expresion
				   | expresion MULT expresion 
				   | expresion GREATERTHAN expresion
				   | expresion NOTEQUAL expresion
				   | expresion AND expresion
				   | LEFTBRACKET expresion RIGHTBRACKET
				   | ID LEFTBRACKET expresion RIGHTBRACKET
				   | ID COMMA expresion
			       | ID       
				   | INTEGER
				   | TRUE
				   | FALSE;
				   

// Declaracion de sentencias ----------------------------------------------------------

sentencias       ::= sentencia SEMICOLON | sentencias sentencia SEMICOLON;

sentencia        ::= sentenciaES
                   | sentenciaAsign
                   | sentenciaIf
                   | sentenciaReturn
				   | sentenciaWhile;

sentenciaES      ::= PUT_LINE LEFTBRACKET parametro RIGHTBRACKET;

sentenciaAsign   ::= ID ASIGN expresion;

sentenciaIf      ::= IF expresion THEN sentencias END IF | IF expresion THEN sentencias ELSE sentencias END IF;

sentenciaReturn  ::= RETURN expresion;

sentenciaWhile   ::= WHILE expresion LOOP sentencias END LOOP;

parametro        ::= expresion | STRING;


// Declaracion de constantes ----------------------------------------------------------

constantesSimbolicas ::= constantesSimbolicas constanteSimbolica | constanteSimbolica;

constanteSimbolica   ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON;

constanteSimbolica   ::= COLON error {:syntaxErrorManager.syntaxInfo ("Se esperaba ID"); errorCounter ++;:} CONSTANT ASIGN tipoConstante SEMICOLON
					   | ID error {:syntaxErrorManager.syntaxInfo ("Se esperaba :"); errorCounter ++;:} CONSTANT ASIGN tipoConstante SEMICOLON
					   | ID COLON error {:syntaxErrorManager.syntaxInfo ("Se esperaba constant"); errorCounter ++;:} ASIGN tipoConstante SEMICOLON
					   | ID COLON CONSTANT error {:syntaxErrorManager.syntaxInfo ("Se esperaba :="); errorCounter ++;:} tipoConstante SEMICOLON
					   | ID COLON CONSTANT ASIGN error {:syntaxErrorManager.syntaxInfo ("Se esperaba un valor entero/logico"); errorCounter ++;:} SEMICOLON
					   | ID COLON CONSTANT ASIGN tipoConstante error {:syntaxErrorManager.syntaxInfo ("Se esperaba ;"); errorCounter ++;:};					   


// Declaracion de variables -----------------------------------------------------------

variables       ::= variables variable | variable; 

variable        ::= ID COLON tipoVariable SEMICOLON | ID COMMA variable;

variable        ::= COLON error {:syntaxErrorManager.syntaxInfo ("Se esperaba ID"); errorCounter ++;:} tipoVariable SEMICOLON
                  | ID error {:syntaxErrorManager.syntaxInfo ("Se esperaba :"); errorCounter ++;:} tipoVariable SEMICOLON
                  | ID COLON error {:syntaxErrorManager.syntaxInfo ("Se esperaba un tipo primitivo/id"); errorCounter ++;:} SEMICOLON
                  | ID COLON tipoVariable error {:syntaxErrorManager.syntaxInfo ("Se esperaba ;"); errorCounter ++;:};

// Declaracion de subprogramas --------------------------------------------------------

subprogramas    ::= subprogramas subprograma | subprograma;

subprograma     ::= funcion | procedimiento;

funcion         ::= FUNCTION ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS cuerpo;

procedimiento   ::= PROCEDURE ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET IS cuerpo;

parametrosSubprograma  ::= parametrosSubprograma parametroSubprograma | parametroSubprograma;

parametroSubprograma   ::= ID COLON OUT tipo | ID COMMA parametroSubprograma;








  
  

           		 
 
 

 
 
 
 
 

