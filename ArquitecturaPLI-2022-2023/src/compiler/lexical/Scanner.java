/* The following code was generated by JFlex 1.4.1 on 23/10/2022, 18:07 */

package compiler.lexical;

import compiler.syntax.sym;
import compiler.lexical.Token;
import es.uned.lsi.compiler.lexical.ScannerIF;
import es.uned.lsi.compiler.lexical.LexicalError;
import es.uned.lsi.compiler.lexical.LexicalErrorManager;

// incluir aqui, si es necesario otras importaciones


// DIRECTIVAS


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 23/10/2022, 18:07 from the specification file
 * <tt>C:/Users/Isabe/Desktop/PL1/PEC/ArquitecturaPLI-2022-2023/doc/specs/scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner, ScannerIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\0\1\6\5\0\1\11"+
    "\1\12\1\20\1\17\1\14\1\13\1\25\1\21\12\7\1\16\1\15"+
    "\1\23\1\24\1\22\2\0\1\5\1\33\3\5\1\41\2\5\1\43"+
    "\6\5\1\46\3\5\1\51\2\5\1\53\3\5\4\0\1\47\1\0"+
    "\1\26\1\30\1\36\1\27\1\31\1\2\1\32\1\50\1\3\2\5"+
    "\1\35\1\5\1\4\1\34\1\45\1\5\1\44\1\37\1\40\1\42"+
    "\3\5\1\52\1\5\u1fa1\0\1\10\udfe3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\21\3\1\22\1\23\1\0\1\24"+
    "\1\25\1\26\1\27\23\3\1\30\1\3\1\31\2\3"+
    "\1\32\16\3\1\33\1\3\1\34\1\3\1\35\1\36"+
    "\5\3\1\0\1\37\2\3\1\40\2\3\1\41\4\3"+
    "\1\0\1\42\4\3\1\43\1\44\1\3\1\0\1\3"+
    "\1\45\1\3\1\46\1\3\1\0\1\47\1\50\1\3"+
    "\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\204\0\260\0\334\0\u0108"+
    "\0\54\0\54\0\54\0\u0134\0\54\0\54\0\u0160\0\54"+
    "\0\54\0\u018c\0\54\0\54\0\54\0\u01b8\0\u01e4\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\260\0\260"+
    "\0\334\0\54\0\54\0\54\0\54\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc"+
    "\0\260\0\u07e8\0\260\0\u0814\0\u0840\0\260\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\260\0\u0ad4\0\260\0\u0b00"+
    "\0\260\0\260\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08"+
    "\0\260\0\u0c34\0\u0c60\0\260\0\u0c8c\0\u0cb8\0\260\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\260\0\u0dc0\0\u0dec\0\u0e18"+
    "\0\u0e44\0\260\0\260\0\u0e70\0\u0e9c\0\u0ec8\0\260\0\u0ef4"+
    "\0\260\0\u0f20\0\u0f4c\0\260\0\260\0\u0f78\0\54\0\260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\2\1\25\1\26\1\6\1\27"+
    "\1\30\1\6\1\31\1\32\1\33\1\34\1\6\1\35"+
    "\1\36\1\6\1\37\1\40\1\41\1\42\1\2\1\6"+
    "\1\43\1\6\1\44\56\0\1\6\1\45\2\6\1\0"+
    "\1\6\16\0\14\6\1\46\4\6\1\0\4\6\2\0"+
    "\1\47\3\6\1\0\1\6\16\0\11\6\1\50\7\6"+
    "\1\0\4\6\2\0\4\6\1\0\1\6\16\0\21\6"+
    "\1\0\4\6\6\51\1\52\45\51\7\0\1\10\57\0"+
    "\1\53\64\0\1\54\53\0\1\55\31\0\2\6\1\56"+
    "\1\6\1\0\1\6\16\0\21\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\3\6\1\57\15\6\1\0"+
    "\4\6\2\0\2\6\1\60\1\6\1\0\1\6\16\0"+
    "\7\6\1\61\11\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\6\6\1\62\12\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\14\6\1\63\4\6\1\0"+
    "\4\6\2\0\4\6\1\0\1\6\16\0\6\6\1\64"+
    "\12\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\6\6\1\65\12\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\21\6\1\0\1\66\1\6\1\67\1\6"+
    "\2\0\4\6\1\0\1\6\16\0\1\70\20\6\1\0"+
    "\4\6\2\0\2\6\1\71\1\6\1\0\1\6\16\0"+
    "\21\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\3\6\1\72\15\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\16\6\1\73\2\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\14\6\1\74\4\6\1\0"+
    "\4\6\2\0\4\6\1\0\1\6\16\0\16\6\1\75"+
    "\2\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\21\6\1\0\1\76\3\6\2\0\2\6\1\77\1\6"+
    "\1\0\1\6\16\0\21\6\1\0\4\6\2\0\2\6"+
    "\1\100\1\6\1\0\1\6\16\0\21\6\1\0\4\6"+
    "\2\0\4\6\1\0\1\6\16\0\1\6\1\101\17\6"+
    "\1\0\4\6\2\0\4\6\1\0\1\6\16\0\4\6"+
    "\1\102\14\6\1\0\4\6\2\0\4\6\1\0\1\6"+
    "\16\0\1\6\1\103\17\6\1\0\4\6\2\0\4\6"+
    "\1\0\1\6\16\0\11\6\1\104\7\6\1\0\4\6"+
    "\2\0\4\6\1\0\1\6\16\0\6\6\1\105\12\6"+
    "\1\0\4\6\2\0\4\6\1\0\1\6\16\0\12\6"+
    "\1\106\6\6\1\0\4\6\2\0\4\6\1\0\1\6"+
    "\16\0\6\6\1\107\12\6\1\0\4\6\2\0\2\6"+
    "\1\110\1\6\1\0\1\6\16\0\21\6\1\0\4\6"+
    "\2\0\4\6\1\0\1\6\16\0\3\6\1\111\15\6"+
    "\1\0\4\6\2\0\4\6\1\0\1\6\16\0\17\6"+
    "\1\112\1\6\1\0\4\6\2\0\4\6\1\0\1\6"+
    "\16\0\7\6\1\113\11\6\1\0\4\6\2\0\4\6"+
    "\1\0\1\6\16\0\12\6\1\114\6\6\1\0\4\6"+
    "\2\0\4\6\1\0\1\6\16\0\10\6\1\115\1\6"+
    "\1\116\6\6\1\0\4\6\2\0\4\6\1\0\1\6"+
    "\16\0\6\6\1\117\12\6\1\0\4\6\2\0\4\6"+
    "\1\0\1\6\16\0\12\6\1\120\6\6\1\0\4\6"+
    "\2\0\4\6\1\0\1\6\16\0\14\6\1\121\4\6"+
    "\1\0\4\6\2\0\1\6\1\122\2\6\1\0\1\6"+
    "\16\0\21\6\1\0\4\6\1\0\1\3\4\6\1\0"+
    "\1\6\16\0\21\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\10\6\1\123\10\6\1\0\4\6\2\0"+
    "\1\6\1\124\2\6\1\0\1\6\16\0\21\6\1\0"+
    "\4\6\2\0\4\6\1\0\1\6\16\0\3\6\1\125"+
    "\15\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\7\6\1\126\11\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\17\6\1\127\1\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\11\6\1\130\7\6\1\0"+
    "\4\6\2\0\2\6\1\131\1\6\1\0\1\6\16\0"+
    "\21\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\3\6\1\132\15\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\11\6\1\133\7\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\3\6\1\134\15\6\1\0"+
    "\4\6\2\0\4\6\1\0\1\6\16\0\6\6\1\135"+
    "\12\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\14\6\1\136\4\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\10\6\1\137\10\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\21\6\1\140\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\3\6\1\141\15\6\1\0"+
    "\4\6\2\0\4\6\1\0\1\6\16\0\7\6\1\142"+
    "\11\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\12\6\1\143\6\6\1\0\4\6\2\0\2\6\1\144"+
    "\1\6\1\0\1\6\16\0\21\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\3\6\1\145\15\6\1\0"+
    "\4\6\2\0\4\6\1\0\1\6\16\0\12\6\1\146"+
    "\6\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\3\6\1\147\15\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\4\6\1\150\14\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\16\6\1\151\2\6\1\0"+
    "\4\6\2\0\4\6\1\0\1\6\16\0\16\6\1\152"+
    "\2\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\3\6\1\153\15\6\1\0\4\6\35\0\1\154\20\0"+
    "\4\6\1\0\1\6\16\0\3\6\1\155\15\6\1\0"+
    "\4\6\2\0\1\6\1\156\2\6\1\0\1\6\16\0"+
    "\21\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\1\157\20\6\1\0\4\6\2\0\4\6\1\0\1\6"+
    "\16\0\1\160\20\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\3\6\1\161\15\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\1\6\1\162\17\6\1\0"+
    "\4\6\2\0\2\6\1\163\1\6\1\0\1\6\16\0"+
    "\21\6\1\0\4\6\2\0\4\6\1\0\1\6\16\0"+
    "\1\6\1\164\17\6\1\0\4\6\3\0\1\165\52\0"+
    "\4\6\1\0\1\6\16\0\6\6\1\166\12\6\1\0"+
    "\4\6\2\0\2\6\1\167\1\6\1\0\1\6\16\0"+
    "\21\6\1\0\4\6\2\0\2\6\1\170\1\6\1\0"+
    "\1\6\16\0\21\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\16\6\1\171\2\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\14\6\1\172\4\6\1\0"+
    "\4\6\4\0\1\173\51\0\2\6\1\174\1\6\1\0"+
    "\1\6\16\0\21\6\1\0\4\6\2\0\4\6\1\0"+
    "\1\6\16\0\12\6\1\175\6\6\1\0\4\6\2\0"+
    "\4\6\1\0\1\6\16\0\16\6\1\176\2\6\1\0"+
    "\4\6\31\0\1\177\24\0\4\6\1\0\1\6\16\0"+
    "\3\6\1\200\15\6\1\0\4\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\3\11\1\1\2\11\1\1\2\11"+
    "\1\1\3\11\23\1\1\0\4\11\62\1\1\0\13\1"+
    "\1\0\10\1\1\0\5\1\1\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  LexicalErrorManager lexicalErrorManager = new LexicalErrorManager ();
  private int commentCount = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws LexicalError {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new LexicalError(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws LexicalError {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, LexicalError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { Token token = new Token (sym.COMMENT);  
                           token.setLine (yyline + 1);           
                           token.setColumn (yycolumn + 1);       
                           token.setLexema (yytext ());          
           			       return token;
          }
        case 43: break;
        case 11: 
          { Token token = new Token (sym.COLON);  
                           token.setLine (yyline + 1);           
                           token.setColumn (yycolumn + 1);       
                           token.setLexema (yytext ());          
           			       return token;
          }
        case 44: break;
        case 27: 
          { Token token = new Token (sym.ELSE);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 45: break;
        case 30: 
          { Token token = new Token (sym.TYPE);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 46: break;
        case 39: 
          { Token token = new Token (sym.FUNCTION);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 47: break;
        case 31: 
          { Token token = new Token (sym.TRUE);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 48: break;
        case 3: 
          { Token token = new Token (sym.ID);
	                       token.setLine (yyline + 1);
	                       token.setColumn (yycolumn + 1);
	                       token.setLexema (yytext ());
	           	           return token;
          }
        case 49: break;
        case 40: 
          { Token token = new Token (sym.CONSTANT);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 50: break;
        case 8: 
          { Token token = new Token (sym.MINUS);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 51: break;
        case 5: 
          { Token token = new Token (sym.DOUBLEQ);   
                           token.setLine (yyline + 1);           
                           token.setColumn (yycolumn + 1);       
                           token.setLexema (yytext ());          
           			       return token;
          }
        case 52: break;
        case 38: 
          { Token token = new Token (sym.INTEGER);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 53: break;
        case 6: 
          { Token token = new Token (sym.LEFTBRACKET);  
                           token.setLine (yyline + 1);           
                           token.setColumn (yycolumn + 1);       
                           token.setLexema (yytext ());          
           			       return token;
          }
        case 54: break;
        case 23: 
          { Token token = new Token (sym.NOTEQUAL);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 55: break;
        case 22: 
          { Token token = new Token (sym.ASIGN);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 56: break;
        case 16: 
          { Token token = new Token (sym.LESSTHAN);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 57: break;
        case 13: 
          { Token token = new Token (sym.MULT);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 58: break;
        case 24: 
          { Token token = new Token (sym.AND);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 59: break;
        case 4: 
          { Token token = new Token (sym.INTEGER);
	                       token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           	               return token;
          }
        case 60: break;
        case 19: 
          { Token token = new Token (sym.IS);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 61: break;
        case 37: 
          { Token token = new Token (sym.BOOLEAN);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 62: break;
        case 28: 
          { Token token = new Token (sym.LOOP);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 63: break;
        case 35: 
          { Token token = new Token (sym.RECORD);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 64: break;
        case 41: 
          { Token token = new Token (sym.PUT_LINE);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 65: break;
        case 17: 
          { Token token = new Token (sym.ACCESS);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 66: break;
        case 20: 
          { Token token = new Token (sym.STRING);
	                       token.setLine (yyline + 1);
	                       token.setColumn (yycolumn + 1);
	                       token.setLexema (yytext ());
	            	       return token;
          }
        case 67: break;
        case 42: 
          { Token token = new Token (sym.PROCEDURE);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 68: break;
        case 25: 
          { Token token = new Token (sym.END);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 69: break;
        case 15: 
          { Token token = new Token (sym.GREATERTHAN);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 70: break;
        case 32: 
          { Token token = new Token (sym.BEGIN);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 71: break;
        case 14: 
          { Token token = new Token (sym.DIV);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 72: break;
        case 10: 
          { Token token = new Token (sym.SEMICOLON);  
                           token.setLine (yyline + 1);           
                           token.setColumn (yycolumn + 1);       
                           token.setLexema (yytext ());          
           			       return token;
          }
        case 73: break;
        case 12: 
          { Token token = new Token (sym.PLUS);   // nuevo objeto token
                           token.setLine (yyline + 1);           // fija la linea
                           token.setColumn (yycolumn + 1);       // fija la columna
                           token.setLexema (yytext ());          // fija el lexema
           			       return token;                         // devuelve el token
          }
        case 74: break;
        case 29: 
          { Token token = new Token (sym.THEN);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 75: break;
        case 9: 
          { Token token = new Token (sym.COMMA);  
                           token.setLine (yyline + 1);           
                           token.setColumn (yycolumn + 1);       
                           token.setLexema (yytext ());          
           			       return token;
          }
        case 76: break;
        case 18: 
          { Token token = new Token (sym.IF);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 77: break;
        case 26: 
          { Token token = new Token (sym.OUT);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 78: break;
        case 1: 
          { LexicalError error = new LexicalError ();
                           error.setLine (yyline + 1);
                           error.setColumn (yycolumn + 1);
                           error.setLexema (yytext ());
                           lexicalErrorManager.lexicalError (error);
          }
        case 79: break;
        case 36: 
          { Token token = new Token (sym.RETURN);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 80: break;
        case 34: 
          { Token token = new Token (sym.WHILE);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                           token.setLexema (yytext ());
           			       return token;
          }
        case 81: break;
        case 33: 
          { Token token = new Token (sym.FALSE);  
                           token.setLine (yyline + 1); 
                           token.setColumn (yycolumn + 1); 
                           token.setLexema (yytext ()); 
                           return token;
          }
        case 82: break;
        case 2: 
          { 
          }
        case 83: break;
        case 7: 
          { Token token = new Token (sym.RIGHTBRACKET);  
                           token.setLine (yyline + 1);           
                           token.setColumn (yycolumn + 1);       
                           token.setLexema (yytext ());          
           			       return token;
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
