
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 22 08:07:32 GMT 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 22 08:07:32 GMT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\045\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\007\000\002\004\003" +
    "\000\002\005\010\000\002\005\007\000\002\005\007\000" +
    "\002\005\006\000\002\007\004\000\002\007\003\000\002" +
    "\007\003\000\002\010\005\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\025\003\000\002" +
    "\025\003\000\002\022\004\000\002\022\003\000\002\021" +
    "\003\000\002\021\003\000\002\023\012\000\002\046\002" +
    "\000\002\023\013\000\002\047\002\000\002\023\013\000" +
    "\002\050\002\000\002\023\013\000\002\051\002\000\002" +
    "\023\013\000\002\052\002\000\002\023\013\000\002\053" +
    "\002\000\002\023\013\000\002\054\002\000\002\023\013" +
    "\000\002\023\012\000\002\024\003\000\002\024\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\006\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\012\004\000\002" +
    "\012\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\013\006" +
    "\000\002\014\005\000\002\014\005\000\002\015\010\000" +
    "\002\015\012\000\002\017\010\000\002\020\006\000\002" +
    "\020\005\000\002\044\003\000\002\044\003\000\002\030" +
    "\004\000\002\030\003\000\002\027\010\000\002\055\002" +
    "\000\002\027\011\000\002\056\002\000\002\027\011\000" +
    "\002\057\002\000\002\027\011\000\002\060\002\000\002" +
    "\027\011\000\002\061\002\000\002\027\011\000\002\027" +
    "\010\000\002\033\004\000\002\033\003\000\002\032\006" +
    "\000\002\032\005\000\002\062\002\000\002\032\007\000" +
    "\002\063\002\000\002\032\007\000\002\064\002\000\002" +
    "\032\007\000\002\032\006\000\002\037\004\000\002\037" +
    "\003\000\002\036\003\000\002\036\003\000\002\040\013" +
    "\000\002\040\012\000\002\065\002\000\002\040\013\000" +
    "\002\066\002\000\002\040\013\000\002\067\002\000\002" +
    "\040\013\000\002\070\002\000\002\040\013\000\002\071" +
    "\002\000\002\040\013\000\002\072\002\000\002\040\013" +
    "\000\002\073\002\000\002\040\013\000\002\041\013\000" +
    "\002\041\012\000\002\041\012\000\002\041\011\000\002" +
    "\074\002\000\002\041\012\000\002\075\002\000\002\041" +
    "\011\000\002\042\011\000\002\042\010\000\002\043\010" +
    "\000\002\043\007\000\002\043\007\000\002\043\006\000" +
    "\002\034\004\000\002\034\005\000\002\034\003\000\002" +
    "\035\006\000\002\035\005\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\006\003\000\036\000\001\002\000\004\002" +
    "\u0178\001\002\000\006\003\010\036\006\001\002\000\004" +
    "\046\u0174\001\002\000\004\002\uffff\001\002\000\024\003" +
    "\ufffc\012\ufffc\022\ufffc\023\ufffc\030\ufffc\032\ufffc\036\ufffc" +
    "\044\ufffc\046\ufffc\001\002\000\024\003\037\012\023\022" +
    "\026\023\030\030\022\032\040\036\012\044\031\046\024" +
    "\001\002\000\004\046\u015a\001\002\000\012\022\uffee\030" +
    "\022\036\012\046\163\001\002\000\022\012\uffe6\022\uffe6" +
    "\023\uffe6\030\uffe6\032\uffe6\036\uffe6\044\uffe6\046\uffe6\001" +
    "\002\000\012\022\uff95\030\uff95\036\uff95\046\uff95\001\002" +
    "\000\024\003\037\012\023\022\ufff5\023\030\030\022\032" +
    "\040\036\012\044\031\046\024\001\002\000\004\002\ufffe" +
    "\001\002\000\026\006\uffe4\011\uffe4\012\uffe4\022\uffe4\023" +
    "\uffe4\030\uffe4\032\uffe4\036\uffe4\044\uffe4\046\uffe4\001\002" +
    "\000\014\012\156\022\uffef\030\022\036\012\046\303\001" +
    "\002\000\006\003\u011d\046\u011c\001\002\000\004\003\u0116" +
    "\001\002\000\010\003\373\010\235\012\374\001\002\000" +
    "\012\022\uff97\030\uff97\036\uff97\046\uff97\001\002\000\014" +
    "\026\364\031\050\037\046\045\043\046\051\001\002\000" +
    "\026\006\uffe5\011\uffe5\012\uffe5\022\uffe5\023\uffe5\030\uffe5" +
    "\032\uffe5\036\uffe5\044\uffe5\046\uffe5\001\002\000\032\003" +
    "\uffd2\006\uffd2\011\uffd2\012\uffd2\022\uffd2\023\uffd2\030\uffd2" +
    "\032\uffd2\033\uffd2\036\uffd2\044\uffd2\046\uffd2\001\002\000" +
    "\006\003\313\046\312\001\002\000\022\012\156\022\ufff0" +
    "\023\030\030\022\032\040\036\012\044\031\046\157\001" +
    "\002\000\004\022\042\001\002\000\024\003\uffb0\012\uffb0" +
    "\022\uffb0\023\uffb0\030\uffb0\032\uffb0\036\uffb0\044\uffb0\046" +
    "\uffb0\001\002\000\004\022\ufff6\001\002\000\020\003\uffa2" +
    "\012\uffa2\022\uffa2\026\uffa2\030\uffa2\036\uffa2\046\uffa2\001" +
    "\002\000\004\022\uffed\001\002\000\032\003\uffd3\006\uffd3" +
    "\011\uffd3\012\uffd3\022\uffd3\023\uffd3\030\uffd3\032\uffd3\033" +
    "\uffd3\036\uffd3\044\uffd3\046\uffd3\001\002\000\012\022\uff96" +
    "\030\uff96\036\uff96\046\uff96\001\002\000\014\026\055\031" +
    "\050\037\046\045\043\046\051\001\002\000\014\005\073" +
    "\027\102\032\074\043\076\046\103\001\002\000\004\011" +
    "\uffbf\001\002\000\004\011\uffc0\001\002\000\004\005\146" +
    "\001\002\000\004\011\145\001\002\000\014\005\073\027" +
    "\102\032\074\043\076\046\103\001\002\000\010\005\067" +
    "\017\066\020\070\001\002\000\004\011\uffbc\001\002\000" +
    "\004\011\uffbd\001\002\000\014\026\062\031\050\037\046" +
    "\045\043\046\051\001\002\000\004\046\057\001\002\000" +
    "\004\011\uffbe\001\002\000\004\011\060\001\002\000\004" +
    "\002\ufff9\001\002\000\004\011\065\001\002\000\004\046" +
    "\063\001\002\000\004\011\064\001\002\000\004\002\ufffb" +
    "\001\002\000\020\025\uffc1\026\uffc1\031\uffc1\037\uffc1\041" +
    "\uffc1\045\uffc1\046\uffc1\001\002\000\014\005\073\027\102" +
    "\032\074\043\076\046\103\001\002\000\020\005\073\006" +
    "\075\027\102\032\074\043\076\046\103\047\100\001\002" +
    "\000\004\046\071\001\002\000\006\017\066\020\070\001" +
    "\002\000\004\011\uffba\001\002\000\014\005\073\027\102" +
    "\032\074\043\076\046\103\001\002\000\030\006\uffc5\010" +
    "\127\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\021\uffc5\034\uffc5\042\uffc5\001\002\000\004\011\uffb4\001" +
    "\002\000\026\006\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\020\uffc4\021\uffc4\034\uffc4\042\uffc4\001\002\000" +
    "\004\006\126\001\002\000\004\006\uffb2\001\002\000\020" +
    "\006\uffb3\013\113\014\111\015\115\016\114\020\116\021" +
    "\112\001\002\000\026\006\uffc3\011\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\020\uffc3\021\uffc3\034\uffc3\042\uffc3\001" +
    "\002\000\032\005\105\006\uffc6\010\104\011\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\034\uffc6\042" +
    "\uffc6\001\002\000\014\005\073\027\102\032\074\043\076" +
    "\046\103\001\002\000\016\005\073\006\106\027\102\032" +
    "\074\043\076\046\103\001\002\000\026\006\uffcb\011\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021\uffcb\034" +
    "\uffcb\042\uffcb\001\002\000\020\006\110\013\113\014\111" +
    "\015\115\016\114\020\116\021\112\001\002\000\026\006" +
    "\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9" +
    "\021\uffc9\034\uffc9\042\uffc9\001\002\000\014\005\073\027" +
    "\102\032\074\043\076\046\103\001\002\000\014\005\073" +
    "\027\102\032\074\043\076\046\103\001\002\000\014\005" +
    "\073\027\102\032\074\043\076\046\103\001\002\000\014" +
    "\005\073\027\102\032\074\043\076\046\103\001\002\000" +
    "\014\005\073\027\102\032\074\043\076\046\103\001\002" +
    "\000\014\005\073\027\102\032\074\043\076\046\103\001" +
    "\002\000\026\006\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\020\uffcc\021\uffcc\034\uffcc\042\uffcc\001\002\000" +
    "\026\006\uffcf\011\uffcf\013\113\014\111\015\uffcf\016\uffcf" +
    "\020\116\021\uffcf\034\uffcf\042\uffcf\001\002\000\026\006" +
    "\uffce\011\uffce\013\113\014\111\015\115\016\uffce\020\116" +
    "\021\uffce\034\uffce\042\uffce\001\002\000\026\006\uffd1\011" +
    "\uffd1\013\uffd1\014\111\015\uffd1\016\uffd1\020\116\021\uffd1" +
    "\034\uffd1\042\uffd1\001\002\000\026\006\uffcd\011\uffcd\013" +
    "\113\014\111\015\115\016\114\020\116\021\uffcd\034\uffcd" +
    "\042\uffcd\001\002\000\026\006\uffd0\011\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\020\116\021\uffd0\034\uffd0\042\uffd0" +
    "\001\002\000\026\006\uffc8\011\uffc8\013\113\014\111\015" +
    "\115\016\114\020\116\021\112\034\uffc8\042\uffc8\001\002" +
    "\000\004\011\uffb5\001\002\000\014\005\073\027\102\032" +
    "\074\043\076\046\103\001\002\000\026\006\uffc7\011\uffc7" +
    "\013\113\014\111\015\115\016\114\020\116\021\112\034" +
    "\uffc7\042\uffc7\001\002\000\020\006\132\013\113\014\111" +
    "\015\115\016\114\020\116\021\112\001\002\000\026\006" +
    "\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca" +
    "\021\uffca\034\uffca\042\uffca\001\002\000\020\011\uffb9\013" +
    "\113\014\111\015\115\016\114\020\116\021\112\001\002" +
    "\000\020\013\113\014\111\015\115\016\114\020\116\021" +
    "\112\042\135\001\002\000\012\031\050\037\046\045\043" +
    "\046\051\001\002\000\016\025\137\026\140\031\050\037" +
    "\046\045\043\046\051\001\002\000\012\031\050\037\046" +
    "\045\043\046\051\001\002\000\004\031\141\001\002\000" +
    "\004\011\uffb8\001\002\000\014\026\143\031\050\037\046" +
    "\045\043\046\051\001\002\000\004\031\144\001\002\000" +
    "\004\011\uffb7\001\002\000\020\025\uffc2\026\uffc2\031\uffc2" +
    "\037\uffc2\041\uffc2\045\uffc2\046\uffc2\001\002\000\016\005" +
    "\073\027\102\032\074\043\076\046\103\047\100\001\002" +
    "\000\004\006\150\001\002\000\004\011\uffbb\001\002\000" +
    "\020\013\113\014\111\015\115\016\114\020\116\021\112" +
    "\034\152\001\002\000\012\031\050\037\046\045\043\046" +
    "\051\001\002\000\014\026\154\031\050\037\046\045\043" +
    "\046\051\001\002\000\004\034\155\001\002\000\004\011" +
    "\uffb6\001\002\000\004\003\306\001\002\000\010\003\236" +
    "\010\235\012\237\001\002\000\022\012\uffe7\022\uffe7\023" +
    "\uffe7\030\uffe7\032\uffe7\036\uffe7\044\uffe7\046\uffe7\001\002" +
    "\000\014\012\156\022\ufff3\030\022\036\012\046\303\001" +
    "\002\000\012\022\ufff2\030\022\036\012\046\163\001\002" +
    "\000\004\003\165\001\002\000\012\022\uff98\030\uff98\036" +
    "\uff98\046\uff98\001\002\000\004\005\uff92\001\002\000\004" +
    "\005\167\001\002\000\004\006\170\001\002\000\004\041" +
    "\171\001\002\000\006\023\030\032\040\001\002\000\004" +
    "\033\173\001\002\000\034\003\037\012\156\022\200\023" +
    "\030\030\022\031\050\032\040\036\012\037\046\041\176" +
    "\044\031\045\043\046\177\001\002\000\012\022\uff91\030" +
    "\uff91\036\uff91\046\uff91\001\002\000\014\031\050\037\046" +
    "\041\274\045\043\046\051\001\002\000\014\005\uff7e\027" +
    "\uff7e\032\uff7e\043\uff7e\046\uff7e\001\002\000\016\003\236" +
    "\005\067\010\235\012\237\017\066\020\070\001\002\000" +
    "\014\031\050\037\046\041\220\045\043\046\051\001\002" +
    "\000\004\022\202\001\002\000\014\031\050\037\046\041" +
    "\203\045\043\046\051\001\002\000\014\005\073\027\102" +
    "\032\074\043\076\046\103\001\002\000\014\031\050\037" +
    "\046\041\205\045\043\046\051\001\002\000\014\005\073" +
    "\027\102\032\074\043\076\046\103\001\002\000\020\011" +
    "\207\013\113\014\111\015\115\016\114\020\116\021\112" +
    "\001\002\000\004\026\210\001\002\000\004\046\211\001" +
    "\002\000\004\011\212\001\002\000\012\022\uff84\030\uff84" +
    "\036\uff84\046\uff84\001\002\000\020\011\214\013\113\014" +
    "\111\015\115\016\114\020\116\021\112\001\002\000\004" +
    "\026\215\001\002\000\004\046\216\001\002\000\004\011" +
    "\217\001\002\000\012\022\uff82\030\uff82\036\uff82\046\uff82" +
    "\001\002\000\014\005\073\027\102\032\074\043\076\046" +
    "\103\001\002\000\014\031\050\037\046\041\222\045\043" +
    "\046\051\001\002\000\014\005\073\027\102\032\074\043" +
    "\076\046\103\001\002\000\020\011\224\013\113\014\111" +
    "\015\115\016\114\020\116\021\112\001\002\000\004\026" +
    "\225\001\002\000\004\046\226\001\002\000\004\011\227" +
    "\001\002\000\012\022\uff83\030\uff83\036\uff83\046\uff83\001" +
    "\002\000\020\011\231\013\113\014\111\015\115\016\114" +
    "\020\116\021\112\001\002\000\004\026\232\001\002\000" +
    "\004\046\233\001\002\000\004\011\234\001\002\000\012" +
    "\022\uff81\030\uff81\036\uff81\046\uff81\001\002\000\006\012" +
    "\156\046\256\001\002\000\014\005\uff92\023\uff9d\032\uff9d" +
    "\033\uffe2\046\uff9d\001\002\000\012\003\241\023\030\032" +
    "\040\046\240\001\002\000\006\003\uffe8\011\uffe8\001\002" +
    "\000\004\011\uff9b\001\002\000\006\003\uffe9\011\uffe9\001" +
    "\002\000\006\003\245\011\244\001\002\000\020\003\uffa1" +
    "\012\uffa1\022\uffa1\026\uffa1\030\uffa1\036\uffa1\046\uffa1\001" +
    "\002\000\020\003\uff99\012\uff99\022\uff99\026\uff99\030\uff99" +
    "\036\uff99\046\uff99\001\002\000\004\011\247\001\002\000" +
    "\020\003\uff9a\012\uff9a\022\uff9a\026\uff9a\030\uff9a\036\uff9a" +
    "\046\uff9a\001\002\000\004\033\254\001\002\000\010\023" +
    "\030\032\040\046\240\001\002\000\004\011\253\001\002" +
    "\000\020\003\uff9c\012\uff9c\022\uff9c\026\uff9c\030\uff9c\036" +
    "\uff9c\046\uff9c\001\002\000\004\040\255\001\002\000\006" +
    "\012\156\046\256\001\002\000\010\003\264\010\235\012" +
    "\237\001\002\000\010\012\156\026\261\046\256\001\002" +
    "\000\020\003\uffa3\012\uffa3\022\uffa3\026\uffa3\030\uffa3\036" +
    "\uffa3\046\uffa3\001\002\000\004\040\262\001\002\000\004" +
    "\011\263\001\002\000\026\006\uffe1\011\uffe1\012\uffe1\022" +
    "\uffe1\023\uffe1\030\uffe1\032\uffe1\036\uffe1\044\uffe1\046\uffe1" +
    "\001\002\000\010\023\uff9d\032\uff9d\046\uff9d\001\002\000" +
    "\020\003\uffa0\012\uffa0\022\uffa0\026\uffa0\030\uffa0\036\uffa0" +
    "\046\uffa0\001\002\000\014\005\073\027\102\032\074\043" +
    "\076\046\103\001\002\000\020\011\270\013\113\014\111" +
    "\015\115\016\114\020\116\021\112\001\002\000\004\026" +
    "\271\001\002\000\004\046\272\001\002\000\004\011\273" +
    "\001\002\000\012\022\uff7d\030\uff7d\036\uff7d\046\uff7d\001" +
    "\002\000\014\005\uff80\027\uff80\032\uff80\043\uff80\046\uff80" +
    "\001\002\000\014\005\073\027\102\032\074\043\076\046" +
    "\103\001\002\000\020\011\277\013\113\014\111\015\115" +
    "\016\114\020\116\021\112\001\002\000\004\026\300\001" +
    "\002\000\004\046\301\001\002\000\004\011\302\001\002" +
    "\000\012\022\uff7f\030\uff7f\036\uff7f\046\uff7f\001\002\000" +
    "\010\003\305\010\235\012\237\001\002\000\012\022\ufff4" +
    "\030\022\036\012\046\163\001\002\000\012\005\uff92\023" +
    "\uff9d\032\uff9d\046\uff9d\001\002\000\010\023\uff9f\032\uff9f" +
    "\046\uff9f\001\002\000\010\023\030\032\040\046\240\001" +
    "\002\000\004\011\311\001\002\000\020\003\uff9e\012\uff9e" +
    "\022\uff9e\026\uff9e\030\uff9e\036\uff9e\046\uff9e\001\002\000" +
    "\006\003\323\033\324\001\002\000\004\033\uffe0\001\002" +
    "\000\004\033\315\001\002\000\004\040\316\001\002\000" +
    "\006\012\156\046\256\001\002\000\010\012\156\026\320" +
    "\046\256\001\002\000\004\040\321\001\002\000\004\011" +
    "\322\001\002\000\026\006\uffdf\011\uffdf\012\uffdf\022\uffdf" +
    "\023\uffdf\030\uffdf\032\uffdf\036\uffdf\044\uffdf\046\uffdf\001" +
    "\002\000\004\040\uffde\001\002\000\006\003\326\040\325" +
    "\001\002\000\010\003\334\012\156\046\256\001\002\000" +
    "\006\012\uffdc\046\uffdc\001\002\000\006\012\156\046\256" +
    "\001\002\000\010\012\156\026\331\046\256\001\002\000" +
    "\004\040\332\001\002\000\004\011\333\001\002\000\026" +
    "\006\uffdb\011\uffdb\012\uffdb\022\uffdb\023\uffdb\030\uffdb\032" +
    "\uffdb\036\uffdb\044\uffdb\046\uffdb\001\002\000\004\026\uffda" +
    "\001\002\000\012\003\336\012\156\026\337\046\256\001" +
    "\002\000\006\026\346\040\uffd8\001\002\000\006\003\341" +
    "\040\340\001\002\000\004\011\344\001\002\000\004\011" +
    "\uffd6\001\002\000\004\011\343\001\002\000\026\006\uffd5" +
    "\011\uffd5\012\uffd5\022\uffd5\023\uffd5\030\uffd5\032\uffd5\036" +
    "\uffd5\044\uffd5\046\uffd5\001\002\000\026\006\uffe3\011\uffe3" +
    "\012\uffe3\022\uffe3\023\uffe3\030\uffe3\032\uffe3\036\uffe3\044" +
    "\uffe3\046\uffe3\001\002\000\004\040\350\001\002\000\004" +
    "\040\347\001\002\000\026\006\uffd4\011\uffd4\012\uffd4\022" +
    "\uffd4\023\uffd4\030\uffd4\032\uffd4\036\uffd4\044\uffd4\046\uffd4" +
    "\001\002\000\004\011\351\001\002\000\026\006\uffd7\011" +
    "\uffd7\012\uffd7\022\uffd7\023\uffd7\030\uffd7\032\uffd7\036\uffd7" +
    "\044\uffd7\046\uffd7\001\002\000\004\026\353\001\002\000" +
    "\004\040\354\001\002\000\004\011\355\001\002\000\026" +
    "\006\uffd9\011\uffd9\012\uffd9\022\uffd9\023\uffd9\030\uffd9\032" +
    "\uffd9\036\uffd9\044\uffd9\046\uffd9\001\002\000\004\040\357" +
    "\001\002\000\006\012\156\046\256\001\002\000\010\012" +
    "\156\026\361\046\256\001\002\000\004\040\362\001\002" +
    "\000\004\011\363\001\002\000\026\006\uffdd\011\uffdd\012" +
    "\uffdd\022\uffdd\023\uffdd\030\uffdd\032\uffdd\036\uffdd\044\uffdd" +
    "\046\uffdd\001\002\000\004\046\371\001\002\000\014\026" +
    "\366\031\050\037\046\045\043\046\051\001\002\000\004" +
    "\046\367\001\002\000\004\011\370\001\002\000\004\002" +
    "\ufffa\001\002\000\004\011\372\001\002\000\004\002\ufff8" +
    "\001\002\000\016\005\uff92\023\uff9d\024\uffac\032\uff9d\033" +
    "\uffe2\046\uff9d\001\002\000\014\003\376\023\030\024\375" +
    "\032\040\046\240\001\002\000\006\003\u0107\017\u0106\001" +
    "\002\000\006\011\uff9b\017\uffaa\001\002\000\004\017\u0100" +
    "\001\002\000\010\027\u0104\032\u0101\043\u0103\001\002\000" +
    "\006\003\uffea\011\uffea\001\002\000\004\011\u0105\001\002" +
    "\000\006\003\uffec\011\uffec\001\002\000\006\003\uffeb\011" +
    "\uffeb\001\002\000\024\003\uffa9\012\uffa9\022\uffa9\023\uffa9" +
    "\030\uffa9\032\uffa9\036\uffa9\044\uffa9\046\uffa9\001\002\000" +
    "\012\003\u010c\027\u0104\032\u0101\043\u0103\001\002\000\010" +
    "\027\uffa8\032\uffa8\043\uffa8\001\002\000\010\027\u0104\032" +
    "\u0101\043\u0103\001\002\000\004\011\u010a\001\002\000\024" +
    "\003\uffa7\012\uffa7\022\uffa7\023\uffa7\030\uffa7\032\uffa7\036" +
    "\uffa7\044\uffa7\046\uffa7\001\002\000\006\003\u0110\011\u010f" +
    "\001\002\000\004\011\uffa6\001\002\000\004\011\u010e\001" +
    "\002\000\024\003\uffa5\012\uffa5\022\uffa5\023\uffa5\030\uffa5" +
    "\032\uffa5\036\uffa5\044\uffa5\046\uffa5\001\002\000\024\003" +
    "\uffaf\012\uffaf\022\uffaf\023\uffaf\030\uffaf\032\uffaf\036\uffaf" +
    "\044\uffaf\046\uffaf\001\002\000\024\003\uffa4\012\uffa4\022" +
    "\uffa4\023\uffa4\030\uffa4\032\uffa4\036\uffa4\044\uffa4\046\uffa4" +
    "\001\002\000\004\024\u0112\001\002\000\004\017\u0113\001" +
    "\002\000\010\027\u0104\032\u0101\043\u0103\001\002\000\004" +
    "\011\u0115\001\002\000\024\003\uffab\012\uffab\022\uffab\023" +
    "\uffab\030\uffab\032\uffab\036\uffab\044\uffab\046\uffab\001\002" +
    "\000\012\023\uff9f\024\uffae\032\uff9f\046\uff9f\001\002\000" +
    "\004\024\u0118\001\002\000\004\017\u0119\001\002\000\010" +
    "\027\u0104\032\u0101\043\u0103\001\002\000\004\011\u011b\001" +
    "\002\000\024\003\uffad\012\uffad\022\uffad\023\uffad\030\uffad" +
    "\032\uffad\036\uffad\044\uffad\046\uffad\001\002\000\006\003" +
    "\u0126\005\u0125\001\002\000\004\005\uff90\001\002\000\004" +
    "\005\u011f\001\002\000\004\006\u0120\001\002\000\004\041" +
    "\u0121\001\002\000\006\023\030\032\040\001\002\000\004" +
    "\033\u0123\001\002\000\034\003\037\012\156\022\200\023" +
    "\030\030\022\031\050\032\040\036\012\037\046\041\176" +
    "\044\031\045\043\046\177\001\002\000\012\022\uff8f\030" +
    "\uff8f\036\uff8f\046\uff8f\001\002\000\010\003\u012f\006\u012e" +
    "\046\u012d\001\002\000\004\006\uff8e\001\002\000\004\006" +
    "\u0128\001\002\000\004\041\u0129\001\002\000\006\023\030" +
    "\032\040\001\002\000\004\033\u012b\001\002\000\034\003" +
    "\037\012\156\022\200\023\030\030\022\031\050\032\040" +
    "\036\012\037\046\041\176\044\031\045\043\046\177\001" +
    "\002\000\012\022\uff8d\030\uff8d\036\uff8d\046\uff8d\001\002" +
    "\000\006\010\u014f\012\u0150\001\002\000\006\003\u013f\041" +
    "\u0140\001\002\000\004\041\uff8c\001\002\000\010\006\u0132" +
    "\011\u0133\046\u012d\001\002\000\010\006\uff74\011\uff74\046" +
    "\uff74\001\002\000\004\041\u0136\001\002\000\004\046\u012d" +
    "\001\002\000\010\006\uff76\011\uff76\046\uff76\001\002\000" +
    "\010\006\uff75\011\uff75\046\uff75\001\002\000\006\023\030" +
    "\032\040\001\002\000\004\033\u0138\001\002\000\034\003" +
    "\037\012\156\022\200\023\030\030\022\031\050\032\040" +
    "\036\012\037\046\041\176\044\031\045\043\046\177\001" +
    "\002\000\012\022\uff94\030\uff94\036\uff94\046\uff94\001\002" +
    "\000\004\041\u013b\001\002\000\006\023\030\032\040\001" +
    "\002\000\004\033\u013d\001\002\000\034\003\037\012\156" +
    "\022\200\023\030\030\022\031\050\032\040\036\012\037" +
    "\046\041\176\044\031\045\043\046\177\001\002\000\012" +
    "\022\uff8b\030\uff8b\036\uff8b\046\uff8b\001\002\000\006\023" +
    "\uff8a\032\uff8a\001\002\000\010\003\u0141\023\030\032\040" +
    "\001\002\000\004\033\uff88\001\002\000\006\003\u0143\033" +
    "\u0144\001\002\000\034\003\uff86\012\uff86\022\uff86\023\uff86" +
    "\030\uff86\031\uff86\032\uff86\036\uff86\037\uff86\041\uff86\044" +
    "\uff86\045\uff86\046\uff86\001\002\000\034\003\037\012\156" +
    "\022\200\023\030\030\022\031\050\032\040\036\012\037" +
    "\046\041\176\044\031\045\043\046\177\001\002\000\012" +
    "\022\uff93\030\uff93\036\uff93\046\uff93\001\002\000\034\003" +
    "\037\012\156\022\200\023\030\030\022\031\050\032\040" +
    "\036\012\037\046\041\176\044\031\045\043\046\177\001" +
    "\002\000\012\022\uff85\030\uff85\036\uff85\046\uff85\001\002" +
    "\000\004\033\u0149\001\002\000\034\003\037\012\156\022" +
    "\200\023\030\030\022\031\050\032\040\036\012\037\046" +
    "\041\176\044\031\045\043\046\177\001\002\000\012\022" +
    "\uff87\030\uff87\036\uff87\046\uff87\001\002\000\006\023\030" +
    "\032\040\001\002\000\004\033\u014d\001\002\000\034\003" +
    "\037\012\156\022\200\023\030\030\022\031\050\032\040" +
    "\036\012\037\046\041\176\044\031\045\043\046\177\001" +
    "\002\000\012\022\uff89\030\uff89\036\uff89\046\uff89\001\002" +
    "\000\004\046\u012d\001\002\000\014\023\030\032\040\035" +
    "\u0152\044\031\046\u0151\001\002\000\004\003\u0155\001\002" +
    "\000\012\023\030\032\040\044\031\046\u0151\001\002\000" +
    "\010\006\uff72\011\uff72\046\uff72\001\002\000\010\006\uff73" +
    "\011\uff73\046\uff73\001\002\000\004\033\uffe2\001\002\000" +
    "\010\006\uff71\011\uff71\046\uff71\001\002\000\012\022\ufff1" +
    "\030\022\036\012\046\163\001\002\000\024\003\uffb1\012" +
    "\uffb1\022\uffb1\023\uffb1\030\uffb1\032\uffb1\036\uffb1\044\uffb1" +
    "\046\uffb1\001\002\000\004\022\ufff7\001\002\000\004\005" +
    "\u015b\001\002\000\006\006\u015c\046\u012d\001\002\000\004" +
    "\033\u0172\001\002\000\010\006\u015e\011\u0133\046\u012d\001" +
    "\002\000\004\033\u015f\001\002\000\024\003\037\012\156" +
    "\022\u0161\023\030\030\022\032\040\036\012\044\031\046" +
    "\157\001\002\000\012\022\uff7c\030\uff7c\036\uff7c\046\uff7c" +
    "\001\002\000\014\026\u016b\031\050\037\046\045\043\046" +
    "\051\001\002\000\004\022\u0163\001\002\000\014\026\u0165" +
    "\031\050\037\046\045\043\046\051\001\002\000\014\026" +
    "\u0168\031\050\037\046\045\043\046\051\001\002\000\004" +
    "\046\u0166\001\002\000\004\011\u0167\001\002\000\012\022" +
    "\uff78\030\uff78\036\uff78\046\uff78\001\002\000\004\046\u0169" +
    "\001\002\000\004\011\u016a\001\002\000\012\022\uff7a\030" +
    "\uff7a\036\uff7a\046\uff7a\001\002\000\004\046\u0170\001\002" +
    "\000\014\026\u016d\031\050\037\046\045\043\046\051\001" +
    "\002\000\004\046\u016e\001\002\000\004\011\u016f\001\002" +
    "\000\012\022\uff79\030\uff79\036\uff79\046\uff79\001\002\000" +
    "\004\011\u0171\001\002\000\012\022\uff77\030\uff77\036\uff77" +
    "\046\uff77\001\002\000\024\003\037\012\156\022\u0161\023" +
    "\030\030\022\032\040\036\012\044\031\046\157\001\002" +
    "\000\012\022\uff7b\030\uff7b\036\uff7b\046\uff7b\001\002\000" +
    "\004\005\u0175\001\002\000\004\006\u0176\001\002\000\004" +
    "\033\u0177\001\002\000\024\003\ufffd\012\ufffd\022\ufffd\023" +
    "\ufffd\030\ufffd\032\ufffd\036\ufffd\044\ufffd\046\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\006\002\003\045\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\016\007" +
    "\032\010\034\021\013\022\031\023\017\024\026\027\033" +
    "\030\015\032\035\033\020\036\024\037\012\040\040\042" +
    "\014\001\001\000\002\001\001\000\010\036\163\040\040" +
    "\042\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\u0158\021\013\022\031\023\017\024\026\027\u0157" +
    "\032\035\033\020\036\024\037\012\040\040\042\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\032\257" +
    "\036\024\037\u0156\040\040\042\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\046\012\364\013\044\014\043\015\055\017" +
    "\052\020\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\021\157\023\017\024\026\032" +
    "\035\033\160\036\024\037\161\040\040\042\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\046\012\053\013\044\014\043\015" +
    "\055\017\052\020\051\001\001\000\004\031\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\060\013" +
    "\044\014\043\015\055\017\052\020\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\132\001" +
    "\001\000\006\031\100\044\076\001\001\000\004\014\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\124" +
    "\001\001\000\004\031\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\123\001\001" +
    "\000\004\031\122\001\001\000\004\031\121\001\001\000" +
    "\004\031\120\001\001\000\004\031\117\001\001\000\004" +
    "\031\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\046\012\135\013\044\014\043\015\055\017\052\020\051" +
    "\001\001\000\016\011\060\013\044\014\043\015\055\017" +
    "\052\020\051\001\001\000\020\011\046\012\141\013\044" +
    "\014\043\015\055\017\052\020\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\060\013\044\014\043" +
    "\015\055\017\052\020\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\100\044\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\046\012\152\013\044\014\043\015\055" +
    "\017\052\020\051\001\001\000\016\011\060\013\044\014" +
    "\043\015\055\017\052\020\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\032\257\036\024\037\303\040\040" +
    "\042\014\001\001\000\010\036\163\040\040\042\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\171\001\001\000\002\001\001\000\050" +
    "\010\200\011\046\012\174\013\044\014\043\015\055\017" +
    "\052\020\051\021\013\022\031\023\017\024\026\032\035" +
    "\033\020\036\024\037\012\040\040\041\173\042\014\001" +
    "\001\000\002\001\001\000\016\011\060\013\044\014\043" +
    "\015\055\017\052\020\051\001\001\000\004\075\265\001" +
    "\001\000\002\001\001\000\020\011\046\012\220\013\044" +
    "\014\043\015\055\017\052\020\051\001\001\000\002\001" +
    "\001\000\020\011\046\012\203\013\044\014\043\015\055" +
    "\017\052\020\051\001\001\000\004\031\212\001\001\000" +
    "\016\011\060\013\044\014\043\015\055\017\052\020\051" +
    "\001\001\000\004\031\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\227" +
    "\001\001\000\016\011\060\013\044\014\043\015\055\017" +
    "\052\020\051\001\001\000\004\031\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\264\001\001\000\010\046\247\063\250\065\165" +
    "\001\001\000\006\024\241\025\242\001\001\000\002\001" +
    "\001\000\004\064\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\241" +
    "\025\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\035\033\256\001\001\000\002" +
    "\001\001\000\004\032\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\250\001\001\000\002\001\001\000\004\031\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\274\001" +
    "\001\000\004\031\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\163\040\040\042\014" +
    "\001\001\000\006\063\250\065\165\001\001\000\004\062" +
    "\306\001\001\000\006\024\241\025\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\035\033\316\001\001\000\004\032\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\355\001\001\000\002\001\001\000\006\032\035\033" +
    "\334\001\001\000\004\051\326\001\001\000\006\032\035" +
    "\033\327\001\001\000\004\032\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\351" +
    "\001\001\000\004\032\257\001\001\000\004\053\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\035\033\357\001\001\000\004\032" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\060\013\044\014" +
    "\043\015\055\017\052\020\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\247\056\u0110\063\250\065\165" +
    "\001\001\000\006\024\241\025\242\001\001\000\002\001" +
    "\001\000\006\057\376\064\245\001\001\000\002\001\001" +
    "\000\004\026\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u010a\001\001\000\004\060\u0107\001\001\000" +
    "\004\026\u0108\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u010c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\u0116" +
    "\062\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u011d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0121" +
    "\001\001\000\002\001\001\000\050\010\200\011\046\012" +
    "\174\013\044\014\043\015\055\017\052\020\051\021\013" +
    "\022\031\023\017\024\026\032\035\033\020\036\024\037" +
    "\012\040\040\041\u0123\042\014\001\001\000\002\001\001" +
    "\000\006\034\u012f\035\u0130\001\001\000\004\067\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0129" +
    "\001\001\000\002\001\001\000\050\010\200\011\046\012" +
    "\174\013\044\014\043\015\055\017\052\020\051\021\013" +
    "\022\031\023\017\024\026\032\035\033\020\036\024\037" +
    "\012\040\040\041\u012b\042\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\u0139\001" +
    "\001\000\004\035\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u0134\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u0136\001\001\000\002\001\001" +
    "\000\050\010\200\011\046\012\174\013\044\014\043\015" +
    "\055\017\052\020\051\021\013\022\031\023\017\024\026" +
    "\032\035\033\020\036\024\037\012\040\040\041\u0138\042" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u013b\001\001\000\002\001\001\000\050\010\200\011" +
    "\046\012\174\013\044\014\043\015\055\017\052\020\051" +
    "\021\013\022\031\023\017\024\026\032\035\033\020\036" +
    "\024\037\012\040\040\041\u013d\042\014\001\001\000\002" +
    "\001\001\000\004\071\u014a\001\001\000\004\024\u0141\001" +
    "\001\000\004\072\u0147\001\001\000\002\001\001\000\004" +
    "\073\u0145\001\001\000\050\010\200\011\046\012\174\013" +
    "\044\014\043\015\055\017\052\020\051\021\013\022\031" +
    "\023\017\024\026\032\035\033\020\036\024\037\012\040" +
    "\040\041\u0144\042\014\001\001\000\002\001\001\000\050" +
    "\010\200\011\046\012\174\013\044\014\043\015\055\017" +
    "\052\020\051\021\013\022\031\023\017\024\026\032\035" +
    "\033\020\036\024\037\012\040\040\041\u0146\042\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\010\200" +
    "\011\046\012\174\013\044\014\043\015\055\017\052\020" +
    "\051\021\013\022\031\023\017\024\026\032\035\033\020" +
    "\036\024\037\012\040\040\041\u0149\042\014\001\001\000" +
    "\002\001\001\000\004\024\u014b\001\001\000\002\001\001" +
    "\000\050\010\200\011\046\012\174\013\044\014\043\015" +
    "\055\017\052\020\051\021\013\022\031\023\017\024\026" +
    "\032\035\033\020\036\024\037\012\040\040\041\u014d\042" +
    "\014\001\001\000\002\001\001\000\004\035\u0155\001\001" +
    "\000\010\021\u0152\023\017\024\026\001\001\000\002\001" +
    "\001\000\010\021\u0153\023\017\024\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\247\001\001\000" +
    "\002\001\001\000\010\036\163\040\040\042\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\u015c\035\u0130\001\001\000\002\001\001\000\004" +
    "\035\u0133\001\001\000\002\001\001\000\032\010\u0161\021" +
    "\013\022\031\023\017\024\026\032\035\033\020\036\024" +
    "\037\012\040\040\042\014\043\u015f\001\001\000\002\001" +
    "\001\000\020\011\046\012\u016b\013\044\014\043\015\055" +
    "\017\052\020\051\001\001\000\002\001\001\000\020\011" +
    "\046\012\u0163\013\044\014\043\015\055\017\052\020\051" +
    "\001\001\000\016\011\060\013\044\014\043\015\055\017" +
    "\052\020\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\060\013\044" +
    "\014\043\015\055\017\052\020\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\u0161\021\013\022\031\023" +
    "\017\024\026\032\035\033\020\036\024\037\012\040\040" +
    "\042\014\043\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parametroSubprograma ::= ID COMMA parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parametroSubprograma ::= ID COLON tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parametroSubprograma ::= ID COLON OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parametrosSubprograma ::= parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parametrosSubprograma ::= parametrosSubprograma SEMICOLON parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parametrosSubprograma ::= parametrosSubprograma parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cuerpoProcedimiento ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cuerpoProcedimiento ::= declaracionesComunes BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cuerpoProcedimiento ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cuerpoProcedimiento ::= declaracionesComunes BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // procedimiento ::= PROCEDURE ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cuerpoFuncion ::= RETURN NT$24 expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$24 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'begin' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cuerpoFuncion ::= sentencias RETURN NT$23 expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$23 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'begin' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpoFuncion ::= BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpoFuncion ::= declaracionesComunes BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cuerpoFuncion ::= BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpoFuncion ::= declaracionesComunes BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo error NT$22 cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$22 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN error NT$21 IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$21 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET error NT$20 tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$20 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'return' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funcion ::= FUNCTION ID LEFTBRACKET error NT$19 RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$19 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funcion ::= FUNCTION ID error NT$18 RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$18 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funcion ::= FUNCTION error NT$17 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$17 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funcion ::= ID error NT$16 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$16 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'function' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // funcion ::= FUNCTION ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // subprograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // subprograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable ::= ID COLON tipoVariable error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable ::= ID COLON error NT$15 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$15 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo/id en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable ::= ID error NT$14 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$14 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable ::= COLON error NT$13 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$13 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable ::= ID COMMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable ::= ID COLON tipoVariable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // constanteSimbolica ::= ID COLON CONSTANT ASIGN error NT$12 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$12 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta valor entero/logico en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constanteSimbolica ::= ID COLON CONSTANT error NT$11 tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$11 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':=' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constanteSimbolica ::= ID COLON error NT$10 ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$10 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'constant' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // constanteSimbolica ::= ID error NT$9 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$9 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // constanteSimbolica ::= COLON error NT$8 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$8 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // constantesSimbolicas ::= constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // constantesSimbolicas ::= constantesSimbolicas constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametro ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametro ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaSubprograma ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaSubprograma ::= ID LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaIf ::= IF expresion THEN sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaAsign ::= ID ASIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaAsign ::= ID ACCESS sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= sentenciaSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencias ::= sentencias sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencias ::= sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= INTEGER COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= ID COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ID LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion ACCESS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion NOTEQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion GREATERTHAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion MINUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoEstructurado ::= TYPE ID IS RECORD variables error END RECORD 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoEstructurado ::= TYPE ID IS RECORD variables END error NT$7 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoEstructurado ::= TYPE ID IS RECORD variables error NT$6 RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoEstructurado ::= TYPE ID IS RECORD error NT$5 END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$5 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta cuerpo en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoEstructurado ::= TYPE ID IS error NT$4 variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoEstructurado ::= TYPE ID error NT$3 RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoEstructurado ::= TYPE error NT$2 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoEstructurado ::= ID error NT$1 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'type' en tipo estructurado"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= tipoEstructurado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipos ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipos ::= tipos tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoVariable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoVariable ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoConstante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipoConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionesComunes ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionesComunes ::= subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionesComunes ::= variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionesComunes ::= tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionesComunes ::= variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionesComunes ::= tipos subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionesComunes ::= tipos variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionesComunes ::= tipos variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionesGlobales ::= constantesSimbolicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionesGlobales ::= declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionesGlobales ::= constantesSimbolicas declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= declaracionesGlobales BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= declaracionesGlobales BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cabecera ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en la cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

