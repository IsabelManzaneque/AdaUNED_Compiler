
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 22 12:32:14 GMT 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 22 12:32:14 GMT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\043\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\007\000\002\044\002" +
    "\000\002\004\010\000\002\045\002\000\002\004\010\000" +
    "\002\046\002\000\002\004\010\000\002\047\002\000\002" +
    "\004\010\000\002\004\007\000\002\005\010\000\002\005" +
    "\007\000\002\005\007\000\002\005\006\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\007\005\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\023\003" +
    "\000\002\023\003\000\002\020\004\000\002\020\003\000" +
    "\002\017\003\000\002\017\003\000\002\021\012\000\002" +
    "\050\002\000\002\021\013\000\002\051\002\000\002\021" +
    "\013\000\002\052\002\000\002\021\013\000\002\053\002" +
    "\000\002\021\013\000\002\054\002\000\002\021\013\000" +
    "\002\055\002\000\002\021\013\000\002\056\002\000\002" +
    "\021\013\000\002\021\012\000\002\022\003\000\002\022" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\006\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\011\004" +
    "\000\002\011\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\012\006\000\002\057\002\000\002\012\007\000\002\060" +
    "\002\000\002\012\007\000\002\012\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\010\000\002\014\012\000" +
    "\002\061\002\000\002\014\011\000\002\062\002\000\002" +
    "\014\011\000\002\015\010\000\002\063\002\000\002\015" +
    "\011\000\002\064\002\000\002\015\011\000\002\015\010" +
    "\000\002\016\006\000\002\016\005\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\026\004\000\002" +
    "\026\003\000\002\025\010\000\002\065\002\000\002\025" +
    "\011\000\002\066\002\000\002\025\011\000\002\067\002" +
    "\000\002\025\011\000\002\070\002\000\002\025\011\000" +
    "\002\071\002\000\002\025\011\000\002\025\010\000\002" +
    "\031\004\000\002\031\003\000\002\030\006\000\002\030" +
    "\005\000\002\072\002\000\002\030\007\000\002\073\002" +
    "\000\002\030\007\000\002\074\002\000\002\030\007\000" +
    "\002\030\006\000\002\035\004\000\002\035\003\000\002" +
    "\034\003\000\002\034\003\000\002\036\013\000\002\036" +
    "\012\000\002\075\002\000\002\036\013\000\002\076\002" +
    "\000\002\036\013\000\002\077\002\000\002\036\013\000" +
    "\002\100\002\000\002\036\013\000\002\101\002\000\002" +
    "\036\013\000\002\102\002\000\002\036\013\000\002\103" +
    "\002\000\002\036\013\000\002\037\013\000\002\037\012" +
    "\000\002\037\012\000\002\037\011\000\002\037\003\000" +
    "\002\040\011\000\002\040\010\000\002\104\002\000\002" +
    "\040\011\000\002\105\002\000\002\040\011\000\002\106" +
    "\002\000\002\040\011\000\002\107\002\000\002\040\011" +
    "\000\002\041\010\000\002\041\007\000\002\041\007\000" +
    "\002\041\006\000\002\041\003\000\002\032\004\000\002" +
    "\032\005\000\002\032\003\000\002\033\006\000\002\033" +
    "\005\000\002\033\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\006\036\000\046\000\001\002\000\004\002" +
    "\u01a8\001\002\000\006\036\010\046\006\001\002\000\004" +
    "\003\u01a3\001\002\000\004\002\uffff\001\002\000\006\003" +
    "\u0193\046\u0192\001\002\000\022\012\023\022\027\023\030" +
    "\030\022\032\037\036\012\044\031\046\024\001\002\000" +
    "\006\003\u0166\046\u0165\001\002\000\012\022\uffe6\030\022" +
    "\036\012\046\046\001\002\000\012\022\uff7f\030\uff7f\036" +
    "\uff7f\046\uff7f\001\002\000\022\012\uffdf\022\uffdf\023\uffdf" +
    "\030\uffdf\032\uffdf\036\uffdf\044\uffdf\046\uffdf\001\002\000" +
    "\022\012\023\022\uffed\023\030\030\022\032\037\036\012" +
    "\044\031\046\024\001\002\000\004\002\ufffe\001\002\000" +
    "\030\003\uffdd\006\uffdd\011\uffdd\012\uffdd\022\uffdd\023\uffdd" +
    "\030\uffdd\032\uffdd\036\uffdd\044\uffdd\046\uffdd\001\002\000" +
    "\014\012\041\022\uffe7\030\022\036\012\046\256\001\002" +
    "\000\006\003\u0127\046\u0126\001\002\000\004\003\u0120\001" +
    "\002\000\010\003\u0105\010\260\012\u0106\001\002\000\012" +
    "\022\uff81\030\uff81\036\uff81\046\uff81\001\002\000\030\003" +
    "\uffde\006\uffde\011\uffde\012\uffde\022\uffde\023\uffde\030\uffde" +
    "\032\uffde\036\uffde\044\uffde\046\uffde\001\002\000\016\005" +
    "\064\026\376\031\072\037\070\045\065\046\073\001\002" +
    "\000\032\003\uffcb\006\uffcb\011\uffcb\012\uffcb\022\uffcb\023" +
    "\uffcb\030\uffcb\032\uffcb\033\uffcb\036\uffcb\044\uffcb\046\uffcb" +
    "\001\002\000\006\003\326\046\325\001\002\000\004\022" +
    "\315\001\002\000\022\012\041\022\uffe8\023\030\030\022" +
    "\032\037\036\012\044\031\046\042\001\002\000\022\012" +
    "\uff9a\022\uff9a\023\uff9a\030\uff9a\032\uff9a\036\uff9a\044\uff9a" +
    "\046\uff9a\001\002\000\004\022\uffee\001\002\000\020\003" +
    "\uff8c\012\uff8c\022\uff8c\026\uff8c\030\uff8c\036\uff8c\046\uff8c" +
    "\001\002\000\032\003\uffcc\006\uffcc\011\uffcc\012\uffcc\022" +
    "\uffcc\023\uffcc\030\uffcc\032\uffcc\033\uffcc\036\uffcc\044\uffcc" +
    "\046\uffcc\001\002\000\012\022\uff80\030\uff80\036\uff80\046" +
    "\uff80\001\002\000\004\003\311\001\002\000\010\003\301" +
    "\010\260\012\262\001\002\000\022\012\uffe0\022\uffe0\023" +
    "\uffe0\030\uffe0\032\uffe0\036\uffe0\044\uffe0\046\uffe0\001\002" +
    "\000\014\012\041\022\uffeb\030\022\036\012\046\256\001" +
    "\002\000\012\022\uffea\030\022\036\012\046\046\001\002" +
    "\000\004\003\050\001\002\000\012\022\uff82\030\uff82\036" +
    "\uff82\046\uff82\001\002\000\004\005\uff7c\001\002\000\004" +
    "\005\052\001\002\000\004\006\053\001\002\000\004\041" +
    "\054\001\002\000\006\023\030\032\037\001\002\000\004" +
    "\033\056\001\002\000\024\003\062\012\041\022\060\023" +
    "\030\030\022\032\037\036\012\044\031\046\042\001\002" +
    "\000\012\022\uff7b\030\uff7b\036\uff7b\046\uff7b\001\002\000" +
    "\016\005\064\031\072\037\070\041\240\045\065\046\073" +
    "\001\002\000\004\022\063\001\002\000\012\022\uff6a\030" +
    "\uff6a\036\uff6a\046\uff6a\001\002\000\016\005\064\031\072" +
    "\037\070\041\076\045\065\046\073\001\002\000\004\003" +
    "\234\001\002\000\014\005\105\027\107\032\103\043\106" +
    "\046\104\001\002\000\004\011\uffb8\001\002\000\004\011" +
    "\uffb9\001\002\000\006\003\210\005\207\001\002\000\004" +
    "\011\206\001\002\000\014\005\105\027\107\032\103\043" +
    "\106\046\104\001\002\000\010\005\152\017\151\020\153" +
    "\001\002\000\004\011\uffb5\001\002\000\004\011\uffb6\001" +
    "\002\000\014\005\105\027\107\032\103\043\106\046\104" +
    "\001\002\000\016\005\064\031\072\037\070\041\102\045" +
    "\065\046\073\001\002\000\004\011\uffb7\001\002\000\004" +
    "\011\143\001\002\000\014\005\105\027\107\032\103\043" +
    "\106\046\104\001\002\000\032\003\uffbe\006\uffbe\010\141" +
    "\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\021" +
    "\uffbe\034\uffbe\042\uffbe\001\002\000\034\003\uffbf\005\134" +
    "\006\uffbf\010\133\011\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\020\uffbf\021\uffbf\034\uffbf\042\uffbf\001\002\000\014" +
    "\005\105\027\107\032\103\043\106\046\104\001\002\000" +
    "\030\003\uffbd\006\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\020\uffbd\021\uffbd\034\uffbd\042\uffbd\001\002\000" +
    "\030\003\uffbc\006\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\020\uffbc\021\uffbc\034\uffbc\042\uffbc\001\002\000" +
    "\020\011\112\013\114\014\111\015\116\016\115\020\117" +
    "\021\113\001\002\000\014\005\105\027\107\032\103\043" +
    "\106\046\104\001\002\000\004\026\125\001\002\000\014" +
    "\005\105\027\107\032\103\043\106\046\104\001\002\000" +
    "\014\005\105\027\107\032\103\043\106\046\104\001\002" +
    "\000\014\005\105\027\107\032\103\043\106\046\104\001" +
    "\002\000\014\005\105\027\107\032\103\043\106\046\104" +
    "\001\002\000\014\005\105\027\107\032\103\043\106\046" +
    "\104\001\002\000\030\003\uffc5\006\uffc5\011\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5\034\uffc5\042" +
    "\uffc5\001\002\000\030\003\uffc8\006\uffc8\011\uffc8\013\114" +
    "\014\111\015\uffc8\016\uffc8\020\117\021\uffc8\034\uffc8\042" +
    "\uffc8\001\002\000\030\003\uffc7\006\uffc7\011\uffc7\013\114" +
    "\014\111\015\116\016\uffc7\020\117\021\uffc7\034\uffc7\042" +
    "\uffc7\001\002\000\030\003\uffca\006\uffca\011\uffca\013\uffca" +
    "\014\111\015\uffca\016\uffca\020\117\021\uffca\034\uffca\042" +
    "\uffca\001\002\000\030\003\uffc6\006\uffc6\011\uffc6\013\114" +
    "\014\111\015\116\016\115\020\117\021\uffc6\034\uffc6\042" +
    "\uffc6\001\002\000\004\046\126\001\002\000\004\011\127" +
    "\001\002\000\012\022\uff6e\030\uff6e\036\uff6e\046\uff6e\001" +
    "\002\000\030\003\uffc9\006\uffc9\011\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\020\117\021\uffc9\034\uffc9\042\uffc9\001" +
    "\002\000\020\006\132\013\114\014\111\015\116\016\115" +
    "\020\117\021\113\001\002\000\030\003\uffc3\006\uffc3\011" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3" +
    "\034\uffc3\042\uffc3\001\002\000\014\005\105\027\107\032" +
    "\103\043\106\046\104\001\002\000\016\005\105\006\135" +
    "\027\107\032\103\043\106\046\104\001\002\000\030\003" +
    "\uffc4\006\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\020\uffc4\021\uffc4\034\uffc4\042\uffc4\001\002\000\020\006" +
    "\137\013\114\014\111\015\116\016\115\020\117\021\113" +
    "\001\002\000\030\003\uffc2\006\uffc2\011\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\034\uffc2\042\uffc2" +
    "\001\002\000\030\003\uffc1\006\uffc1\011\uffc1\013\114\014" +
    "\111\015\116\016\115\020\117\021\113\034\uffc1\042\uffc1" +
    "\001\002\000\014\005\105\027\107\032\103\043\106\046" +
    "\104\001\002\000\030\003\uffc0\006\uffc0\011\uffc0\013\114" +
    "\014\111\015\116\016\115\020\117\021\113\034\uffc0\042" +
    "\uffc0\001\002\000\024\003\uffba\005\uffba\025\uffba\026\uffba" +
    "\031\uffba\037\uffba\041\uffba\045\uffba\046\uffba\001\002\000" +
    "\020\011\145\013\114\014\111\015\116\016\115\020\117" +
    "\021\113\001\002\000\004\026\146\001\002\000\004\046" +
    "\147\001\002\000\004\011\150\001\002\000\012\022\uff6c" +
    "\030\uff6c\036\uff6c\046\uff6c\001\002\000\014\005\105\027" +
    "\107\032\103\043\106\046\104\001\002\000\022\003\162" +
    "\005\105\006\156\027\107\032\103\043\106\046\104\047" +
    "\160\001\002\000\004\046\154\001\002\000\006\017\151" +
    "\020\153\001\002\000\004\011\uffae\001\002\000\004\011" +
    "\uff9f\001\002\000\004\006\163\001\002\000\006\006\uff9d" +
    "\011\uff9d\001\002\000\022\006\uff9e\011\uff9e\013\114\014" +
    "\111\015\116\016\115\020\117\021\113\001\002\000\006" +
    "\006\uff9c\011\uff9c\001\002\000\004\011\uffa0\001\002\000" +
    "\020\011\uffad\013\114\014\111\015\116\016\115\020\117" +
    "\021\113\001\002\000\022\003\167\013\114\014\111\015" +
    "\116\016\115\020\117\021\113\042\166\001\002\000\014" +
    "\005\064\031\072\037\070\045\065\046\073\001\002\000" +
    "\014\005\uffaa\031\uffaa\037\uffaa\045\uffaa\046\uffaa\001\002" +
    "\000\014\005\064\031\072\037\070\045\065\046\073\001" +
    "\002\000\016\005\064\026\172\031\072\037\070\045\065" +
    "\046\073\001\002\000\004\031\173\001\002\000\004\011" +
    "\uffa9\001\002\000\022\003\176\005\064\025\175\026\177" +
    "\031\072\037\070\045\065\046\073\001\002\000\014\005" +
    "\064\031\072\037\070\045\065\046\073\001\002\000\004" +
    "\031\uffa8\001\002\000\004\031\200\001\002\000\004\011" +
    "\uffac\001\002\000\004\031\202\001\002\000\004\011\uffa7" +
    "\001\002\000\016\005\064\026\204\031\072\037\070\045" +
    "\065\046\073\001\002\000\004\031\205\001\002\000\004" +
    "\011\uffab\001\002\000\024\003\uffbb\005\uffbb\025\uffbb\026" +
    "\uffbb\031\uffbb\037\uffbb\041\uffbb\045\uffbb\046\uffbb\001\002" +
    "\000\020\003\162\005\105\027\107\032\103\043\106\046" +
    "\104\047\160\001\002\000\020\003\uffb1\005\uffb1\027\uffb1" +
    "\032\uffb1\043\uffb1\046\uffb1\047\uffb1\001\002\000\020\003" +
    "\162\005\105\027\107\032\103\043\106\046\104\047\160" +
    "\001\002\000\004\006\213\001\002\000\004\011\uffb0\001" +
    "\002\000\006\006\215\011\uffaf\001\002\000\004\011\uffb4" +
    "\001\002\000\022\003\217\013\114\014\111\015\116\016" +
    "\115\020\117\021\113\034\220\001\002\000\014\005\uffa5" +
    "\031\uffa5\037\uffa5\045\uffa5\046\uffa5\001\002\000\014\005" +
    "\064\031\072\037\070\045\065\046\073\001\002\000\020" +
    "\003\222\005\064\026\223\031\072\037\070\045\065\046" +
    "\073\001\002\000\004\034\uffa3\001\002\000\006\003\224" +
    "\034\225\001\002\000\004\011\uffa1\001\002\000\004\011" +
    "\uffa6\001\002\000\004\034\227\001\002\000\004\011\uffa2" +
    "\001\002\000\014\005\064\031\072\037\070\045\065\046" +
    "\073\001\002\000\016\005\064\026\232\031\072\037\070" +
    "\045\065\046\073\001\002\000\004\034\233\001\002\000" +
    "\004\011\uffa4\001\002\000\020\003\uffb3\005\uffb3\027\uffb3" +
    "\032\uffb3\043\uffb3\046\uffb3\047\uffb3\001\002\000\020\003" +
    "\162\005\105\027\107\032\103\043\106\046\104\047\160" +
    "\001\002\000\004\006\237\001\002\000\004\011\uffb2\001" +
    "\002\000\014\005\105\027\107\032\103\043\106\046\104" +
    "\001\002\000\016\005\064\031\072\037\070\041\242\045" +
    "\065\046\073\001\002\000\014\005\105\027\107\032\103" +
    "\043\106\046\104\001\002\000\020\011\244\013\114\014" +
    "\111\015\116\016\115\020\117\021\113\001\002\000\004" +
    "\026\245\001\002\000\004\046\246\001\002\000\004\011" +
    "\247\001\002\000\012\022\uff6d\030\uff6d\036\uff6d\046\uff6d" +
    "\001\002\000\020\011\251\013\114\014\111\015\116\016" +
    "\115\020\117\021\113\001\002\000\004\026\252\001\002" +
    "\000\004\046\253\001\002\000\004\011\254\001\002\000" +
    "\012\022\uff6b\030\uff6b\036\uff6b\046\uff6b\001\002\000\020" +
    "\003\uff8d\012\uff8d\022\uff8d\026\uff8d\030\uff8d\036\uff8d\046" +
    "\uff8d\001\002\000\010\003\261\010\260\012\262\001\002" +
    "\000\012\022\uffec\030\022\036\012\046\046\001\002\000" +
    "\006\012\041\046\276\001\002\000\012\005\uff7c\023\uff87" +
    "\032\uff87\046\uff87\001\002\000\012\003\264\023\030\032" +
    "\037\046\263\001\002\000\006\003\uffe1\011\uffe1\001\002" +
    "\000\004\011\uff85\001\002\000\006\003\uffe2\011\uffe2\001" +
    "\002\000\006\003\270\011\267\001\002\000\020\003\uff8b" +
    "\012\uff8b\022\uff8b\026\uff8b\030\uff8b\036\uff8b\046\uff8b\001" +
    "\002\000\020\003\uff83\012\uff83\022\uff83\026\uff83\030\uff83" +
    "\036\uff83\046\uff83\001\002\000\004\011\272\001\002\000" +
    "\020\003\uff84\012\uff84\022\uff84\026\uff84\030\uff84\036\uff84" +
    "\046\uff84\001\002\000\010\023\030\032\037\046\263\001" +
    "\002\000\004\011\275\001\002\000\020\003\uff86\012\uff86" +
    "\022\uff86\026\uff86\030\uff86\036\uff86\046\uff86\001\002\000" +
    "\010\003\300\010\260\012\262\001\002\000\020\003\uff8a" +
    "\012\uff8a\022\uff8a\026\uff8a\030\uff8a\036\uff8a\046\uff8a\001" +
    "\002\000\010\023\uff87\032\uff87\046\uff87\001\002\000\014" +
    "\005\uff7c\023\uff87\032\uff87\033\uffdb\046\uff87\001\002\000" +
    "\004\033\303\001\002\000\004\040\304\001\002\000\006" +
    "\012\041\046\276\001\002\000\010\012\041\026\306\046" +
    "\276\001\002\000\004\040\307\001\002\000\004\011\310" +
    "\001\002\000\030\003\uffda\006\uffda\011\uffda\012\uffda\022" +
    "\uffda\023\uffda\030\uffda\032\uffda\036\uffda\044\uffda\046\uffda" +
    "\001\002\000\010\023\uff89\032\uff89\046\uff89\001\002\000" +
    "\010\023\030\032\037\046\263\001\002\000\004\011\314" +
    "\001\002\000\020\003\uff88\012\uff88\022\uff88\026\uff88\030" +
    "\uff88\036\uff88\046\uff88\001\002\000\016\005\064\026\317" +
    "\031\072\037\070\045\065\046\073\001\002\000\016\005" +
    "\064\026\322\031\072\037\070\045\065\046\073\001\002" +
    "\000\004\046\320\001\002\000\004\011\321\001\002\000" +
    "\004\002\ufff1\001\002\000\004\046\323\001\002\000\004" +
    "\011\324\001\002\000\004\002\ufff3\001\002\000\006\003" +
    "\336\033\337\001\002\000\004\033\uffd9\001\002\000\004" +
    "\033\330\001\002\000\004\040\331\001\002\000\006\012" +
    "\041\046\276\001\002\000\010\012\041\026\333\046\276" +
    "\001\002\000\004\040\334\001\002\000\004\011\335\001" +
    "\002\000\030\003\uffd8\006\uffd8\011\uffd8\012\uffd8\022\uffd8" +
    "\023\uffd8\030\uffd8\032\uffd8\036\uffd8\044\uffd8\046\uffd8\001" +
    "\002\000\004\040\uffd7\001\002\000\006\003\341\040\340" +
    "\001\002\000\010\003\347\012\041\046\276\001\002\000" +
    "\006\012\uffd5\046\uffd5\001\002\000\006\012\041\046\276" +
    "\001\002\000\010\012\041\026\344\046\276\001\002\000" +
    "\004\040\345\001\002\000\004\011\346\001\002\000\030" +
    "\003\uffd4\006\uffd4\011\uffd4\012\uffd4\022\uffd4\023\uffd4\030" +
    "\uffd4\032\uffd4\036\uffd4\044\uffd4\046\uffd4\001\002\000\004" +
    "\026\uffd3\001\002\000\012\003\351\012\041\026\352\046" +
    "\276\001\002\000\004\040\uffd1\001\002\000\006\003\354" +
    "\040\353\001\002\000\006\003\360\011\357\001\002\000" +
    "\004\011\uffcf\001\002\000\004\011\356\001\002\000\030" +
    "\003\uffce\006\uffce\011\uffce\012\uffce\022\uffce\023\uffce\030" +
    "\uffce\032\uffce\036\uffce\044\uffce\046\uffce\001\002\000\030" +
    "\003\uffdc\006\uffdc\011\uffdc\012\uffdc\022\uffdc\023\uffdc\030" +
    "\uffdc\032\uffdc\036\uffdc\044\uffdc\046\uffdc\001\002\000\030" +
    "\003\uffcd\006\uffcd\011\uffcd\012\uffcd\022\uffcd\023\uffcd\030" +
    "\uffcd\032\uffcd\036\uffcd\044\uffcd\046\uffcd\001\002\000\004" +
    "\040\362\001\002\000\004\011\363\001\002\000\030\003" +
    "\uffd0\006\uffd0\011\uffd0\012\uffd0\022\uffd0\023\uffd0\030\uffd0" +
    "\032\uffd0\036\uffd0\044\uffd0\046\uffd0\001\002\000\004\026" +
    "\365\001\002\000\004\040\366\001\002\000\004\011\367" +
    "\001\002\000\030\003\uffd2\006\uffd2\011\uffd2\012\uffd2\022" +
    "\uffd2\023\uffd2\030\uffd2\032\uffd2\036\uffd2\044\uffd2\046\uffd2" +
    "\001\002\000\004\040\371\001\002\000\006\012\041\046" +
    "\276\001\002\000\010\012\041\026\373\046\276\001\002" +
    "\000\004\040\374\001\002\000\004\011\375\001\002\000" +
    "\030\003\uffd6\006\uffd6\011\uffd6\012\uffd6\022\uffd6\023\uffd6" +
    "\030\uffd6\032\uffd6\036\uffd6\044\uffd6\046\uffd6\001\002\000" +
    "\004\046\u0103\001\002\000\016\005\064\026\u0100\031\072" +
    "\037\070\045\065\046\073\001\002\000\004\046\u0101\001" +
    "\002\000\004\011\u0102\001\002\000\004\002\ufff2\001\002" +
    "\000\004\011\u0104\001\002\000\004\002\ufff0\001\002\000" +
    "\016\005\uff7c\023\uff87\024\uff96\032\uff87\033\uffdb\046\uff87" +
    "\001\002\000\014\003\u0107\023\030\024\u0108\032\037\046" +
    "\263\001\002\000\006\011\uff85\017\uff94\001\002\000\006" +
    "\003\u010a\017\u0109\001\002\000\012\003\u0112\027\u010f\032" +
    "\u010c\043\u010e\001\002\000\010\027\uff92\032\uff92\043\uff92" +
    "\001\002\000\010\027\u010f\032\u010c\043\u010e\001\002\000" +
    "\006\003\uffe3\011\uffe3\001\002\000\004\011\u0110\001\002" +
    "\000\006\003\uffe5\011\uffe5\001\002\000\006\003\uffe4\011" +
    "\uffe4\001\002\000\022\012\uff91\022\uff91\023\uff91\030\uff91" +
    "\032\uff91\036\uff91\044\uff91\046\uff91\001\002\000\006\003" +
    "\u0116\011\u0115\001\002\000\004\011\uff90\001\002\000\004" +
    "\011\u0114\001\002\000\022\012\uff8f\022\uff8f\023\uff8f\030" +
    "\uff8f\032\uff8f\036\uff8f\044\uff8f\046\uff8f\001\002\000\022" +
    "\012\uff99\022\uff99\023\uff99\030\uff99\032\uff99\036\uff99\044" +
    "\uff99\046\uff99\001\002\000\022\012\uff8e\022\uff8e\023\uff8e" +
    "\030\uff8e\032\uff8e\036\uff8e\044\uff8e\046\uff8e\001\002\000" +
    "\004\017\u0118\001\002\000\010\027\u010f\032\u010c\043\u010e" +
    "\001\002\000\004\011\u011a\001\002\000\022\012\uff93\022" +
    "\uff93\023\uff93\030\uff93\032\uff93\036\uff93\044\uff93\046\uff93" +
    "\001\002\000\004\024\u011c\001\002\000\004\017\u011d\001" +
    "\002\000\010\027\u010f\032\u010c\043\u010e\001\002\000\004" +
    "\011\u011f\001\002\000\022\012\uff95\022\uff95\023\uff95\030" +
    "\uff95\032\uff95\036\uff95\044\uff95\046\uff95\001\002\000\012" +
    "\023\uff89\024\uff98\032\uff89\046\uff89\001\002\000\004\024" +
    "\u0122\001\002\000\004\017\u0123\001\002\000\010\027\u010f" +
    "\032\u010c\043\u010e\001\002\000\004\011\u0125\001\002\000" +
    "\022\012\uff97\022\uff97\023\uff97\030\uff97\032\uff97\036\uff97" +
    "\044\uff97\046\uff97\001\002\000\006\003\u0130\005\u012f\001" +
    "\002\000\004\005\uff7a\001\002\000\004\005\u0129\001\002" +
    "\000\004\006\u012a\001\002\000\004\041\u012b\001\002\000" +
    "\006\023\030\032\037\001\002\000\004\033\u012d\001\002" +
    "\000\024\003\062\012\041\022\060\023\030\030\022\032" +
    "\037\036\012\044\031\046\042\001\002\000\012\022\uff79" +
    "\030\uff79\036\uff79\046\uff79\001\002\000\010\003\u0139\006" +
    "\u0138\046\u0137\001\002\000\004\006\uff78\001\002\000\004" +
    "\006\u0132\001\002\000\004\041\u0133\001\002\000\006\023" +
    "\030\032\037\001\002\000\004\033\u0135\001\002\000\024" +
    "\003\062\012\041\022\060\023\030\030\022\032\037\036" +
    "\012\044\031\046\042\001\002\000\012\022\uff77\030\uff77" +
    "\036\uff77\046\uff77\001\002\000\006\010\u015a\012\u015b\001" +
    "\002\000\006\003\u014a\041\u014b\001\002\000\014\003\uff54" +
    "\006\uff54\011\uff54\041\uff76\046\uff54\001\002\000\012\003" +
    "\u013e\006\u013c\011\u013d\046\u0137\001\002\000\012\003\uff58" +
    "\006\uff58\011\uff58\046\uff58\001\002\000\004\041\u0141\001" +
    "\002\000\006\003\u013e\046\u0137\001\002\000\012\003\uff54" +
    "\006\uff54\011\uff54\046\uff54\001\002\000\012\003\uff5a\006" +
    "\uff5a\011\uff5a\046\uff5a\001\002\000\012\003\uff59\006\uff59" +
    "\011\uff59\046\uff59\001\002\000\006\023\030\032\037\001" +
    "\002\000\004\033\u0143\001\002\000\024\003\062\012\041" +
    "\022\060\023\030\030\022\032\037\036\012\044\031\046" +
    "\042\001\002\000\012\022\uff7e\030\uff7e\036\uff7e\046\uff7e" +
    "\001\002\000\004\041\u0146\001\002\000\006\023\030\032" +
    "\037\001\002\000\004\033\u0148\001\002\000\024\003\062" +
    "\012\041\022\060\023\030\030\022\032\037\036\012\044" +
    "\031\046\042\001\002\000\012\022\uff75\030\uff75\036\uff75" +
    "\046\uff75\001\002\000\006\023\uff74\032\uff74\001\002\000" +
    "\010\003\u014c\023\030\032\037\001\002\000\004\033\uff72" +
    "\001\002\000\006\003\u014e\033\u014f\001\002\000\024\003" +
    "\uff70\012\uff70\022\uff70\023\uff70\030\uff70\032\uff70\036\uff70" +
    "\044\uff70\046\uff70\001\002\000\024\003\062\012\041\022" +
    "\060\023\030\030\022\032\037\036\012\044\031\046\042" +
    "\001\002\000\012\022\uff7d\030\uff7d\036\uff7d\046\uff7d\001" +
    "\002\000\024\003\062\012\041\022\060\023\030\030\022" +
    "\032\037\036\012\044\031\046\042\001\002\000\012\022" +
    "\uff6f\030\uff6f\036\uff6f\046\uff6f\001\002\000\004\033\u0154" +
    "\001\002\000\024\003\062\012\041\022\060\023\030\030" +
    "\022\032\037\036\012\044\031\046\042\001\002\000\012" +
    "\022\uff71\030\uff71\036\uff71\046\uff71\001\002\000\006\023" +
    "\030\032\037\001\002\000\004\033\u0158\001\002\000\024" +
    "\003\062\012\041\022\060\023\030\030\022\032\037\036" +
    "\012\044\031\046\042\001\002\000\012\022\uff73\030\uff73" +
    "\036\uff73\046\uff73\001\002\000\006\003\u013e\046\u0137\001" +
    "\002\000\014\023\030\032\037\035\u015c\044\031\046\u015d" +
    "\001\002\000\012\023\030\032\037\044\031\046\u015d\001" +
    "\002\000\004\003\u015f\001\002\000\012\003\uff56\006\uff56" +
    "\011\uff56\046\uff56\001\002\000\004\033\uffdb\001\002\000" +
    "\012\003\uff57\006\uff57\011\uff57\046\uff57\001\002\000\012" +
    "\003\uff55\006\uff55\011\uff55\046\uff55\001\002\000\012\022" +
    "\uffe9\030\022\036\012\046\046\001\002\000\022\012\uff9b" +
    "\022\uff9b\023\uff9b\030\uff9b\032\uff9b\036\uff9b\044\uff9b\046" +
    "\uff9b\001\002\000\004\022\uffef\001\002\000\006\003\u017f" +
    "\005\u017e\001\002\000\004\005\uff67\001\002\000\004\005" +
    "\u0168\001\002\000\004\006\u0169\001\002\000\004\033\u016a" +
    "\001\002\000\024\003\u016e\012\041\022\u016c\023\030\030" +
    "\022\032\037\036\012\044\031\046\042\001\002\000\012" +
    "\022\uff66\030\uff66\036\uff66\046\uff66\001\002\000\016\005" +
    "\064\026\u0178\031\072\037\070\045\065\046\073\001\002" +
    "\000\004\022\u016f\001\002\000\012\022\uff5b\030\uff5b\036" +
    "\uff5b\046\uff5b\001\002\000\016\005\064\026\u0171\031\072" +
    "\037\070\045\065\046\073\001\002\000\016\005\064\026" +
    "\u0174\031\072\037\070\045\065\046\073\001\002\000\004" +
    "\046\u0172\001\002\000\004\011\u0173\001\002\000\012\022" +
    "\uff5d\030\uff5d\036\uff5d\046\uff5d\001\002\000\004\046\u0175" +
    "\001\002\000\004\011\u0176\001\002\000\012\022\uff5f\030" +
    "\uff5f\036\uff5f\046\uff5f\001\002\000\016\005\064\026\u017b" +
    "\031\072\037\070\045\065\046\073\001\002\000\004\046" +
    "\u0179\001\002\000\004\011\u017a\001\002\000\012\022\uff5c" +
    "\030\uff5c\036\uff5c\046\uff5c\001\002\000\004\046\u017c\001" +
    "\002\000\004\011\u017d\001\002\000\012\022\uff5e\030\uff5e" +
    "\036\uff5e\046\uff5e\001\002\000\010\003\u0185\006\u0184\046" +
    "\u0137\001\002\000\004\006\uff65\001\002\000\004\006\u0181" +
    "\001\002\000\004\033\u0182\001\002\000\024\003\u016e\012" +
    "\041\022\u016c\023\030\030\022\032\037\036\012\044\031" +
    "\046\042\001\002\000\012\022\uff64\030\uff64\036\uff64\046" +
    "\uff64\001\002\000\006\003\u018d\033\u018e\001\002\000\014" +
    "\003\uff54\006\uff54\011\uff54\033\uff63\046\uff54\001\002\000" +
    "\012\003\u013e\006\u0187\011\u013d\046\u0137\001\002\000\004" +
    "\033\u0188\001\002\000\024\003\u016e\012\041\022\u016c\023" +
    "\030\030\022\032\037\036\012\044\031\046\042\001\002" +
    "\000\012\022\uff69\030\uff69\036\uff69\046\uff69\001\002\000" +
    "\004\033\u018b\001\002\000\024\003\u016e\012\041\022\u016c" +
    "\023\030\030\022\032\037\036\012\044\031\046\042\001" +
    "\002\000\012\022\uff62\030\uff62\036\uff62\046\uff62\001\002" +
    "\000\024\003\uff61\012\uff61\022\uff61\023\uff61\030\uff61\032" +
    "\uff61\036\uff61\044\uff61\046\uff61\001\002\000\024\003\u016e" +
    "\012\041\022\u016c\023\030\030\022\032\037\036\012\044" +
    "\031\046\042\001\002\000\012\022\uff68\030\uff68\036\uff68" +
    "\046\uff68\001\002\000\024\003\u016e\012\041\022\u016c\023" +
    "\030\030\022\032\037\036\012\044\031\046\042\001\002" +
    "\000\012\022\uff60\030\uff60\036\uff60\046\uff60\001\002\000" +
    "\006\003\u0199\005\u0198\001\002\000\004\005\ufffa\001\002" +
    "\000\004\005\u0195\001\002\000\004\006\u0196\001\002\000" +
    "\004\033\u0197\001\002\000\022\012\ufff9\022\ufff9\023\ufff9" +
    "\030\ufff9\032\ufff9\036\ufff9\044\ufff9\046\ufff9\001\002\000" +
    "\006\003\u019e\006\u019d\001\002\000\004\006\ufff8\001\002" +
    "\000\004\006\u019b\001\002\000\004\033\u019c\001\002\000" +
    "\022\012\ufff7\022\ufff7\023\ufff7\030\ufff7\032\ufff7\036\ufff7" +
    "\044\ufff7\046\ufff7\001\002\000\006\003\u01a1\033\u01a2\001" +
    "\002\000\004\033\ufff6\001\002\000\004\033\u01a0\001\002" +
    "\000\022\012\ufff5\022\ufff5\023\ufff5\030\ufff5\032\ufff5\036" +
    "\ufff5\044\ufff5\046\ufff5\001\002\000\022\012\ufff4\022\ufff4" +
    "\023\ufff4\030\ufff4\032\ufff4\036\ufff4\044\ufff4\046\ufff4\001" +
    "\002\000\022\012\ufffd\022\ufffd\023\ufffd\030\ufffd\032\ufffd" +
    "\036\ufffd\044\ufffd\046\ufffd\001\002\000\004\005\ufffc\001" +
    "\002\000\004\005\u01a5\001\002\000\004\006\u01a6\001\002" +
    "\000\004\033\u01a7\001\002\000\022\012\ufffb\022\ufffb\023" +
    "\ufffb\030\ufffb\032\ufffb\036\ufffb\044\ufffb\046\ufffb\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\006\002\003\043\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\016\006" +
    "\031\007\034\017\014\020\032\021\017\022\025\025\033" +
    "\026\015\030\035\031\020\034\024\035\012\036\037\040" +
    "\013\001\001\000\002\001\001\000\010\034\046\036\037" +
    "\040\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\u0163\017\014\020\032\021\017\022\025\025\u0162" +
    "\030\035\031\020\034\024\035\012\036\037\040\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\030\254" +
    "\034\024\035\u0161\036\037\040\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\070\011\376\012\066\013" +
    "\065\014\077\015\074\016\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\017\042\021" +
    "\017\022\025\030\035\031\043\034\024\035\044\036\037" +
    "\040\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\030" +
    "\254\034\024\035\256\036\037\040\013\001\001\000\010" +
    "\034\046\036\037\040\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\054\001" +
    "\001\000\002\001\001\000\032\007\060\017\014\020\032" +
    "\021\017\022\025\030\035\031\020\034\024\035\012\036" +
    "\037\037\056\040\013\001\001\000\002\001\001\000\020" +
    "\010\070\011\240\012\066\013\065\014\077\015\074\016" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\070\011\076\012\066\013\065\014\077\015\074\016" +
    "\073\001\001\000\002\001\001\000\004\027\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\143\001" +
    "\001\000\016\010\100\012\066\013\065\014\077\015\074" +
    "\016\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\127\001\001\000\002" +
    "\001\001\000\004\027\123\001\001\000\004\027\122\001" +
    "\001\000\004\027\121\001\001\000\004\027\120\001\001" +
    "\000\004\027\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\137\001\001\000\004\027\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\163\001" +
    "\001\000\006\027\160\042\156\001\001\000\004\013\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\070\011\173\012\066\013\065" +
    "\014\077\015\074\016\073\001\001\000\004\061\167\001" +
    "\001\000\020\010\070\011\170\012\066\013\065\014\077" +
    "\015\074\016\073\001\001\000\016\010\100\012\066\013" +
    "\065\014\077\015\074\016\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\100\012\066\013\065\014" +
    "\077\015\074\016\073\001\001\000\020\010\070\011\202" +
    "\012\066\013\065\014\077\015\074\016\073\001\001\000" +
    "\004\062\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\100\012" +
    "\066\013\065\014\077\015\074\016\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\160\042\213\001\001\000\004\060\210\001\001\000\006" +
    "\027\160\042\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\227\001\001\000\020\010\070\011\220\012" +
    "\066\013\065\014\077\015\074\016\073\001\001\000\016" +
    "\010\100\012\066\013\065\014\077\015\074\016\073\001" +
    "\001\000\004\064\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\070\011\230\012\066\013\065\014\077" +
    "\015\074\016\073\001\001\000\016\010\100\012\066\013" +
    "\065\014\077\015\074\016\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\234\001\001\000\006\027" +
    "\160\042\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\247\001\001\000\016\010\100\012\066\013" +
    "\065\014\077\015\074\016\073\001\001\000\004\027\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\046\036\037\040\013\001\001\000\004\030\276\001" +
    "\001\000\006\073\272\075\050\001\001\000\006\022\264" +
    "\023\265\001\001\000\002\001\001\000\004\074\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\264\023\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\272\001\001\000\010\050\301\073\272\075\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\035\031" +
    "\304\001\001\000\004\030\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\311\001" +
    "\001\000\006\022\264\023\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\070\011\315\012\066\013" +
    "\065\014\077\015\074\016\073\001\001\000\016\010\100" +
    "\012\066\013\065\014\077\015\074\016\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\035\031\331\001\001\000\004\030" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\367\001\001\000\002\001\001\000" +
    "\006\030\035\031\347\001\001\000\004\053\341\001\001" +
    "\000\006\030\035\031\342\001\001\000\004\030\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\363\001\001\000\004\030\254\001\001\000" +
    "\004\055\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\035\031\371\001\001\000\004\030" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\100\012\066\013" +
    "\065\014\077\015\074\016\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\050\301\066\u011a\073\272\075\050" +
    "\001\001\000\006\022\264\023\265\001\001\000\006\067" +
    "\u0116\074\270\001\001\000\002\001\001\000\004\024\u0110" +
    "\001\001\000\004\070\u010a\001\001\000\004\024\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\065\u0120" +
    "\072\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\u0127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u012b" +
    "\001\001\000\002\001\001\000\032\007\060\017\014\020" +
    "\032\021\017\022\025\030\035\031\020\034\024\035\012" +
    "\036\037\037\u012d\040\013\001\001\000\002\001\001\000" +
    "\006\032\u0139\033\u013a\001\001\000\004\077\u0130\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0133\001" +
    "\001\000\002\001\001\000\032\007\060\017\014\020\032" +
    "\021\017\022\025\030\035\031\020\034\024\035\012\036" +
    "\037\037\u0135\040\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u0144\001\001\000" +
    "\004\033\u013e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u013f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u0141\001\001\000\002" +
    "\001\001\000\032\007\060\017\014\020\032\021\017\022" +
    "\025\030\035\031\020\034\024\035\012\036\037\037\u0143" +
    "\040\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u0146\001\001\000\002\001\001\000\032\007\060" +
    "\017\014\020\032\021\017\022\025\030\035\031\020\034" +
    "\024\035\012\036\037\037\u0148\040\013\001\001\000\002" +
    "\001\001\000\004\101\u0155\001\001\000\004\022\u014c\001" +
    "\001\000\004\102\u0152\001\001\000\002\001\001\000\004" +
    "\103\u0150\001\001\000\032\007\060\017\014\020\032\021" +
    "\017\022\025\030\035\031\020\034\024\035\012\036\037" +
    "\037\u014f\040\013\001\001\000\002\001\001\000\032\007" +
    "\060\017\014\020\032\021\017\022\025\030\035\031\020" +
    "\034\024\035\012\036\037\037\u0151\040\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\060\017\014" +
    "\020\032\021\017\022\025\030\035\031\020\034\024\035" +
    "\012\036\037\037\u0154\040\013\001\001\000\002\001\001" +
    "\000\004\022\u0156\001\001\000\002\001\001\000\032\007" +
    "\060\017\014\020\032\021\017\022\025\030\035\031\020" +
    "\034\024\035\012\036\037\037\u0158\040\013\001\001\000" +
    "\002\001\001\000\004\033\u0160\001\001\000\010\017\u015d" +
    "\021\017\022\025\001\001\000\010\017\u015f\021\017\022" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\046\036\037\040\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\u0166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\u016c\017\014\020\032\021\017\022\025\030" +
    "\035\031\020\034\024\035\012\036\037\040\013\041\u016a" +
    "\001\001\000\002\001\001\000\020\010\070\011\u0176\012" +
    "\066\013\065\014\077\015\074\016\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\070\011\u016f\012" +
    "\066\013\065\014\077\015\074\016\073\001\001\000\016" +
    "\010\100\012\066\013\065\014\077\015\074\016\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\100\012\066\013\065\014\077\015\074\016\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\u0185\033\u013a\001\001\000\004\105\u017f\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\u016c" +
    "\017\014\020\032\021\017\022\025\030\035\031\020\034" +
    "\024\035\012\036\037\040\013\041\u0182\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\106\u0189\001\001\000" +
    "\004\033\u013e\001\001\000\002\001\001\000\032\007\u016c" +
    "\017\014\020\032\021\017\022\025\030\035\031\020\034" +
    "\024\035\012\036\037\040\013\041\u0188\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\u016c\017\014\020" +
    "\032\021\017\022\025\030\035\031\020\034\024\035\012" +
    "\036\037\040\013\041\u018b\001\001\000\002\001\001\000" +
    "\004\107\u018f\001\001\000\032\007\u016c\017\014\020\032" +
    "\021\017\022\025\030\035\031\020\034\024\035\012\036" +
    "\037\040\013\041\u018e\001\001\000\002\001\001\000\032" +
    "\007\u016c\017\014\020\032\021\017\022\025\030\035\031" +
    "\020\034\024\035\012\036\037\040\013\041\u0190\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u0193\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0199\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u019e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u01a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // parametroSubprograma ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en parametros de subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parametroSubprograma ::= ID COMMA parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parametroSubprograma ::= ID COLON tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // parametroSubprograma ::= ID COLON OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parametrosSubprograma ::= parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametrosSubprograma ::= parametrosSubprograma SEMICOLON parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // parametrosSubprograma ::= parametrosSubprograma parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // cuerpoProcedimiento ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en la estructura del cuerpo de un procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cuerpoProcedimiento ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // cuerpoProcedimiento ::= declaracionesComunes BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // cuerpoProcedimiento ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // cuerpoProcedimiento ::= declaracionesComunes BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET error NT$36 cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$36 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // procedimiento ::= PROCEDURE ID LEFTBRACKET error NT$35 IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$35 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // procedimiento ::= PROCEDURE ID error NT$34 RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$34 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // procedimiento ::= PROCEDURE error NT$33 LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$33 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // procedimiento ::= PROCEDURE ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // cuerpoFuncion ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en la estructura del cuerpo de una funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // cuerpoFuncion ::= BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // cuerpoFuncion ::= declaracionesComunes BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // cuerpoFuncion ::= BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cuerpoFuncion ::= declaracionesComunes BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo error NT$32 cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$32 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN error NT$31 IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$31 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET error NT$30 tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$30 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'return' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // funcion ::= FUNCTION ID LEFTBRACKET error NT$29 RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$29 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // funcion ::= FUNCTION ID error NT$28 RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$28 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // funcion ::= FUNCTION error NT$27 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$27 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // funcion ::= ID error NT$26 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$26 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'function/procedure' en subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // funcion ::= FUNCTION ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // subprograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // subprograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // variable ::= ID COLON tipoVariable error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // variable ::= ID COLON error NT$25 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$25 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo/id en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // variable ::= ID error NT$24 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$24 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variable ::= COLON error NT$23 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$23 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variable ::= ID COMMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // variable ::= ID COLON tipoVariable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // constanteSimbolica ::= ID COLON CONSTANT ASIGN error NT$22 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$22 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta valor entero/logico en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // constanteSimbolica ::= ID COLON CONSTANT error NT$21 tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$21 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':=' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // constanteSimbolica ::= ID COLON error NT$20 ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$20 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'constant' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constanteSimbolica ::= ID error NT$19 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$19 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // constanteSimbolica ::= COLON error NT$18 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$18 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constantesSimbolicas ::= constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // constantesSimbolicas ::= constantesSimbolicas constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametro ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Parametro no valido");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametro ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametro ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaSubprograma ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciaSubprograma ::= ID LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciaWhile ::= WHILE expresion LOOP sentencias END error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaWhile ::= WHILE expresion LOOP sentencias error NT$17 LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$17 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaWhile ::= WHILE expresion error NT$16 sentencias END LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$16 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaIf ::= IF expresion THEN sentencias error NT$15 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$15 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en sentencia if");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaIf ::= IF expresion error NT$14 sentencias END IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$14 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("sentencia if mal formada");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaIf ::= IF expresion THEN sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaAsign ::= ID ASIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaAsign ::= ID ACCESS sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ')' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaES ::= PUT_LINE error NT$13 parametro RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$13 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaES ::= LEFTBRACKET error NT$12 parametro RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$12 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'Put_line' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= sentenciaSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentenciaES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencias ::= sentencias sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencias ::= sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= INTEGER COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= ID COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= ID LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion ACCESS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion NOTEQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion GREATERTHAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion MINUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoEstructurado ::= TYPE ID IS RECORD variables END error NT$11 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$11 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoEstructurado ::= TYPE ID IS RECORD variables error NT$10 RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$10 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoEstructurado ::= TYPE ID IS RECORD error NT$9 END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta cuerpo en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoEstructurado ::= TYPE ID IS error NT$8 variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$8 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoEstructurado ::= TYPE ID error NT$7 RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$7 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoEstructurado ::= TYPE error NT$6 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$6 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoEstructurado ::= ID error NT$5 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$5 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'type' en tipo estructurado"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo ::= tipoEstructurado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipos ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipos ::= tipos tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoVariable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoVariable ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoConstante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionesComunes ::= subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionesComunes ::= variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracionesComunes ::= tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionesComunes ::= variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionesComunes ::= tipos subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionesComunes ::= tipos variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionesComunes ::= tipos variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionesGlobales ::= constantesSimbolicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionesGlobales ::= declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionesGlobales ::= constantesSimbolicas declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= declaracionesGlobales BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= declaracionesGlobales BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta 'is' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabecera ::= PROCEDURE ID LEFTBRACKET error NT$4 IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabecera ::= PROCEDURE ID error NT$3 RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cabecera ::= PROCEDURE error NT$2 LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cabecera ::= ID error NT$1 LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'procedure' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

