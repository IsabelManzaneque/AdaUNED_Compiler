
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 22 13:08:06 GMT 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 22 13:08:06 GMT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\263\000\002\002\004\000\002\043\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\007\000\002\044\002" +
    "\000\002\004\010\000\002\045\002\000\002\004\010\000" +
    "\002\046\002\000\002\004\010\000\002\047\002\000\002" +
    "\004\010\000\002\004\007\000\002\005\010\000\002\005" +
    "\007\000\002\005\007\000\002\005\006\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\023\003\000\002\023\003\000\002" +
    "\020\004\000\002\020\003\000\002\017\003\000\002\017" +
    "\003\000\002\021\012\000\002\050\002\000\002\021\013" +
    "\000\002\051\002\000\002\021\013\000\002\052\002\000" +
    "\002\021\013\000\002\053\002\000\002\021\013\000\002" +
    "\054\002\000\002\021\013\000\002\055\002\000\002\021" +
    "\013\000\002\056\002\000\002\021\013\000\002\021\012" +
    "\000\002\022\003\000\002\022\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\006\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\011\004\000\002\011\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\012\006\000\002\057\002" +
    "\000\002\012\007\000\002\060\002\000\002\012\007\000" +
    "\002\012\005\000\002\013\005\000\002\013\005\000\002" +
    "\014\010\000\002\014\012\000\002\061\002\000\002\014" +
    "\011\000\002\062\002\000\002\014\011\000\002\015\010" +
    "\000\002\063\002\000\002\015\011\000\002\064\002\000" +
    "\002\015\011\000\002\015\010\000\002\016\006\000\002" +
    "\016\005\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\026\004\000\002\026\003\000\002\025\010" +
    "\000\002\065\002\000\002\025\011\000\002\066\002\000" +
    "\002\025\011\000\002\067\002\000\002\025\011\000\002" +
    "\070\002\000\002\025\011\000\002\071\002\000\002\025" +
    "\011\000\002\025\010\000\002\031\004\000\002\031\003" +
    "\000\002\030\006\000\002\030\005\000\002\072\002\000" +
    "\002\030\007\000\002\073\002\000\002\030\007\000\002" +
    "\074\002\000\002\030\007\000\002\030\006\000\002\035" +
    "\004\000\002\035\003\000\002\034\003\000\002\034\003" +
    "\000\002\036\013\000\002\036\012\000\002\075\002\000" +
    "\002\036\013\000\002\076\002\000\002\036\013\000\002" +
    "\077\002\000\002\036\013\000\002\100\002\000\002\036" +
    "\013\000\002\101\002\000\002\036\013\000\002\102\002" +
    "\000\002\036\013\000\002\103\002\000\002\036\013\000" +
    "\002\037\013\000\002\037\012\000\002\037\012\000\002" +
    "\037\011\000\002\037\003\000\002\040\011\000\002\040" +
    "\010\000\002\104\002\000\002\040\011\000\002\105\002" +
    "\000\002\040\011\000\002\106\002\000\002\040\011\000" +
    "\002\107\002\000\002\040\011\000\002\041\010\000\002" +
    "\041\007\000\002\041\007\000\002\041\006\000\002\041" +
    "\003\000\002\032\004\000\002\032\005\000\002\032\003" +
    "\000\002\033\006\000\002\033\005\000\002\033\005\000" +
    "\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\006\036\000\046\000\001\002\000\004\002" +
    "\u01ad\001\002\000\006\036\010\046\006\001\002\000\004" +
    "\003\u01a8\001\002\000\004\002\uffff\001\002\000\006\003" +
    "\u0198\046\u0197\001\002\000\024\003\037\012\023\022\027" +
    "\023\030\030\022\032\040\036\012\044\031\046\024\001" +
    "\002\000\006\003\u016b\046\u016a\001\002\000\022\012\042" +
    "\022\uffe5\023\030\030\022\032\040\036\012\044\031\046" +
    "\043\001\002\000\022\012\uff7a\022\uff7a\023\uff7a\030\uff7a" +
    "\032\uff7a\036\uff7a\044\uff7a\046\uff7a\001\002\000\022\012" +
    "\uffda\022\uffda\023\uffda\030\uffda\032\uffda\036\uffda\044\uffda" +
    "\046\uffda\001\002\000\022\012\023\022\uffed\023\030\030" +
    "\022\032\040\036\012\044\031\046\024\001\002\000\004" +
    "\002\ufffe\001\002\000\030\003\uffd8\006\uffd8\011\uffd8\012" +
    "\uffd8\022\uffd8\023\uffd8\030\uffd8\032\uffd8\036\uffd8\044\uffd8" +
    "\046\uffd8\001\002\000\022\012\042\022\uffe6\023\030\030" +
    "\022\032\040\036\012\044\031\046\043\001\002\000\006" +
    "\003\u0129\046\u0128\001\002\000\004\003\u0122\001\002\000" +
    "\010\003\u0107\010\054\012\u0108\001\002\000\022\012\uff7c" +
    "\022\uff7c\023\uff7c\030\uff7c\032\uff7c\036\uff7c\044\uff7c\046" +
    "\uff7c\001\002\000\030\003\uffd9\006\uffd9\011\uffd9\012\uffd9" +
    "\022\uffd9\023\uffd9\030\uffd9\032\uffd9\036\uffd9\044\uffd9\046" +
    "\uffd9\001\002\000\016\005\107\026\u0100\031\115\037\113" +
    "\045\110\046\116\001\002\000\032\003\uffc6\006\uffc6\011" +
    "\uffc6\012\uffc6\022\uffc6\023\uffc6\030\uffc6\032\uffc6\033\uffc6" +
    "\036\uffc6\044\uffc6\046\uffc6\001\002\000\006\003\330\046" +
    "\327\001\002\000\004\022\317\001\002\000\022\012\042" +
    "\022\uffe7\023\030\030\022\032\040\036\012\044\031\046" +
    "\043\001\002\000\022\012\uff95\022\uff95\023\uff95\030\uff95" +
    "\032\uff95\036\uff95\044\uff95\046\uff95\001\002\000\004\022" +
    "\uffee\001\002\000\026\003\uff87\012\uff87\022\uff87\023\uff87" +
    "\026\uff87\030\uff87\032\uff87\036\uff87\044\uff87\046\uff87\001" +
    "\002\000\004\022\uffec\001\002\000\032\003\uffc7\006\uffc7" +
    "\011\uffc7\012\uffc7\022\uffc7\023\uffc7\030\uffc7\032\uffc7\033" +
    "\uffc7\036\uffc7\044\uffc7\046\uffc7\001\002\000\022\012\uff7b" +
    "\022\uff7b\023\uff7b\030\uff7b\032\uff7b\036\uff7b\044\uff7b\046" +
    "\uff7b\001\002\000\004\003\313\001\002\000\010\003\303" +
    "\010\054\012\056\001\002\000\022\012\uffdb\022\uffdb\023" +
    "\uffdb\030\uffdb\032\uffdb\036\uffdb\044\uffdb\046\uffdb\001\002" +
    "\000\014\012\042\022\uffea\030\022\036\012\046\050\001" +
    "\002\000\014\012\042\022\uffe9\030\022\036\012\046\050" +
    "\001\002\000\022\012\uff7d\022\uff7d\023\uff7d\030\uff7d\032" +
    "\uff7d\036\uff7d\044\uff7d\046\uff7d\001\002\000\010\003\073" +
    "\010\054\012\056\001\002\000\010\012\042\022\uffe1\046" +
    "\052\001\002\000\010\003\055\010\054\012\056\001\002" +
    "\000\026\003\uff88\012\uff88\022\uff88\023\uff88\026\uff88\030" +
    "\uff88\032\uff88\036\uff88\044\uff88\046\uff88\001\002\000\006" +
    "\012\042\046\052\001\002\000\010\023\uff82\032\uff82\046" +
    "\uff82\001\002\000\012\003\060\023\030\032\040\046\057" +
    "\001\002\000\006\003\uffdc\011\uffdc\001\002\000\004\011" +
    "\uff80\001\002\000\006\003\uffdd\011\uffdd\001\002\000\006" +
    "\003\064\011\063\001\002\000\026\003\uff86\012\uff86\022" +
    "\uff86\023\uff86\026\uff86\030\uff86\032\uff86\036\uff86\044\uff86" +
    "\046\uff86\001\002\000\026\003\uff7e\012\uff7e\022\uff7e\023" +
    "\uff7e\026\uff7e\030\uff7e\032\uff7e\036\uff7e\044\uff7e\046\uff7e" +
    "\001\002\000\004\011\066\001\002\000\026\003\uff7f\012" +
    "\uff7f\022\uff7f\023\uff7f\026\uff7f\030\uff7f\032\uff7f\036\uff7f" +
    "\044\uff7f\046\uff7f\001\002\000\010\023\030\032\040\046" +
    "\057\001\002\000\004\011\071\001\002\000\026\003\uff81" +
    "\012\uff81\022\uff81\023\uff81\026\uff81\030\uff81\032\uff81\036" +
    "\uff81\044\uff81\046\uff81\001\002\000\026\003\uff85\012\uff85" +
    "\022\uff85\023\uff85\026\uff85\030\uff85\032\uff85\036\uff85\044" +
    "\uff85\046\uff85\001\002\000\012\005\uff77\023\uff82\032\uff82" +
    "\046\uff82\001\002\000\004\005\075\001\002\000\004\006" +
    "\076\001\002\000\004\041\077\001\002\000\006\023\030" +
    "\032\040\001\002\000\004\033\101\001\002\000\024\003" +
    "\105\012\042\022\103\023\030\030\022\032\040\036\012" +
    "\044\031\046\043\001\002\000\022\012\uff76\022\uff76\023" +
    "\uff76\030\uff76\032\uff76\036\uff76\044\uff76\046\uff76\001\002" +
    "\000\016\005\107\031\115\037\113\041\263\045\110\046" +
    "\116\001\002\000\004\022\106\001\002\000\022\012\uff65" +
    "\022\uff65\023\uff65\030\uff65\032\uff65\036\uff65\044\uff65\046" +
    "\uff65\001\002\000\016\005\107\031\115\037\113\041\121" +
    "\045\110\046\116\001\002\000\004\003\257\001\002\000" +
    "\014\005\130\027\132\032\126\043\131\046\127\001\002" +
    "\000\004\011\uffb3\001\002\000\004\011\uffb4\001\002\000" +
    "\006\003\233\005\232\001\002\000\004\011\231\001\002" +
    "\000\014\005\130\027\132\032\126\043\131\046\127\001" +
    "\002\000\010\005\175\017\174\020\176\001\002\000\004" +
    "\011\uffb0\001\002\000\004\011\uffb1\001\002\000\014\005" +
    "\130\027\132\032\126\043\131\046\127\001\002\000\016" +
    "\005\107\031\115\037\113\041\125\045\110\046\116\001" +
    "\002\000\004\011\uffb2\001\002\000\004\011\166\001\002" +
    "\000\014\005\130\027\132\032\126\043\131\046\127\001" +
    "\002\000\032\003\uffb9\006\uffb9\010\164\011\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\020\uffb9\021\uffb9\034\uffb9\042" +
    "\uffb9\001\002\000\034\003\uffba\005\157\006\uffba\010\156" +
    "\011\uffba\013\uffba\014\uffba\015\uffba\016\uffba\020\uffba\021" +
    "\uffba\034\uffba\042\uffba\001\002\000\014\005\130\027\132" +
    "\032\126\043\131\046\127\001\002\000\030\003\uffb8\006" +
    "\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8" +
    "\021\uffb8\034\uffb8\042\uffb8\001\002\000\030\003\uffb7\006" +
    "\uffb7\011\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7" +
    "\021\uffb7\034\uffb7\042\uffb7\001\002\000\020\011\135\013" +
    "\137\014\134\015\141\016\140\020\142\021\136\001\002" +
    "\000\014\005\130\027\132\032\126\043\131\046\127\001" +
    "\002\000\004\026\150\001\002\000\014\005\130\027\132" +
    "\032\126\043\131\046\127\001\002\000\014\005\130\027" +
    "\132\032\126\043\131\046\127\001\002\000\014\005\130" +
    "\027\132\032\126\043\131\046\127\001\002\000\014\005" +
    "\130\027\132\032\126\043\131\046\127\001\002\000\014" +
    "\005\130\027\132\032\126\043\131\046\127\001\002\000" +
    "\030\003\uffc0\006\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\020\uffc0\021\uffc0\034\uffc0\042\uffc0\001\002\000" +
    "\030\003\uffc3\006\uffc3\011\uffc3\013\137\014\134\015\uffc3" +
    "\016\uffc3\020\142\021\uffc3\034\uffc3\042\uffc3\001\002\000" +
    "\030\003\uffc2\006\uffc2\011\uffc2\013\137\014\134\015\141" +
    "\016\uffc2\020\142\021\uffc2\034\uffc2\042\uffc2\001\002\000" +
    "\030\003\uffc5\006\uffc5\011\uffc5\013\uffc5\014\134\015\uffc5" +
    "\016\uffc5\020\142\021\uffc5\034\uffc5\042\uffc5\001\002\000" +
    "\030\003\uffc1\006\uffc1\011\uffc1\013\137\014\134\015\141" +
    "\016\140\020\142\021\uffc1\034\uffc1\042\uffc1\001\002\000" +
    "\004\046\151\001\002\000\004\011\152\001\002\000\022" +
    "\012\uff69\022\uff69\023\uff69\030\uff69\032\uff69\036\uff69\044" +
    "\uff69\046\uff69\001\002\000\030\003\uffc4\006\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\142\021\uffc4\034" +
    "\uffc4\042\uffc4\001\002\000\020\006\155\013\137\014\134" +
    "\015\141\016\140\020\142\021\136\001\002\000\030\003" +
    "\uffbe\006\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\020\uffbe\021\uffbe\034\uffbe\042\uffbe\001\002\000\014\005" +
    "\130\027\132\032\126\043\131\046\127\001\002\000\016" +
    "\005\130\006\160\027\132\032\126\043\131\046\127\001" +
    "\002\000\030\003\uffbf\006\uffbf\011\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\020\uffbf\021\uffbf\034\uffbf\042\uffbf\001" +
    "\002\000\020\006\162\013\137\014\134\015\141\016\140" +
    "\020\142\021\136\001\002\000\030\003\uffbd\006\uffbd\011" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\021\uffbd" +
    "\034\uffbd\042\uffbd\001\002\000\030\003\uffbc\006\uffbc\011" +
    "\uffbc\013\137\014\134\015\141\016\140\020\142\021\136" +
    "\034\uffbc\042\uffbc\001\002\000\014\005\130\027\132\032" +
    "\126\043\131\046\127\001\002\000\030\003\uffbb\006\uffbb" +
    "\011\uffbb\013\137\014\134\015\141\016\140\020\142\021" +
    "\136\034\uffbb\042\uffbb\001\002\000\024\003\uffb5\005\uffb5" +
    "\025\uffb5\026\uffb5\031\uffb5\037\uffb5\041\uffb5\045\uffb5\046" +
    "\uffb5\001\002\000\020\011\170\013\137\014\134\015\141" +
    "\016\140\020\142\021\136\001\002\000\004\026\171\001" +
    "\002\000\004\046\172\001\002\000\004\011\173\001\002" +
    "\000\022\012\uff67\022\uff67\023\uff67\030\uff67\032\uff67\036" +
    "\uff67\044\uff67\046\uff67\001\002\000\014\005\130\027\132" +
    "\032\126\043\131\046\127\001\002\000\022\003\205\005" +
    "\130\006\201\027\132\032\126\043\131\046\127\047\203" +
    "\001\002\000\004\046\177\001\002\000\006\017\174\020" +
    "\176\001\002\000\004\011\uffa9\001\002\000\004\011\uff9a" +
    "\001\002\000\004\006\206\001\002\000\006\006\uff98\011" +
    "\uff98\001\002\000\022\006\uff99\011\uff99\013\137\014\134" +
    "\015\141\016\140\020\142\021\136\001\002\000\006\006" +
    "\uff97\011\uff97\001\002\000\004\011\uff9b\001\002\000\020" +
    "\011\uffa8\013\137\014\134\015\141\016\140\020\142\021" +
    "\136\001\002\000\022\003\211\013\137\014\134\015\141" +
    "\016\140\020\142\021\136\042\212\001\002\000\014\005" +
    "\uffa5\031\uffa5\037\uffa5\045\uffa5\046\uffa5\001\002\000\014" +
    "\005\107\031\115\037\113\045\110\046\116\001\002\000" +
    "\022\003\215\005\107\025\214\026\216\031\115\037\113" +
    "\045\110\046\116\001\002\000\014\005\107\031\115\037" +
    "\113\045\110\046\116\001\002\000\004\031\uffa3\001\002" +
    "\000\004\031\217\001\002\000\004\011\uffa7\001\002\000" +
    "\004\031\221\001\002\000\004\011\uffa2\001\002\000\016" +
    "\005\107\026\223\031\115\037\113\045\110\046\116\001" +
    "\002\000\004\031\224\001\002\000\004\011\uffa6\001\002" +
    "\000\014\005\107\031\115\037\113\045\110\046\116\001" +
    "\002\000\016\005\107\026\227\031\115\037\113\045\110" +
    "\046\116\001\002\000\004\031\230\001\002\000\004\011" +
    "\uffa4\001\002\000\024\003\uffb6\005\uffb6\025\uffb6\026\uffb6" +
    "\031\uffb6\037\uffb6\041\uffb6\045\uffb6\046\uffb6\001\002\000" +
    "\020\003\205\005\130\027\132\032\126\043\131\046\127" +
    "\047\203\001\002\000\020\003\uffac\005\uffac\027\uffac\032" +
    "\uffac\043\uffac\046\uffac\047\uffac\001\002\000\020\003\205" +
    "\005\130\027\132\032\126\043\131\046\127\047\203\001" +
    "\002\000\004\006\236\001\002\000\004\011\uffab\001\002" +
    "\000\006\006\240\011\uffaa\001\002\000\004\011\uffaf\001" +
    "\002\000\022\003\242\013\137\014\134\015\141\016\140" +
    "\020\142\021\136\034\243\001\002\000\014\005\uffa0\031" +
    "\uffa0\037\uffa0\045\uffa0\046\uffa0\001\002\000\014\005\107" +
    "\031\115\037\113\045\110\046\116\001\002\000\020\003" +
    "\245\005\107\026\246\031\115\037\113\045\110\046\116" +
    "\001\002\000\004\034\uff9e\001\002\000\006\003\247\034" +
    "\250\001\002\000\004\011\uff9c\001\002\000\004\011\uffa1" +
    "\001\002\000\004\034\252\001\002\000\004\011\uff9d\001" +
    "\002\000\014\005\107\031\115\037\113\045\110\046\116" +
    "\001\002\000\016\005\107\026\255\031\115\037\113\045" +
    "\110\046\116\001\002\000\004\034\256\001\002\000\004" +
    "\011\uff9f\001\002\000\020\003\uffae\005\uffae\027\uffae\032" +
    "\uffae\043\uffae\046\uffae\047\uffae\001\002\000\020\003\205" +
    "\005\130\027\132\032\126\043\131\046\127\047\203\001" +
    "\002\000\004\006\262\001\002\000\004\011\uffad\001\002" +
    "\000\014\005\130\027\132\032\126\043\131\046\127\001" +
    "\002\000\016\005\107\031\115\037\113\041\265\045\110" +
    "\046\116\001\002\000\014\005\130\027\132\032\126\043" +
    "\131\046\127\001\002\000\020\011\267\013\137\014\134" +
    "\015\141\016\140\020\142\021\136\001\002\000\004\026" +
    "\270\001\002\000\004\046\271\001\002\000\004\011\272" +
    "\001\002\000\022\012\uff68\022\uff68\023\uff68\030\uff68\032" +
    "\uff68\036\uff68\044\uff68\046\uff68\001\002\000\020\011\274" +
    "\013\137\014\134\015\141\016\140\020\142\021\136\001" +
    "\002\000\004\026\275\001\002\000\004\046\276\001\002" +
    "\000\004\011\277\001\002\000\022\012\uff66\022\uff66\023" +
    "\uff66\030\uff66\032\uff66\036\uff66\044\uff66\046\uff66\001\002" +
    "\000\012\022\uffeb\030\022\036\012\046\301\001\002\000" +
    "\004\003\302\001\002\000\004\005\uff77\001\002\000\014" +
    "\005\uff77\023\uff82\032\uff82\033\uffd6\046\uff82\001\002\000" +
    "\004\033\305\001\002\000\004\040\306\001\002\000\006" +
    "\012\042\046\052\001\002\000\010\012\042\026\310\046" +
    "\052\001\002\000\004\040\311\001\002\000\004\011\312" +
    "\001\002\000\030\003\uffd5\006\uffd5\011\uffd5\012\uffd5\022" +
    "\uffd5\023\uffd5\030\uffd5\032\uffd5\036\uffd5\044\uffd5\046\uffd5" +
    "\001\002\000\010\023\uff84\032\uff84\046\uff84\001\002\000" +
    "\010\023\030\032\040\046\057\001\002\000\004\011\316" +
    "\001\002\000\026\003\uff83\012\uff83\022\uff83\023\uff83\026" +
    "\uff83\030\uff83\032\uff83\036\uff83\044\uff83\046\uff83\001\002" +
    "\000\016\005\107\026\321\031\115\037\113\045\110\046" +
    "\116\001\002\000\016\005\107\026\324\031\115\037\113" +
    "\045\110\046\116\001\002\000\004\046\322\001\002\000" +
    "\004\011\323\001\002\000\004\002\ufff1\001\002\000\004" +
    "\046\325\001\002\000\004\011\326\001\002\000\004\002" +
    "\ufff3\001\002\000\006\003\340\033\341\001\002\000\004" +
    "\033\uffd4\001\002\000\004\033\332\001\002\000\004\040" +
    "\333\001\002\000\006\012\042\046\052\001\002\000\010" +
    "\012\042\026\335\046\052\001\002\000\004\040\336\001" +
    "\002\000\004\011\337\001\002\000\030\003\uffd3\006\uffd3" +
    "\011\uffd3\012\uffd3\022\uffd3\023\uffd3\030\uffd3\032\uffd3\036" +
    "\uffd3\044\uffd3\046\uffd3\001\002\000\004\040\uffd2\001\002" +
    "\000\006\003\343\040\342\001\002\000\010\003\351\012" +
    "\042\046\052\001\002\000\006\012\uffd0\046\uffd0\001\002" +
    "\000\006\012\042\046\052\001\002\000\010\012\042\026" +
    "\346\046\052\001\002\000\004\040\347\001\002\000\004" +
    "\011\350\001\002\000\030\003\uffcf\006\uffcf\011\uffcf\012" +
    "\uffcf\022\uffcf\023\uffcf\030\uffcf\032\uffcf\036\uffcf\044\uffcf" +
    "\046\uffcf\001\002\000\004\026\uffce\001\002\000\012\003" +
    "\353\012\042\026\354\046\052\001\002\000\004\040\uffcc" +
    "\001\002\000\006\003\356\040\355\001\002\000\006\003" +
    "\362\011\361\001\002\000\004\011\uffca\001\002\000\004" +
    "\011\360\001\002\000\030\003\uffc9\006\uffc9\011\uffc9\012" +
    "\uffc9\022\uffc9\023\uffc9\030\uffc9\032\uffc9\036\uffc9\044\uffc9" +
    "\046\uffc9\001\002\000\030\003\uffd7\006\uffd7\011\uffd7\012" +
    "\uffd7\022\uffd7\023\uffd7\030\uffd7\032\uffd7\036\uffd7\044\uffd7" +
    "\046\uffd7\001\002\000\030\003\uffc8\006\uffc8\011\uffc8\012" +
    "\uffc8\022\uffc8\023\uffc8\030\uffc8\032\uffc8\036\uffc8\044\uffc8" +
    "\046\uffc8\001\002\000\004\040\364\001\002\000\004\011" +
    "\365\001\002\000\030\003\uffcb\006\uffcb\011\uffcb\012\uffcb" +
    "\022\uffcb\023\uffcb\030\uffcb\032\uffcb\036\uffcb\044\uffcb\046" +
    "\uffcb\001\002\000\004\026\367\001\002\000\004\040\370" +
    "\001\002\000\004\011\371\001\002\000\030\003\uffcd\006" +
    "\uffcd\011\uffcd\012\uffcd\022\uffcd\023\uffcd\030\uffcd\032\uffcd" +
    "\036\uffcd\044\uffcd\046\uffcd\001\002\000\004\040\373\001" +
    "\002\000\006\012\042\046\052\001\002\000\010\012\042" +
    "\026\375\046\052\001\002\000\004\040\376\001\002\000" +
    "\004\011\377\001\002\000\030\003\uffd1\006\uffd1\011\uffd1" +
    "\012\uffd1\022\uffd1\023\uffd1\030\uffd1\032\uffd1\036\uffd1\044" +
    "\uffd1\046\uffd1\001\002\000\004\046\u0105\001\002\000\016" +
    "\005\107\026\u0102\031\115\037\113\045\110\046\116\001" +
    "\002\000\004\046\u0103\001\002\000\004\011\u0104\001\002" +
    "\000\004\002\ufff2\001\002\000\004\011\u0106\001\002\000" +
    "\004\002\ufff0\001\002\000\016\005\uff77\023\uff82\024\uff91" +
    "\032\uff82\033\uffd6\046\uff82\001\002\000\014\003\u0109\023" +
    "\030\024\u010a\032\040\046\057\001\002\000\006\011\uff80" +
    "\017\uff8f\001\002\000\006\003\u010c\017\u010b\001\002\000" +
    "\012\003\u0114\027\u0111\032\u010e\043\u0110\001\002\000\010" +
    "\027\uff8d\032\uff8d\043\uff8d\001\002\000\010\027\u0111\032" +
    "\u010e\043\u0110\001\002\000\006\003\uffde\011\uffde\001\002" +
    "\000\004\011\u0112\001\002\000\006\003\uffe0\011\uffe0\001" +
    "\002\000\006\003\uffdf\011\uffdf\001\002\000\022\012\uff8c" +
    "\022\uff8c\023\uff8c\030\uff8c\032\uff8c\036\uff8c\044\uff8c\046" +
    "\uff8c\001\002\000\006\003\u0118\011\u0117\001\002\000\004" +
    "\011\uff8b\001\002\000\004\011\u0116\001\002\000\022\012" +
    "\uff8a\022\uff8a\023\uff8a\030\uff8a\032\uff8a\036\uff8a\044\uff8a" +
    "\046\uff8a\001\002\000\022\012\uff94\022\uff94\023\uff94\030" +
    "\uff94\032\uff94\036\uff94\044\uff94\046\uff94\001\002\000\022" +
    "\012\uff89\022\uff89\023\uff89\030\uff89\032\uff89\036\uff89\044" +
    "\uff89\046\uff89\001\002\000\004\017\u011a\001\002\000\010" +
    "\027\u0111\032\u010e\043\u0110\001\002\000\004\011\u011c\001" +
    "\002\000\022\012\uff8e\022\uff8e\023\uff8e\030\uff8e\032\uff8e" +
    "\036\uff8e\044\uff8e\046\uff8e\001\002\000\004\024\u011e\001" +
    "\002\000\004\017\u011f\001\002\000\010\027\u0111\032\u010e" +
    "\043\u0110\001\002\000\004\011\u0121\001\002\000\022\012" +
    "\uff90\022\uff90\023\uff90\030\uff90\032\uff90\036\uff90\044\uff90" +
    "\046\uff90\001\002\000\012\023\uff84\024\uff93\032\uff84\046" +
    "\uff84\001\002\000\004\024\u0124\001\002\000\004\017\u0125" +
    "\001\002\000\010\027\u0111\032\u010e\043\u0110\001\002\000" +
    "\004\011\u0127\001\002\000\022\012\uff92\022\uff92\023\uff92" +
    "\030\uff92\032\uff92\036\uff92\044\uff92\046\uff92\001\002\000" +
    "\006\003\u0132\005\u0131\001\002\000\004\005\uff75\001\002" +
    "\000\004\005\u012b\001\002\000\004\006\u012c\001\002\000" +
    "\004\041\u012d\001\002\000\006\023\030\032\040\001\002" +
    "\000\004\033\u012f\001\002\000\024\003\105\012\042\022" +
    "\103\023\030\030\022\032\040\036\012\044\031\046\043" +
    "\001\002\000\022\012\uff74\022\uff74\023\uff74\030\uff74\032" +
    "\uff74\036\uff74\044\uff74\046\uff74\001\002\000\010\003\u013b" +
    "\006\u013a\046\u0139\001\002\000\004\006\uff73\001\002\000" +
    "\004\006\u0134\001\002\000\004\041\u0135\001\002\000\006" +
    "\023\030\032\040\001\002\000\004\033\u0137\001\002\000" +
    "\024\003\105\012\042\022\103\023\030\030\022\032\040" +
    "\036\012\044\031\046\043\001\002\000\022\012\uff72\022" +
    "\uff72\023\uff72\030\uff72\032\uff72\036\uff72\044\uff72\046\uff72" +
    "\001\002\000\006\010\u015c\012\u015d\001\002\000\006\003" +
    "\u014d\041\u014c\001\002\000\014\003\uff4f\006\uff4f\011\uff4f" +
    "\041\uff71\046\uff4f\001\002\000\012\003\u0140\006\u013e\011" +
    "\u013f\046\u0139\001\002\000\012\003\uff53\006\uff53\011\uff53" +
    "\046\uff53\001\002\000\004\041\u0143\001\002\000\006\003" +
    "\u0140\046\u0139\001\002\000\012\003\uff4f\006\uff4f\011\uff4f" +
    "\046\uff4f\001\002\000\012\003\uff55\006\uff55\011\uff55\046" +
    "\uff55\001\002\000\012\003\uff54\006\uff54\011\uff54\046\uff54" +
    "\001\002\000\006\023\030\032\040\001\002\000\004\033" +
    "\u0145\001\002\000\024\003\105\012\042\022\103\023\030" +
    "\030\022\032\040\036\012\044\031\046\043\001\002\000" +
    "\022\012\uff79\022\uff79\023\uff79\030\uff79\032\uff79\036\uff79" +
    "\044\uff79\046\uff79\001\002\000\004\041\u0148\001\002\000" +
    "\006\023\030\032\040\001\002\000\004\033\u014a\001\002" +
    "\000\024\003\105\012\042\022\103\023\030\030\022\032" +
    "\040\036\012\044\031\046\043\001\002\000\022\012\uff70" +
    "\022\uff70\023\uff70\030\uff70\032\uff70\036\uff70\044\uff70\046" +
    "\uff70\001\002\000\010\003\u0152\023\030\032\040\001\002" +
    "\000\006\023\uff6f\032\uff6f\001\002\000\006\023\030\032" +
    "\040\001\002\000\004\033\u0150\001\002\000\024\003\105" +
    "\012\042\022\103\023\030\030\022\032\040\036\012\044" +
    "\031\046\043\001\002\000\022\012\uff6e\022\uff6e\023\uff6e" +
    "\030\uff6e\032\uff6e\036\uff6e\044\uff6e\046\uff6e\001\002\000" +
    "\004\033\uff6d\001\002\000\006\003\u0154\033\u0155\001\002" +
    "\000\024\003\uff6b\012\uff6b\022\uff6b\023\uff6b\030\uff6b\032" +
    "\uff6b\036\uff6b\044\uff6b\046\uff6b\001\002\000\024\003\105" +
    "\012\042\022\103\023\030\030\022\032\040\036\012\044" +
    "\031\046\043\001\002\000\022\012\uff78\022\uff78\023\uff78" +
    "\030\uff78\032\uff78\036\uff78\044\uff78\046\uff78\001\002\000" +
    "\024\003\105\012\042\022\103\023\030\030\022\032\040" +
    "\036\012\044\031\046\043\001\002\000\022\012\uff6a\022" +
    "\uff6a\023\uff6a\030\uff6a\032\uff6a\036\uff6a\044\uff6a\046\uff6a" +
    "\001\002\000\004\033\u015a\001\002\000\024\003\105\012" +
    "\042\022\103\023\030\030\022\032\040\036\012\044\031" +
    "\046\043\001\002\000\022\012\uff6c\022\uff6c\023\uff6c\030" +
    "\uff6c\032\uff6c\036\uff6c\044\uff6c\046\uff6c\001\002\000\006" +
    "\003\u0140\046\u0139\001\002\000\014\023\030\032\040\035" +
    "\u015f\044\031\046\u015e\001\002\000\004\003\u0162\001\002" +
    "\000\012\023\030\032\040\044\031\046\u015e\001\002\000" +
    "\012\003\uff51\006\uff51\011\uff51\046\uff51\001\002\000\012" +
    "\003\uff52\006\uff52\011\uff52\046\uff52\001\002\000\004\033" +
    "\uffd6\001\002\000\012\003\uff50\006\uff50\011\uff50\046\uff50" +
    "\001\002\000\014\022\uffe4\023\030\032\040\044\031\046" +
    "\u015e\001\002\000\012\022\uffe8\030\022\036\012\046\301" +
    "\001\002\000\022\012\uff96\022\uff96\023\uff96\030\uff96\032" +
    "\uff96\036\uff96\044\uff96\046\uff96\001\002\000\004\022\uffef" +
    "\001\002\000\014\022\uffe3\023\030\032\040\044\031\046" +
    "\u015e\001\002\000\010\012\042\022\uffe2\046\052\001\002" +
    "\000\006\003\u0184\005\u0183\001\002\000\004\005\uff62\001" +
    "\002\000\004\005\u016d\001\002\000\004\006\u016e\001\002" +
    "\000\004\033\u016f\001\002\000\024\003\u0173\012\042\022" +
    "\u0171\023\030\030\022\032\040\036\012\044\031\046\043" +
    "\001\002\000\022\012\uff61\022\uff61\023\uff61\030\uff61\032" +
    "\uff61\036\uff61\044\uff61\046\uff61\001\002\000\016\005\107" +
    "\026\u017d\031\115\037\113\045\110\046\116\001\002\000" +
    "\004\022\u0174\001\002\000\022\012\uff56\022\uff56\023\uff56" +
    "\030\uff56\032\uff56\036\uff56\044\uff56\046\uff56\001\002\000" +
    "\016\005\107\026\u0176\031\115\037\113\045\110\046\116" +
    "\001\002\000\016\005\107\026\u0179\031\115\037\113\045" +
    "\110\046\116\001\002\000\004\046\u0177\001\002\000\004" +
    "\011\u0178\001\002\000\022\012\uff58\022\uff58\023\uff58\030" +
    "\uff58\032\uff58\036\uff58\044\uff58\046\uff58\001\002\000\004" +
    "\046\u017a\001\002\000\004\011\u017b\001\002\000\022\012" +
    "\uff5a\022\uff5a\023\uff5a\030\uff5a\032\uff5a\036\uff5a\044\uff5a" +
    "\046\uff5a\001\002\000\016\005\107\026\u0180\031\115\037" +
    "\113\045\110\046\116\001\002\000\004\046\u017e\001\002" +
    "\000\004\011\u017f\001\002\000\022\012\uff57\022\uff57\023" +
    "\uff57\030\uff57\032\uff57\036\uff57\044\uff57\046\uff57\001\002" +
    "\000\004\046\u0181\001\002\000\004\011\u0182\001\002\000" +
    "\022\012\uff59\022\uff59\023\uff59\030\uff59\032\uff59\036\uff59" +
    "\044\uff59\046\uff59\001\002\000\010\003\u018a\006\u0189\046" +
    "\u0139\001\002\000\004\006\uff60\001\002\000\004\006\u0186" +
    "\001\002\000\004\033\u0187\001\002\000\024\003\u0173\012" +
    "\042\022\u0171\023\030\030\022\032\040\036\012\044\031" +
    "\046\043\001\002\000\022\012\uff5f\022\uff5f\023\uff5f\030" +
    "\uff5f\032\uff5f\036\uff5f\044\uff5f\046\uff5f\001\002\000\006" +
    "\003\u0192\033\u0193\001\002\000\014\003\uff4f\006\uff4f\011" +
    "\uff4f\033\uff5e\046\uff4f\001\002\000\012\003\u0140\006\u018c" +
    "\011\u013f\046\u0139\001\002\000\004\033\u018d\001\002\000" +
    "\024\003\u0173\012\042\022\u0171\023\030\030\022\032\040" +
    "\036\012\044\031\046\043\001\002\000\022\012\uff64\022" +
    "\uff64\023\uff64\030\uff64\032\uff64\036\uff64\044\uff64\046\uff64" +
    "\001\002\000\004\033\u0190\001\002\000\024\003\u0173\012" +
    "\042\022\u0171\023\030\030\022\032\040\036\012\044\031" +
    "\046\043\001\002\000\022\012\uff5d\022\uff5d\023\uff5d\030" +
    "\uff5d\032\uff5d\036\uff5d\044\uff5d\046\uff5d\001\002\000\024" +
    "\003\uff5c\012\uff5c\022\uff5c\023\uff5c\030\uff5c\032\uff5c\036" +
    "\uff5c\044\uff5c\046\uff5c\001\002\000\024\003\u0173\012\042" +
    "\022\u0171\023\030\030\022\032\040\036\012\044\031\046" +
    "\043\001\002\000\022\012\uff63\022\uff63\023\uff63\030\uff63" +
    "\032\uff63\036\uff63\044\uff63\046\uff63\001\002\000\024\003" +
    "\u0173\012\042\022\u0171\023\030\030\022\032\040\036\012" +
    "\044\031\046\043\001\002\000\022\012\uff5b\022\uff5b\023" +
    "\uff5b\030\uff5b\032\uff5b\036\uff5b\044\uff5b\046\uff5b\001\002" +
    "\000\006\003\u019e\005\u019d\001\002\000\004\005\ufffa\001" +
    "\002\000\004\005\u019a\001\002\000\004\006\u019b\001\002" +
    "\000\004\033\u019c\001\002\000\024\003\ufff9\012\ufff9\022" +
    "\ufff9\023\ufff9\030\ufff9\032\ufff9\036\ufff9\044\ufff9\046\ufff9" +
    "\001\002\000\006\003\u01a3\006\u01a2\001\002\000\004\006" +
    "\ufff8\001\002\000\004\006\u01a0\001\002\000\004\033\u01a1" +
    "\001\002\000\024\003\ufff7\012\ufff7\022\ufff7\023\ufff7\030" +
    "\ufff7\032\ufff7\036\ufff7\044\ufff7\046\ufff7\001\002\000\006" +
    "\003\u01a6\033\u01a7\001\002\000\004\033\ufff6\001\002\000" +
    "\004\033\u01a5\001\002\000\024\003\ufff5\012\ufff5\022\ufff5" +
    "\023\ufff5\030\ufff5\032\ufff5\036\ufff5\044\ufff5\046\ufff5\001" +
    "\002\000\024\003\ufff4\012\ufff4\022\ufff4\023\ufff4\030\ufff4" +
    "\032\ufff4\036\ufff4\044\ufff4\046\ufff4\001\002\000\024\003" +
    "\ufffd\012\ufffd\022\ufffd\023\ufffd\030\ufffd\032\ufffd\036\ufffd" +
    "\044\ufffd\046\ufffd\001\002\000\004\005\ufffc\001\002\000" +
    "\004\005\u01aa\001\002\000\004\006\u01ab\001\002\000\004" +
    "\033\u01ac\001\002\000\024\003\ufffb\012\ufffb\022\ufffb\023" +
    "\ufffb\030\ufffb\032\ufffb\036\ufffb\044\ufffb\046\ufffb\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\006\002\003\043\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\016\006" +
    "\031\007\034\017\014\020\032\021\017\022\025\025\033" +
    "\026\015\030\035\031\020\034\024\035\012\036\040\040" +
    "\013\001\001\000\002\001\001\000\024\017\014\020\u0167" +
    "\021\017\022\025\030\035\031\u0168\034\046\036\040\040" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\u0166\017\014\020\032\021\017\022\025\025\u0165\030" +
    "\035\031\020\034\024\035\012\036\040\040\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\017\014\020" +
    "\u0163\021\017\022\025\030\052\034\024\035\u0164\036\040" +
    "\040\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\113\011\u0100\012\111\013\110\014\122\015\117\016" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\017\043\021\017\022\025\030\035\031" +
    "\044\034\024\035\045\036\040\040\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\052\034" +
    "\024\035\277\036\040\040\013\001\001\000\014\030\035" +
    "\031\050\034\046\036\040\040\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\071\001\001\000" +
    "\004\073\066\001\001\000\006\022\060\023\061\001\001" +
    "\000\002\001\001\000\004\074\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\060\023" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\073\066\075\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\077" +
    "\001\001\000\002\001\001\000\032\007\103\017\014\020" +
    "\032\021\017\022\025\030\035\031\020\034\024\035\012" +
    "\036\040\037\101\040\013\001\001\000\002\001\001\000" +
    "\020\010\113\011\263\012\111\013\110\014\122\015\117" +
    "\016\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\113\011\121\012\111\013\110\014\122\015\117" +
    "\016\116\001\001\000\002\001\001\000\004\027\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\166" +
    "\001\001\000\016\010\123\012\111\013\110\014\122\015" +
    "\117\016\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\152\001\001\000" +
    "\002\001\001\000\004\027\146\001\001\000\004\027\145" +
    "\001\001\000\004\027\144\001\001\000\004\027\143\001" +
    "\001\000\004\027\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\162\001\001\000\004\027\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\206" +
    "\001\001\000\006\027\203\042\201\001\001\000\004\013" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\224\001\001\000\020\010" +
    "\113\011\212\012\111\013\110\014\122\015\117\016\116" +
    "\001\001\000\016\010\123\012\111\013\110\014\122\015" +
    "\117\016\116\001\001\000\020\010\113\011\221\012\111" +
    "\013\110\014\122\015\117\016\116\001\001\000\004\062" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\123\012\111\013" +
    "\110\014\122\015\117\016\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\113\011\225\012\111\013" +
    "\110\014\122\015\117\016\116\001\001\000\016\010\123" +
    "\012\111\013\110\014\122\015\117\016\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\203\042\236\001\001\000\004\060\233\001\001\000" +
    "\006\027\203\042\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\252\001\001\000\020\010\113\011\243" +
    "\012\111\013\110\014\122\015\117\016\116\001\001\000" +
    "\016\010\123\012\111\013\110\014\122\015\117\016\116" +
    "\001\001\000\004\064\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\113\011\253\012\111\013\110\014" +
    "\122\015\117\016\116\001\001\000\016\010\123\012\111" +
    "\013\110\014\122\015\117\016\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\257\001\001\000\006" +
    "\027\203\042\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\272\001\001\000\016\010\123\012\111" +
    "\013\110\014\122\015\117\016\116\001\001\000\004\027" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\046\036\040\040\013\001" +
    "\001\000\002\001\001\000\004\075\073\001\001\000\010" +
    "\050\303\073\066\075\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\035\031\306\001\001\000\004" +
    "\030\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\313\001\001\000\006\022\060" +
    "\023\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\113\011\317\012\111\013\110\014\122\015\117" +
    "\016\116\001\001\000\016\010\123\012\111\013\110\014" +
    "\122\015\117\016\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\035\031\333\001\001\000\004\030\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\371\001\001\000\002\001\001\000\006\030\035\031\351" +
    "\001\001\000\004\053\343\001\001\000\006\030\035\031" +
    "\344\001\001\000\004\030\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\365\001" +
    "\001\000\004\030\052\001\001\000\004\055\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\035\031\373\001\001\000\004\030\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\123\012\111\013\110\014\122\015\117" +
    "\016\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\050\303\066\u011c\073\066\075\073\001\001\000\006\022" +
    "\060\023\061\001\001\000\006\067\u0118\074\064\001\001" +
    "\000\002\001\001\000\004\024\u0112\001\001\000\004\070" +
    "\u010c\001\001\000\004\024\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\065\u0122\072\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u012d\001\001\000\002\001" +
    "\001\000\032\007\103\017\014\020\032\021\017\022\025" +
    "\030\035\031\020\034\024\035\012\036\040\037\u012f\040" +
    "\013\001\001\000\002\001\001\000\006\032\u013b\033\u013c" +
    "\001\001\000\004\077\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0135\001\001\000\002\001\001" +
    "\000\032\007\103\017\014\020\032\021\017\022\025\030" +
    "\035\031\020\034\024\035\012\036\040\037\u0137\040\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\u0146\001\001\000\004\033\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0143\001\001\000\002\001\001\000\032\007" +
    "\103\017\014\020\032\021\017\022\025\030\035\031\020" +
    "\034\024\035\012\036\040\037\u0145\040\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0148\001\001" +
    "\000\002\001\001\000\032\007\103\017\014\020\032\021" +
    "\017\022\025\030\035\031\020\034\024\035\012\036\040" +
    "\037\u014a\040\013\001\001\000\002\001\001\000\004\022" +
    "\u0152\001\001\000\004\101\u014d\001\001\000\004\022\u014e" +
    "\001\001\000\002\001\001\000\032\007\103\017\014\020" +
    "\032\021\017\022\025\030\035\031\020\034\024\035\012" +
    "\036\040\037\u0150\040\013\001\001\000\002\001\001\000" +
    "\004\102\u0158\001\001\000\002\001\001\000\004\103\u0156" +
    "\001\001\000\032\007\103\017\014\020\032\021\017\022" +
    "\025\030\035\031\020\034\024\035\012\036\040\037\u0155" +
    "\040\013\001\001\000\002\001\001\000\032\007\103\017" +
    "\014\020\032\021\017\022\025\030\035\031\020\034\024" +
    "\035\012\036\040\037\u0157\040\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\103\017\014\020\032" +
    "\021\017\022\025\030\035\031\020\034\024\035\012\036" +
    "\040\037\u015a\040\013\001\001\000\002\001\001\000\004" +
    "\033\u0162\001\001\000\010\017\u015f\021\017\022\025\001" +
    "\001\000\002\001\001\000\010\017\u0160\021\017\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\303\001\001\000\002\001\001\000\010\017\043\021\017" +
    "\022\025\001\001\000\010\034\046\036\040\040\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\043" +
    "\021\017\022\025\001\001\000\004\030\052\001\001\000" +
    "\002\001\001\000\004\104\u016b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\u0171\017" +
    "\014\020\032\021\017\022\025\030\035\031\020\034\024" +
    "\035\012\036\040\040\013\041\u016f\001\001\000\002\001" +
    "\001\000\020\010\113\011\u017b\012\111\013\110\014\122" +
    "\015\117\016\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\113\011\u0174\012\111\013\110\014\122" +
    "\015\117\016\116\001\001\000\016\010\123\012\111\013" +
    "\110\014\122\015\117\016\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\123\012\111" +
    "\013\110\014\122\015\117\016\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\u018a\033" +
    "\u013c\001\001\000\004\105\u0184\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\u0171\017\014\020\032\021" +
    "\017\022\025\030\035\031\020\034\024\035\012\036\040" +
    "\040\013\041\u0187\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\u018e\001\001\000\004\033\u0140\001\001" +
    "\000\002\001\001\000\032\007\u0171\017\014\020\032\021" +
    "\017\022\025\030\035\031\020\034\024\035\012\036\040" +
    "\040\013\041\u018d\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\u0171\017\014\020\032\021\017\022\025" +
    "\030\035\031\020\034\024\035\012\036\040\040\013\041" +
    "\u0190\001\001\000\002\001\001\000\004\107\u0194\001\001" +
    "\000\032\007\u0171\017\014\020\032\021\017\022\025\030" +
    "\035\031\020\034\024\035\012\036\040\040\013\041\u0193" +
    "\001\001\000\002\001\001\000\032\007\u0171\017\014\020" +
    "\032\021\017\022\025\030\035\031\020\034\024\035\012" +
    "\036\040\040\013\041\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u019e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u01a3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u01a8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // parametroSubprograma ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en parametros de subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // parametroSubprograma ::= ID COMMA parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // parametroSubprograma ::= ID COLON tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // parametroSubprograma ::= ID COLON OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // parametrosSubprograma ::= parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // parametrosSubprograma ::= parametrosSubprograma SEMICOLON parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parametrosSubprograma ::= parametrosSubprograma parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // cuerpoProcedimiento ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en la estructura del cuerpo de un procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // cuerpoProcedimiento ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // cuerpoProcedimiento ::= declaracionesComunes BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // cuerpoProcedimiento ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // cuerpoProcedimiento ::= declaracionesComunes BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET error NT$36 cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$36 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // procedimiento ::= PROCEDURE ID LEFTBRACKET error NT$35 IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$35 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // procedimiento ::= PROCEDURE ID error NT$34 RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$34 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // procedimiento ::= PROCEDURE error NT$33 LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$33 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // procedimiento ::= PROCEDURE ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // cuerpoFuncion ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en la estructura del cuerpo de una funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // cuerpoFuncion ::= BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cuerpoFuncion ::= declaracionesComunes BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cuerpoFuncion ::= BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // cuerpoFuncion ::= declaracionesComunes BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo error NT$32 cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$32 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN error NT$31 IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$31 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET error NT$30 tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$30 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'return' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // funcion ::= FUNCTION ID LEFTBRACKET error NT$29 RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$29 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // funcion ::= FUNCTION ID error NT$28 RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$28 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // funcion ::= FUNCTION error NT$27 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$27 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funcion ::= ID error NT$26 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$26 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'function/procedure' en subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // funcion ::= FUNCTION ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // subprograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // subprograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // variable ::= ID COLON tipoVariable error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // variable ::= ID COLON error NT$25 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$25 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo/id en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // variable ::= ID error NT$24 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$24 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // variable ::= COLON error NT$23 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$23 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // variable ::= ID COMMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // variable ::= ID COLON tipoVariable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constanteSimbolica ::= ID COLON CONSTANT ASIGN error NT$22 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$22 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta valor entero/logico en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // constanteSimbolica ::= ID COLON CONSTANT error NT$21 tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$21 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':=' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constanteSimbolica ::= ID COLON error NT$20 ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$20 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'constant' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // constanteSimbolica ::= ID error NT$19 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$19 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // constanteSimbolica ::= COLON error NT$18 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$18 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constantesSimbolicas ::= constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // constantesSimbolicas ::= constantesSimbolicas constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametro ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Parametro no valido");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametro ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametro ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaSubprograma ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaSubprograma ::= ID LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaWhile ::= WHILE expresion LOOP sentencias END error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentenciaWhile ::= WHILE expresion LOOP sentencias error NT$17 LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$17 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaWhile ::= WHILE expresion error NT$16 sentencias END LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$16 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaIf ::= IF expresion THEN sentencias error NT$15 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$15 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en sentencia if");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaIf ::= IF expresion error NT$14 sentencias END IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$14 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("sentencia if mal formada");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaIf ::= IF expresion THEN sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenciaAsign ::= ID ASIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaAsign ::= ID ACCESS sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ')' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaES ::= PUT_LINE error NT$13 parametro RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$13 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaES ::= LEFTBRACKET error NT$12 parametro RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$12 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'Put_line' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= sentenciaSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= sentenciaES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencias ::= sentencias sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencias ::= sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= INTEGER COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= ID COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= ID LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion ACCESS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion NOTEQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion GREATERTHAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion MINUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoEstructurado ::= TYPE ID IS RECORD variables END error NT$11 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$11 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoEstructurado ::= TYPE ID IS RECORD variables error NT$10 RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$10 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoEstructurado ::= TYPE ID IS RECORD error NT$9 END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta cuerpo en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoEstructurado ::= TYPE ID IS error NT$8 variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$8 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoEstructurado ::= TYPE ID error NT$7 RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$7 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoEstructurado ::= TYPE error NT$6 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$6 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoEstructurado ::= ID error NT$5 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$5 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'type' en tipo estructurado"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= tipoEstructurado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipos ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipos ::= tipos tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoVariable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoVariable ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoConstante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionesComunes ::= tipos subprogramas variables 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionesComunes ::= subprogramas variables 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionesComunes ::= subprogramas tipos 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionesComunes ::= variables tipos 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionesComunes ::= subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionesComunes ::= variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionesComunes ::= tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracionesComunes ::= variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionesComunes ::= tipos subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionesComunes ::= tipos variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionesComunes ::= tipos variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionesGlobales ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionesGlobales ::= constantesSimbolicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionesGlobales ::= declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionesGlobales ::= constantesSimbolicas declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= declaracionesGlobales BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= declaracionesGlobales BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta 'is' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabecera ::= PROCEDURE ID LEFTBRACKET error NT$4 IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabecera ::= PROCEDURE ID error NT$3 RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cabecera ::= PROCEDURE error NT$2 LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cabecera ::= ID error NT$1 LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'procedure' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

