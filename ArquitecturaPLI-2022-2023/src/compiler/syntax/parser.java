
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 22 11:27:05 GMT 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 22 11:27:05 GMT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\043\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\007\000\002\004\003" +
    "\000\002\005\010\000\002\005\007\000\002\005\007\000" +
    "\002\005\006\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\007\005\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\023\003\000\002" +
    "\023\003\000\002\020\004\000\002\020\003\000\002\017" +
    "\003\000\002\017\003\000\002\021\012\000\002\044\002" +
    "\000\002\021\013\000\002\045\002\000\002\021\013\000" +
    "\002\046\002\000\002\021\013\000\002\047\002\000\002" +
    "\021\013\000\002\050\002\000\002\021\013\000\002\051" +
    "\002\000\002\021\013\000\002\052\002\000\002\021\013" +
    "\000\002\021\012\000\002\022\003\000\002\022\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\006\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\011\004\000\002" +
    "\011\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\012\006" +
    "\000\002\053\002\000\002\012\007\000\002\054\002\000" +
    "\002\012\007\000\002\012\005\000\002\013\005\000\002" +
    "\013\005\000\002\014\010\000\002\014\012\000\002\055" +
    "\002\000\002\014\011\000\002\056\002\000\002\014\011" +
    "\000\002\015\010\000\002\057\002\000\002\015\011\000" +
    "\002\060\002\000\002\015\011\000\002\015\010\000\002" +
    "\016\006\000\002\016\005\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\026\004\000\002\026\003" +
    "\000\002\025\010\000\002\061\002\000\002\025\011\000" +
    "\002\062\002\000\002\025\011\000\002\063\002\000\002" +
    "\025\011\000\002\064\002\000\002\025\011\000\002\065" +
    "\002\000\002\025\011\000\002\025\010\000\002\031\004" +
    "\000\002\031\003\000\002\030\006\000\002\030\005\000" +
    "\002\066\002\000\002\030\007\000\002\067\002\000\002" +
    "\030\007\000\002\070\002\000\002\030\007\000\002\030" +
    "\006\000\002\035\004\000\002\035\003\000\002\034\003" +
    "\000\002\034\003\000\002\036\013\000\002\036\012\000" +
    "\002\071\002\000\002\036\013\000\002\072\002\000\002" +
    "\036\013\000\002\073\002\000\002\036\013\000\002\074" +
    "\002\000\002\036\013\000\002\075\002\000\002\036\013" +
    "\000\002\076\002\000\002\036\013\000\002\037\013\000" +
    "\002\037\012\000\002\037\012\000\002\037\011\000\002" +
    "\040\011\000\002\040\010\000\002\077\002\000\002\040" +
    "\011\000\002\100\002\000\002\040\011\000\002\101\002" +
    "\000\002\040\011\000\002\041\010\000\002\041\007\000" +
    "\002\041\007\000\002\041\006\000\002\032\004\000\002" +
    "\032\005\000\002\032\003\000\002\033\006\000\002\033" +
    "\005\000\002\033\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0185\000\006\003\000\036\000\001\002\000\004\002" +
    "\u0187\001\002\000\006\003\010\036\006\001\002\000\004" +
    "\046\u0183\001\002\000\004\002\uffff\001\002\000\024\003" +
    "\ufffc\012\ufffc\022\ufffc\023\ufffc\030\ufffc\032\ufffc\036\ufffc" +
    "\044\ufffc\046\ufffc\001\002\000\024\003\036\012\023\022" +
    "\026\023\030\030\022\032\040\036\012\044\031\046\024" +
    "\001\002\000\004\046\u015d\001\002\000\012\022\uffee\030" +
    "\022\036\012\046\216\001\002\000\022\012\uffe6\022\uffe6" +
    "\023\uffe6\030\uffe6\032\uffe6\036\uffe6\044\uffe6\046\uffe6\001" +
    "\002\000\024\003\036\012\023\022\ufff5\023\030\030\022" +
    "\032\040\036\012\044\031\046\024\001\002\000\012\022" +
    "\uff86\030\uff86\036\uff86\046\uff86\001\002\000\004\002\ufffe" +
    "\001\002\000\030\003\uffe4\006\uffe4\011\uffe4\012\uffe4\022" +
    "\uffe4\023\uffe4\030\uffe4\032\uffe4\036\uffe4\044\uffe4\046\uffe4" +
    "\001\002\000\014\012\211\022\uffef\030\022\036\012\046" +
    "\266\001\002\000\004\046\u0126\001\002\000\004\003\u0120" +
    "\001\002\000\010\003\u0105\010\270\012\u0106\001\002\000" +
    "\012\022\uff88\030\uff88\036\uff88\046\uff88\001\002\000\016" +
    "\005\043\026\377\031\051\037\047\045\044\046\052\001" +
    "\002\000\030\003\uffe5\006\uffe5\011\uffe5\012\uffe5\022\uffe5" +
    "\023\uffe5\030\uffe5\032\uffe5\036\uffe5\044\uffe5\046\uffe5\001" +
    "\002\000\032\003\uffd2\006\uffd2\011\uffd2\012\uffd2\022\uffd2" +
    "\023\uffd2\030\uffd2\032\uffd2\033\uffd2\036\uffd2\044\uffd2\046" +
    "\uffd2\001\002\000\006\003\326\046\325\001\002\000\022" +
    "\012\211\022\ufff0\023\030\030\022\032\040\036\012\044" +
    "\031\046\212\001\002\000\004\022\042\001\002\000\024" +
    "\003\uffa1\012\uffa1\022\uffa1\023\uffa1\030\uffa1\032\uffa1\036" +
    "\uffa1\044\uffa1\046\uffa1\001\002\000\004\022\ufff6\001\002" +
    "\000\004\022\uffed\001\002\000\020\003\uff93\012\uff93\022" +
    "\uff93\026\uff93\030\uff93\036\uff93\046\uff93\001\002\000\032" +
    "\003\uffd3\006\uffd3\011\uffd3\012\uffd3\022\uffd3\023\uffd3\030" +
    "\uffd3\032\uffd3\033\uffd3\036\uffd3\044\uffd3\046\uffd3\001\002" +
    "\000\012\022\uff87\030\uff87\036\uff87\046\uff87\001\002\000" +
    "\016\005\043\026\055\031\051\037\047\045\044\046\052" +
    "\001\002\000\004\003\205\001\002\000\014\005\074\027" +
    "\103\032\075\043\077\046\104\001\002\000\004\011\uffbf" +
    "\001\002\000\004\011\uffc0\001\002\000\006\003\161\005" +
    "\160\001\002\000\004\011\157\001\002\000\014\005\074" +
    "\027\103\032\075\043\077\046\104\001\002\000\010\005" +
    "\070\017\067\020\071\001\002\000\004\011\uffbc\001\002" +
    "\000\004\011\uffbd\001\002\000\004\046\065\001\002\000" +
    "\016\005\043\026\061\031\051\037\047\045\044\046\052" +
    "\001\002\000\004\011\uffbe\001\002\000\004\011\064\001" +
    "\002\000\004\046\062\001\002\000\004\011\063\001\002" +
    "\000\004\002\ufffb\001\002\000\024\003\uffc1\005\uffc1\025" +
    "\uffc1\026\uffc1\031\uffc1\037\uffc1\041\uffc1\045\uffc1\046\uffc1" +
    "\001\002\000\004\011\066\001\002\000\004\002\ufff9\001" +
    "\002\000\014\005\074\027\103\032\075\043\077\046\104" +
    "\001\002\000\022\003\105\005\074\006\076\027\103\032" +
    "\075\043\077\046\104\047\101\001\002\000\004\046\072" +
    "\001\002\000\006\017\067\020\071\001\002\000\004\011" +
    "\uffb5\001\002\000\014\005\074\027\103\032\075\043\077" +
    "\046\104\001\002\000\032\003\uffc5\006\uffc5\010\131\011" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5" +
    "\034\uffc5\042\uffc5\001\002\000\004\011\uffa6\001\002\000" +
    "\030\003\uffc4\006\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\020\uffc4\021\uffc4\034\uffc4\042\uffc4\001\002\000" +
    "\004\006\130\001\002\000\006\006\uffa4\011\uffa4\001\002" +
    "\000\022\006\uffa5\011\uffa5\013\115\014\113\015\117\016" +
    "\116\020\120\021\114\001\002\000\030\003\uffc3\006\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\021" +
    "\uffc3\034\uffc3\042\uffc3\001\002\000\034\003\uffc6\005\107" +
    "\006\uffc6\010\106\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\020\uffc6\021\uffc6\034\uffc6\042\uffc6\001\002\000\006" +
    "\006\uffa3\011\uffa3\001\002\000\014\005\074\027\103\032" +
    "\075\043\077\046\104\001\002\000\016\005\074\006\110" +
    "\027\103\032\075\043\077\046\104\001\002\000\030\003" +
    "\uffcb\006\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\020\uffcb\021\uffcb\034\uffcb\042\uffcb\001\002\000\020\006" +
    "\112\013\115\014\113\015\117\016\116\020\120\021\114" +
    "\001\002\000\030\003\uffc9\006\uffc9\011\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\034\uffc9\042\uffc9" +
    "\001\002\000\014\005\074\027\103\032\075\043\077\046" +
    "\104\001\002\000\014\005\074\027\103\032\075\043\077" +
    "\046\104\001\002\000\014\005\074\027\103\032\075\043" +
    "\077\046\104\001\002\000\014\005\074\027\103\032\075" +
    "\043\077\046\104\001\002\000\014\005\074\027\103\032" +
    "\075\043\077\046\104\001\002\000\014\005\074\027\103" +
    "\032\075\043\077\046\104\001\002\000\030\003\uffcc\006" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc" +
    "\021\uffcc\034\uffcc\042\uffcc\001\002\000\030\003\uffcf\006" +
    "\uffcf\011\uffcf\013\115\014\113\015\uffcf\016\uffcf\020\120" +
    "\021\uffcf\034\uffcf\042\uffcf\001\002\000\030\003\uffce\006" +
    "\uffce\011\uffce\013\115\014\113\015\117\016\uffce\020\120" +
    "\021\uffce\034\uffce\042\uffce\001\002\000\030\003\uffd1\006" +
    "\uffd1\011\uffd1\013\uffd1\014\113\015\uffd1\016\uffd1\020\120" +
    "\021\uffd1\034\uffd1\042\uffd1\001\002\000\030\003\uffcd\006" +
    "\uffcd\011\uffcd\013\115\014\113\015\117\016\116\020\120" +
    "\021\uffcd\034\uffcd\042\uffcd\001\002\000\030\003\uffd0\006" +
    "\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\120" +
    "\021\uffd0\034\uffd0\042\uffd0\001\002\000\030\003\uffc8\006" +
    "\uffc8\011\uffc8\013\115\014\113\015\117\016\116\020\120" +
    "\021\114\034\uffc8\042\uffc8\001\002\000\004\011\uffa7\001" +
    "\002\000\014\005\074\027\103\032\075\043\077\046\104" +
    "\001\002\000\030\003\uffc7\006\uffc7\011\uffc7\013\115\014" +
    "\113\015\117\016\116\020\120\021\114\034\uffc7\042\uffc7" +
    "\001\002\000\020\006\134\013\115\014\113\015\117\016" +
    "\116\020\120\021\114\001\002\000\030\003\uffca\006\uffca" +
    "\011\uffca\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021" +
    "\uffca\034\uffca\042\uffca\001\002\000\020\011\uffb4\013\115" +
    "\014\113\015\117\016\116\020\120\021\114\001\002\000" +
    "\022\003\137\013\115\014\113\015\117\016\116\020\120" +
    "\021\114\042\140\001\002\000\014\005\uffb1\031\uffb1\037" +
    "\uffb1\045\uffb1\046\uffb1\001\002\000\014\005\043\031\051" +
    "\037\047\045\044\046\052\001\002\000\022\003\143\005" +
    "\043\025\142\026\144\031\051\037\047\045\044\046\052" +
    "\001\002\000\014\005\043\031\051\037\047\045\044\046" +
    "\052\001\002\000\004\031\uffaf\001\002\000\004\031\145" +
    "\001\002\000\004\011\uffb3\001\002\000\004\031\147\001" +
    "\002\000\004\011\uffae\001\002\000\016\005\043\026\151" +
    "\031\051\037\047\045\044\046\052\001\002\000\004\031" +
    "\152\001\002\000\004\011\uffb2\001\002\000\014\005\043" +
    "\031\051\037\047\045\044\046\052\001\002\000\016\005" +
    "\043\026\155\031\051\037\047\045\044\046\052\001\002" +
    "\000\004\031\156\001\002\000\004\011\uffb0\001\002\000" +
    "\024\003\uffc2\005\uffc2\025\uffc2\026\uffc2\031\uffc2\037\uffc2" +
    "\041\uffc2\045\uffc2\046\uffc2\001\002\000\020\003\105\005" +
    "\074\027\103\032\075\043\077\046\104\047\101\001\002" +
    "\000\020\003\uffb8\005\uffb8\027\uffb8\032\uffb8\043\uffb8\046" +
    "\uffb8\047\uffb8\001\002\000\020\003\105\005\074\027\103" +
    "\032\075\043\077\046\104\047\101\001\002\000\004\006" +
    "\164\001\002\000\004\011\uffb7\001\002\000\006\006\166" +
    "\011\uffb6\001\002\000\004\011\uffbb\001\002\000\022\003" +
    "\170\013\115\014\113\015\117\016\116\020\120\021\114" +
    "\034\171\001\002\000\014\005\uffac\031\uffac\037\uffac\045" +
    "\uffac\046\uffac\001\002\000\014\005\043\031\051\037\047" +
    "\045\044\046\052\001\002\000\020\003\173\005\043\026" +
    "\174\031\051\037\047\045\044\046\052\001\002\000\004" +
    "\034\uffaa\001\002\000\006\003\175\034\176\001\002\000" +
    "\004\011\uffa8\001\002\000\004\011\uffad\001\002\000\004" +
    "\034\200\001\002\000\004\011\uffa9\001\002\000\014\005" +
    "\043\031\051\037\047\045\044\046\052\001\002\000\016" +
    "\005\043\026\203\031\051\037\047\045\044\046\052\001" +
    "\002\000\004\034\204\001\002\000\004\011\uffab\001\002" +
    "\000\020\003\uffba\005\uffba\027\uffba\032\uffba\043\uffba\046" +
    "\uffba\047\uffba\001\002\000\020\003\105\005\074\027\103" +
    "\032\075\043\077\046\104\047\101\001\002\000\004\006" +
    "\210\001\002\000\004\011\uffb9\001\002\000\004\003\321" +
    "\001\002\000\010\003\311\010\270\012\272\001\002\000" +
    "\022\012\uffe7\022\uffe7\023\uffe7\030\uffe7\032\uffe7\036\uffe7" +
    "\044\uffe7\046\uffe7\001\002\000\014\012\211\022\ufff3\030" +
    "\022\036\012\046\266\001\002\000\012\022\ufff2\030\022" +
    "\036\012\046\216\001\002\000\004\003\220\001\002\000" +
    "\012\022\uff89\030\uff89\036\uff89\046\uff89\001\002\000\004" +
    "\005\uff83\001\002\000\004\005\222\001\002\000\004\006" +
    "\223\001\002\000\004\041\224\001\002\000\006\023\030" +
    "\032\040\001\002\000\004\033\226\001\002\000\024\003" +
    "\036\012\211\022\230\023\030\030\022\032\040\036\012" +
    "\044\031\046\212\001\002\000\012\022\uff82\030\uff82\036" +
    "\uff82\046\uff82\001\002\000\016\005\043\031\051\037\047" +
    "\041\250\045\044\046\052\001\002\000\004\022\232\001" +
    "\002\000\016\005\043\031\051\037\047\041\233\045\044" +
    "\046\052\001\002\000\014\005\074\027\103\032\075\043" +
    "\077\046\104\001\002\000\016\005\043\031\051\037\047" +
    "\041\235\045\044\046\052\001\002\000\014\005\074\027" +
    "\103\032\075\043\077\046\104\001\002\000\020\011\237" +
    "\013\115\014\113\015\117\016\116\020\120\021\114\001" +
    "\002\000\004\026\240\001\002\000\004\046\241\001\002" +
    "\000\004\011\242\001\002\000\012\022\uff77\030\uff77\036" +
    "\uff77\046\uff77\001\002\000\020\011\244\013\115\014\113" +
    "\015\117\016\116\020\120\021\114\001\002\000\004\026" +
    "\245\001\002\000\004\046\246\001\002\000\004\011\247" +
    "\001\002\000\012\022\uff75\030\uff75\036\uff75\046\uff75\001" +
    "\002\000\014\005\074\027\103\032\075\043\077\046\104" +
    "\001\002\000\016\005\043\031\051\037\047\041\252\045" +
    "\044\046\052\001\002\000\014\005\074\027\103\032\075" +
    "\043\077\046\104\001\002\000\020\011\254\013\115\014" +
    "\113\015\117\016\116\020\120\021\114\001\002\000\004" +
    "\026\255\001\002\000\004\046\256\001\002\000\004\011" +
    "\257\001\002\000\012\022\uff76\030\uff76\036\uff76\046\uff76" +
    "\001\002\000\020\011\261\013\115\014\113\015\117\016" +
    "\116\020\120\021\114\001\002\000\004\026\262\001\002" +
    "\000\004\046\263\001\002\000\004\011\264\001\002\000" +
    "\012\022\uff74\030\uff74\036\uff74\046\uff74\001\002\000\020" +
    "\003\uff94\012\uff94\022\uff94\026\uff94\030\uff94\036\uff94\046" +
    "\uff94\001\002\000\010\003\271\010\270\012\272\001\002" +
    "\000\012\022\ufff4\030\022\036\012\046\216\001\002\000" +
    "\006\012\211\046\306\001\002\000\012\005\uff83\023\uff8e" +
    "\032\uff8e\046\uff8e\001\002\000\012\003\274\023\030\032" +
    "\040\046\273\001\002\000\006\003\uffe8\011\uffe8\001\002" +
    "\000\004\011\uff8c\001\002\000\006\003\uffe9\011\uffe9\001" +
    "\002\000\006\003\300\011\277\001\002\000\020\003\uff92" +
    "\012\uff92\022\uff92\026\uff92\030\uff92\036\uff92\046\uff92\001" +
    "\002\000\020\003\uff8a\012\uff8a\022\uff8a\026\uff8a\030\uff8a" +
    "\036\uff8a\046\uff8a\001\002\000\004\011\302\001\002\000" +
    "\020\003\uff8b\012\uff8b\022\uff8b\026\uff8b\030\uff8b\036\uff8b" +
    "\046\uff8b\001\002\000\010\023\030\032\040\046\273\001" +
    "\002\000\004\011\305\001\002\000\020\003\uff8d\012\uff8d" +
    "\022\uff8d\026\uff8d\030\uff8d\036\uff8d\046\uff8d\001\002\000" +
    "\010\003\310\010\270\012\272\001\002\000\020\003\uff91" +
    "\012\uff91\022\uff91\026\uff91\030\uff91\036\uff91\046\uff91\001" +
    "\002\000\010\023\uff8e\032\uff8e\046\uff8e\001\002\000\014" +
    "\005\uff83\023\uff8e\032\uff8e\033\uffe2\046\uff8e\001\002\000" +
    "\004\033\313\001\002\000\004\040\314\001\002\000\006" +
    "\012\211\046\306\001\002\000\010\012\211\026\316\046" +
    "\306\001\002\000\004\040\317\001\002\000\004\011\320" +
    "\001\002\000\030\003\uffe1\006\uffe1\011\uffe1\012\uffe1\022" +
    "\uffe1\023\uffe1\030\uffe1\032\uffe1\036\uffe1\044\uffe1\046\uffe1" +
    "\001\002\000\010\023\uff90\032\uff90\046\uff90\001\002\000" +
    "\010\023\030\032\040\046\273\001\002\000\004\011\324" +
    "\001\002\000\020\003\uff8f\012\uff8f\022\uff8f\026\uff8f\030" +
    "\uff8f\036\uff8f\046\uff8f\001\002\000\006\003\336\033\337" +
    "\001\002\000\004\033\uffe0\001\002\000\004\033\330\001" +
    "\002\000\004\040\331\001\002\000\006\012\211\046\306" +
    "\001\002\000\010\012\211\026\333\046\306\001\002\000" +
    "\004\040\334\001\002\000\004\011\335\001\002\000\030" +
    "\003\uffdf\006\uffdf\011\uffdf\012\uffdf\022\uffdf\023\uffdf\030" +
    "\uffdf\032\uffdf\036\uffdf\044\uffdf\046\uffdf\001\002\000\004" +
    "\040\uffde\001\002\000\006\003\341\040\340\001\002\000" +
    "\010\003\347\012\211\046\306\001\002\000\006\012\uffdc" +
    "\046\uffdc\001\002\000\006\012\211\046\306\001\002\000" +
    "\010\012\211\026\344\046\306\001\002\000\004\040\345" +
    "\001\002\000\004\011\346\001\002\000\030\003\uffdb\006" +
    "\uffdb\011\uffdb\012\uffdb\022\uffdb\023\uffdb\030\uffdb\032\uffdb" +
    "\036\uffdb\044\uffdb\046\uffdb\001\002\000\004\026\uffda\001" +
    "\002\000\012\003\351\012\211\026\352\046\306\001\002" +
    "\000\004\040\uffd8\001\002\000\006\003\354\040\353\001" +
    "\002\000\006\003\360\011\357\001\002\000\004\011\uffd6" +
    "\001\002\000\004\011\356\001\002\000\030\003\uffd5\006" +
    "\uffd5\011\uffd5\012\uffd5\022\uffd5\023\uffd5\030\uffd5\032\uffd5" +
    "\036\uffd5\044\uffd5\046\uffd5\001\002\000\030\003\uffe3\006" +
    "\uffe3\011\uffe3\012\uffe3\022\uffe3\023\uffe3\030\uffe3\032\uffe3" +
    "\036\uffe3\044\uffe3\046\uffe3\001\002\000\030\003\uffd4\006" +
    "\uffd4\011\uffd4\012\uffd4\022\uffd4\023\uffd4\030\uffd4\032\uffd4" +
    "\036\uffd4\044\uffd4\046\uffd4\001\002\000\004\040\362\001" +
    "\002\000\004\011\363\001\002\000\030\003\uffd7\006\uffd7" +
    "\011\uffd7\012\uffd7\022\uffd7\023\uffd7\030\uffd7\032\uffd7\036" +
    "\uffd7\044\uffd7\046\uffd7\001\002\000\004\026\365\001\002" +
    "\000\004\040\366\001\002\000\004\011\367\001\002\000" +
    "\030\003\uffd9\006\uffd9\011\uffd9\012\uffd9\022\uffd9\023\uffd9" +
    "\030\uffd9\032\uffd9\036\uffd9\044\uffd9\046\uffd9\001\002\000" +
    "\004\040\371\001\002\000\006\012\211\046\306\001\002" +
    "\000\010\012\211\026\373\046\306\001\002\000\004\040" +
    "\374\001\002\000\004\011\375\001\002\000\030\003\uffdd" +
    "\006\uffdd\011\uffdd\012\uffdd\022\uffdd\023\uffdd\030\uffdd\032" +
    "\uffdd\036\uffdd\044\uffdd\046\uffdd\001\002\000\016\005\043" +
    "\026\u0102\031\051\037\047\045\044\046\052\001\002\000" +
    "\004\046\u0100\001\002\000\004\011\u0101\001\002\000\004" +
    "\002\ufff8\001\002\000\004\046\u0103\001\002\000\004\011" +
    "\u0104\001\002\000\004\002\ufffa\001\002\000\016\005\uff83" +
    "\023\uff8e\024\uff9d\032\uff8e\033\uffe2\046\uff8e\001\002\000" +
    "\014\003\u0108\023\030\024\u0107\032\040\046\273\001\002" +
    "\000\006\003\u0111\017\u0110\001\002\000\006\011\uff8c\017" +
    "\uff9b\001\002\000\004\017\u010a\001\002\000\010\027\u010e" +
    "\032\u010b\043\u010d\001\002\000\006\003\uffea\011\uffea\001" +
    "\002\000\004\011\u010f\001\002\000\006\003\uffec\011\uffec" +
    "\001\002\000\006\003\uffeb\011\uffeb\001\002\000\024\003" +
    "\uff9a\012\uff9a\022\uff9a\023\uff9a\030\uff9a\032\uff9a\036\uff9a" +
    "\044\uff9a\046\uff9a\001\002\000\012\003\u0116\027\u010e\032" +
    "\u010b\043\u010d\001\002\000\010\027\uff99\032\uff99\043\uff99" +
    "\001\002\000\010\027\u010e\032\u010b\043\u010d\001\002\000" +
    "\004\011\u0114\001\002\000\024\003\uff98\012\uff98\022\uff98" +
    "\023\uff98\030\uff98\032\uff98\036\uff98\044\uff98\046\uff98\001" +
    "\002\000\006\003\u011a\011\u0119\001\002\000\004\011\uff97" +
    "\001\002\000\004\011\u0118\001\002\000\024\003\uff96\012" +
    "\uff96\022\uff96\023\uff96\030\uff96\032\uff96\036\uff96\044\uff96" +
    "\046\uff96\001\002\000\024\003\uffa0\012\uffa0\022\uffa0\023" +
    "\uffa0\030\uffa0\032\uffa0\036\uffa0\044\uffa0\046\uffa0\001\002" +
    "\000\024\003\uff95\012\uff95\022\uff95\023\uff95\030\uff95\032" +
    "\uff95\036\uff95\044\uff95\046\uff95\001\002\000\004\024\u011c" +
    "\001\002\000\004\017\u011d\001\002\000\010\027\u010e\032" +
    "\u010b\043\u010d\001\002\000\004\011\u011f\001\002\000\024" +
    "\003\uff9c\012\uff9c\022\uff9c\023\uff9c\030\uff9c\032\uff9c\036" +
    "\uff9c\044\uff9c\046\uff9c\001\002\000\012\023\uff90\024\uff9f" +
    "\032\uff90\046\uff90\001\002\000\004\024\u0122\001\002\000" +
    "\004\017\u0123\001\002\000\010\027\u010e\032\u010b\043\u010d" +
    "\001\002\000\004\011\u0125\001\002\000\024\003\uff9e\012" +
    "\uff9e\022\uff9e\023\uff9e\030\uff9e\032\uff9e\036\uff9e\044\uff9e" +
    "\046\uff9e\001\002\000\006\003\u0128\005\u0127\001\002\000" +
    "\010\003\u0131\006\u0130\046\u012f\001\002\000\004\006\uff81" +
    "\001\002\000\004\006\u012a\001\002\000\004\041\u012b\001" +
    "\002\000\006\023\030\032\040\001\002\000\004\033\u012d" +
    "\001\002\000\024\003\036\012\211\022\230\023\030\030" +
    "\022\032\040\036\012\044\031\046\212\001\002\000\012" +
    "\022\uff80\030\uff80\036\uff80\046\uff80\001\002\000\006\010" +
    "\u0152\012\u0153\001\002\000\006\003\u0142\041\u0143\001\002" +
    "\000\014\003\uff61\006\uff61\011\uff61\041\uff7f\046\uff61\001" +
    "\002\000\012\003\u0136\006\u0134\011\u0135\046\u012f\001\002" +
    "\000\012\003\uff65\006\uff65\011\uff65\046\uff65\001\002\000" +
    "\004\041\u0139\001\002\000\006\003\u0136\046\u012f\001\002" +
    "\000\012\003\uff61\006\uff61\011\uff61\046\uff61\001\002\000" +
    "\012\003\uff67\006\uff67\011\uff67\046\uff67\001\002\000\012" +
    "\003\uff66\006\uff66\011\uff66\046\uff66\001\002\000\006\023" +
    "\030\032\040\001\002\000\004\033\u013b\001\002\000\024" +
    "\003\036\012\211\022\230\023\030\030\022\032\040\036" +
    "\012\044\031\046\212\001\002\000\012\022\uff85\030\uff85" +
    "\036\uff85\046\uff85\001\002\000\004\041\u013e\001\002\000" +
    "\006\023\030\032\040\001\002\000\004\033\u0140\001\002" +
    "\000\024\003\036\012\211\022\230\023\030\030\022\032" +
    "\040\036\012\044\031\046\212\001\002\000\012\022\uff7e" +
    "\030\uff7e\036\uff7e\046\uff7e\001\002\000\006\023\uff7d\032" +
    "\uff7d\001\002\000\010\003\u0144\023\030\032\040\001\002" +
    "\000\004\033\uff7b\001\002\000\006\003\u0146\033\u0147\001" +
    "\002\000\024\003\uff79\012\uff79\022\uff79\023\uff79\030\uff79" +
    "\032\uff79\036\uff79\044\uff79\046\uff79\001\002\000\024\003" +
    "\036\012\211\022\230\023\030\030\022\032\040\036\012" +
    "\044\031\046\212\001\002\000\012\022\uff84\030\uff84\036" +
    "\uff84\046\uff84\001\002\000\024\003\036\012\211\022\230" +
    "\023\030\030\022\032\040\036\012\044\031\046\212\001" +
    "\002\000\012\022\uff78\030\uff78\036\uff78\046\uff78\001\002" +
    "\000\004\033\u014c\001\002\000\024\003\036\012\211\022" +
    "\230\023\030\030\022\032\040\036\012\044\031\046\212" +
    "\001\002\000\012\022\uff7a\030\uff7a\036\uff7a\046\uff7a\001" +
    "\002\000\006\023\030\032\040\001\002\000\004\033\u0150" +
    "\001\002\000\024\003\036\012\211\022\230\023\030\030" +
    "\022\032\040\036\012\044\031\046\212\001\002\000\012" +
    "\022\uff7c\030\uff7c\036\uff7c\046\uff7c\001\002\000\006\003" +
    "\u0136\046\u012f\001\002\000\014\023\030\032\040\035\u0155" +
    "\044\031\046\u0154\001\002\000\004\003\u0158\001\002\000" +
    "\012\023\030\032\040\044\031\046\u0154\001\002\000\012" +
    "\003\uff63\006\uff63\011\uff63\046\uff63\001\002\000\012\003" +
    "\uff64\006\uff64\011\uff64\046\uff64\001\002\000\004\033\uffe2" +
    "\001\002\000\012\003\uff62\006\uff62\011\uff62\046\uff62\001" +
    "\002\000\012\022\ufff1\030\022\036\012\046\216\001\002" +
    "\000\024\003\uffa2\012\uffa2\022\uffa2\023\uffa2\030\uffa2\032" +
    "\uffa2\036\uffa2\044\uffa2\046\uffa2\001\002\000\004\022\ufff7" +
    "\001\002\000\006\003\u015f\005\u015e\001\002\000\010\003" +
    "\u0176\006\u0175\046\u012f\001\002\000\004\006\uff71\001\002" +
    "\000\004\006\u0161\001\002\000\004\033\u0162\001\002\000" +
    "\024\003\036\012\211\022\u0164\023\030\030\022\032\040" +
    "\036\012\044\031\046\212\001\002\000\012\022\uff70\030" +
    "\uff70\036\uff70\046\uff70\001\002\000\016\005\043\026\u016e" +
    "\031\051\037\047\045\044\046\052\001\002\000\004\022" +
    "\u0166\001\002\000\016\005\043\026\u0168\031\051\037\047" +
    "\045\044\046\052\001\002\000\016\005\043\026\u016b\031" +
    "\051\037\047\045\044\046\052\001\002\000\004\046\u0169" +
    "\001\002\000\004\011\u016a\001\002\000\012\022\uff69\030" +
    "\uff69\036\uff69\046\uff69\001\002\000\004\046\u016c\001\002" +
    "\000\004\011\u016d\001\002\000\012\022\uff6b\030\uff6b\036" +
    "\uff6b\046\uff6b\001\002\000\004\046\u0173\001\002\000\016" +
    "\005\043\026\u0170\031\051\037\047\045\044\046\052\001" +
    "\002\000\004\046\u0171\001\002\000\004\011\u0172\001\002" +
    "\000\012\022\uff6a\030\uff6a\036\uff6a\046\uff6a\001\002\000" +
    "\004\011\u0174\001\002\000\012\022\uff68\030\uff68\036\uff68" +
    "\046\uff68\001\002\000\006\003\u017e\033\u017f\001\002\000" +
    "\014\003\uff61\006\uff61\011\uff61\033\uff6f\046\uff61\001\002" +
    "\000\012\003\u0136\006\u0178\011\u0135\046\u012f\001\002\000" +
    "\004\033\u0179\001\002\000\024\003\036\012\211\022\u0164" +
    "\023\030\030\022\032\040\036\012\044\031\046\212\001" +
    "\002\000\012\022\uff73\030\uff73\036\uff73\046\uff73\001\002" +
    "\000\004\033\u017c\001\002\000\024\003\036\012\211\022" +
    "\u0164\023\030\030\022\032\040\036\012\044\031\046\212" +
    "\001\002\000\012\022\uff6e\030\uff6e\036\uff6e\046\uff6e\001" +
    "\002\000\024\003\uff6d\012\uff6d\022\uff6d\023\uff6d\030\uff6d" +
    "\032\uff6d\036\uff6d\044\uff6d\046\uff6d\001\002\000\024\003" +
    "\036\012\211\022\u0164\023\030\030\022\032\040\036\012" +
    "\044\031\046\212\001\002\000\012\022\uff72\030\uff72\036" +
    "\uff72\046\uff72\001\002\000\024\003\036\012\211\022\u0164" +
    "\023\030\030\022\032\040\036\012\044\031\046\212\001" +
    "\002\000\012\022\uff6c\030\uff6c\036\uff6c\046\uff6c\001\002" +
    "\000\004\005\u0184\001\002\000\004\006\u0185\001\002\000" +
    "\004\033\u0186\001\002\000\024\003\ufffd\012\ufffd\022\ufffd" +
    "\023\ufffd\030\ufffd\032\ufffd\036\ufffd\044\ufffd\046\ufffd\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0185\000\006\002\003\043\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\016\006" +
    "\032\007\034\017\013\020\031\021\017\022\026\025\033" +
    "\026\014\030\036\031\020\034\024\035\012\036\040\040" +
    "\015\001\001\000\002\001\001\000\010\034\216\036\040" +
    "\040\015\001\001\000\002\001\001\000\032\007\u015b\017" +
    "\013\020\031\021\017\022\026\025\u015a\030\036\031\020" +
    "\034\024\035\012\036\040\040\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\030\264" +
    "\034\024\035\u0159\036\040\040\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\047\011\375\012\045\013\044\014\056\015" +
    "\053\016\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\212\021\017\022\026\030" +
    "\036\031\213\034\024\035\214\036\040\040\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\047\011\055\012\045\013\044\014" +
    "\056\015\053\016\052\001\001\000\002\001\001\000\004" +
    "\027\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\057\012\045\013\044\014\056" +
    "\015\053\016\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\134\001\001\000\006\027\101\042\077\001\001" +
    "\000\004\013\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\126\001\001\000\004\027" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\125\001\001\000\004\027\124\001" +
    "\001\000\004\027\123\001\001\000\004\027\122\001\001" +
    "\000\004\027\121\001\001\000\004\027\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\152\001\001\000\020" +
    "\010\047\011\140\012\045\013\044\014\056\015\053\016" +
    "\052\001\001\000\016\010\057\012\045\013\044\014\056" +
    "\015\053\016\052\001\001\000\020\010\047\011\147\012" +
    "\045\013\044\014\056\015\053\016\052\001\001\000\004" +
    "\056\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\057\012\045" +
    "\013\044\014\056\015\053\016\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\047\011\153\012\045" +
    "\013\044\014\056\015\053\016\052\001\001\000\016\010" +
    "\057\012\045\013\044\014\056\015\053\016\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\101\042\164\001\001\000\004\054\161\001\001" +
    "\000\006\027\101\042\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\200\001\001\000\020\010\047\011" +
    "\171\012\045\013\044\014\056\015\053\016\052\001\001" +
    "\000\016\010\057\012\045\013\044\014\056\015\053\016" +
    "\052\001\001\000\004\060\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\047\011\201\012\045\013\044" +
    "\014\056\015\053\016\052\001\001\000\016\010\057\012" +
    "\045\013\044\014\056\015\053\016\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\205\001\001\000" +
    "\006\027\101\042\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\264\034\024\035\266\036\040\040\015" +
    "\001\001\000\010\034\216\036\040\040\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\224\001\001\000\002\001\001\000\032\007\230" +
    "\017\013\020\031\021\017\022\026\030\036\031\020\034" +
    "\024\035\012\036\040\037\226\040\015\001\001\000\002" +
    "\001\001\000\020\010\047\011\250\012\045\013\044\014" +
    "\056\015\053\016\052\001\001\000\002\001\001\000\020" +
    "\010\047\011\233\012\045\013\044\014\056\015\053\016" +
    "\052\001\001\000\004\027\242\001\001\000\016\010\057" +
    "\012\045\013\044\014\056\015\053\016\052\001\001\000" +
    "\004\027\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\257\001\001\000" +
    "\016\010\057\012\045\013\044\014\056\015\053\016\052" +
    "\001\001\000\004\027\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\216\036\040\040\015\001" +
    "\001\000\004\030\306\001\001\000\006\067\302\071\220" +
    "\001\001\000\006\022\274\023\275\001\001\000\002\001" +
    "\001\000\004\070\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\274\023\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\302\001\001\000\010\044\311" +
    "\067\302\071\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\036\031\314\001\001\000\004\030\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\321\001\001\000\006\022\274\023\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\036\031\331\001\001\000\004\030" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\367\001\001\000\002\001\001\000" +
    "\006\030\036\031\347\001\001\000\004\047\341\001\001" +
    "\000\006\030\036\031\342\001\001\000\004\030\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\363\001\001\000\004\030\264\001\001\000" +
    "\004\051\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\036\031\371\001\001\000\004\030" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\057\012\045\013\044\014\056\015" +
    "\053\016\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\044\311\062\u011a\067\302\071\220" +
    "\001\001\000\006\022\274\023\275\001\001\000\002\001" +
    "\001\000\006\063\u0108\070\300\001\001\000\002\001\001" +
    "\000\004\024\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0114\001\001\000\004\064\u0111\001\001\000" +
    "\004\024\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\u0120" +
    "\066\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\u0131\033\u0132\001\001\000" +
    "\004\072\u0128\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u012b\001\001\000\002\001\001\000\032\007" +
    "\230\017\013\020\031\021\017\022\026\030\036\031\020" +
    "\034\024\035\012\036\040\037\u012d\040\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\u013c\001\001\000\004\033\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u0139\001\001\000\002\001\001\000\032\007\230\017\013" +
    "\020\031\021\017\022\026\030\036\031\020\034\024\035" +
    "\012\036\040\037\u013b\040\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u013e\001\001\000\002\001" +
    "\001\000\032\007\230\017\013\020\031\021\017\022\026" +
    "\030\036\031\020\034\024\035\012\036\040\037\u0140\040" +
    "\015\001\001\000\002\001\001\000\004\074\u014d\001\001" +
    "\000\004\022\u0144\001\001\000\004\075\u014a\001\001\000" +
    "\002\001\001\000\004\076\u0148\001\001\000\032\007\230" +
    "\017\013\020\031\021\017\022\026\030\036\031\020\034" +
    "\024\035\012\036\040\037\u0147\040\015\001\001\000\002" +
    "\001\001\000\032\007\230\017\013\020\031\021\017\022" +
    "\026\030\036\031\020\034\024\035\012\036\040\037\u0149" +
    "\040\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\230\017\013\020\031\021\017\022\026\030\036" +
    "\031\020\034\024\035\012\036\040\037\u014c\040\015\001" +
    "\001\000\002\001\001\000\004\022\u014e\001\001\000\002" +
    "\001\001\000\032\007\230\017\013\020\031\021\017\022" +
    "\026\030\036\031\020\034\024\035\012\036\040\037\u0150" +
    "\040\015\001\001\000\002\001\001\000\004\033\u0158\001" +
    "\001\000\010\017\u0155\021\017\022\026\001\001\000\002" +
    "\001\001\000\010\017\u0156\021\017\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\311\001\001" +
    "\000\002\001\001\000\010\034\216\036\040\040\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\u0176\033\u0132\001\001\000\004\077\u015f\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\u0164" +
    "\017\013\020\031\021\017\022\026\030\036\031\020\034" +
    "\024\035\012\036\040\040\015\041\u0162\001\001\000\002" +
    "\001\001\000\020\010\047\011\u016e\012\045\013\044\014" +
    "\056\015\053\016\052\001\001\000\002\001\001\000\020" +
    "\010\047\011\u0166\012\045\013\044\014\056\015\053\016" +
    "\052\001\001\000\016\010\057\012\045\013\044\014\056" +
    "\015\053\016\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\057\012" +
    "\045\013\044\014\056\015\053\016\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\100\u017a" +
    "\001\001\000\004\033\u0136\001\001\000\002\001\001\000" +
    "\032\007\u0164\017\013\020\031\021\017\022\026\030\036" +
    "\031\020\034\024\035\012\036\040\040\015\041\u0179\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\u0164" +
    "\017\013\020\031\021\017\022\026\030\036\031\020\034" +
    "\024\035\012\036\040\040\015\041\u017c\001\001\000\002" +
    "\001\001\000\004\101\u0180\001\001\000\032\007\u0164\017" +
    "\013\020\031\021\017\022\026\030\036\031\020\034\024" +
    "\035\012\036\040\040\015\041\u017f\001\001\000\002\001" +
    "\001\000\032\007\u0164\017\013\020\031\021\017\022\026" +
    "\030\036\031\020\034\024\035\012\036\040\040\015\041" +
    "\u0181\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // parametroSubprograma ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en parametros de subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // parametroSubprograma ::= ID COMMA parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // parametroSubprograma ::= ID COLON tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parametroSubprograma ::= ID COLON OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // parametrosSubprograma ::= parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // parametrosSubprograma ::= parametrosSubprograma SEMICOLON parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // parametrosSubprograma ::= parametrosSubprograma parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cuerpoProcedimiento ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // cuerpoProcedimiento ::= declaracionesComunes BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // cuerpoProcedimiento ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // cuerpoProcedimiento ::= declaracionesComunes BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET error NT$30 cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$30 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // procedimiento ::= PROCEDURE ID LEFTBRACKET error NT$29 IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$29 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // procedimiento ::= PROCEDURE ID error NT$28 RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$28 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedimiento ::= PROCEDURE ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpoFuncion ::= BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cuerpoFuncion ::= declaracionesComunes BEGIN RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cuerpoFuncion ::= BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cuerpoFuncion ::= declaracionesComunes BEGIN sentencias RETURN expresion SEMICOLON END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo error NT$27 cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$27 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN error NT$26 IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$26 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET error NT$25 tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$25 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'return' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // funcion ::= FUNCTION ID LEFTBRACKET error NT$24 RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$24 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ')' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // funcion ::= FUNCTION ID error NT$23 RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$23 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // funcion ::= ID error NT$22 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$22 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'function/procedure' en subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funcion ::= FUNCTION ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // subprograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // subprograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variable ::= ID COLON tipoVariable error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // variable ::= ID COLON error NT$21 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$21 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta tipo primitivo/id en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variable ::= ID error NT$20 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$20 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // variable ::= COLON error NT$19 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$19 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variable ::= ID COMMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variable ::= ID COLON tipoVariable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // constanteSimbolica ::= ID COLON CONSTANT ASIGN error NT$18 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$18 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta valor entero/logico en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // constanteSimbolica ::= ID COLON CONSTANT error NT$17 tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$17 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':=' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constanteSimbolica ::= ID COLON error NT$16 ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$16 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'constant' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // constanteSimbolica ::= ID error NT$15 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$15 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ':' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // constanteSimbolica ::= COLON error NT$14 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$14 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // constantesSimbolicas ::= constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // constantesSimbolicas ::= constantesSimbolicas constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametro ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Parametro no valido");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametro ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametro ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaSubprograma ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaSubprograma ::= ID LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenciaWhile ::= WHILE expresion LOOP sentencias END error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaWhile ::= WHILE expresion LOOP sentencias error NT$13 LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$13 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaWhile ::= WHILE expresion error NT$12 sentencias END LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$12 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaIf ::= IF expresion THEN sentencias error NT$11 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$11 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en sentencia if");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaIf ::= IF expresion error NT$10 sentencias END IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$10 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("sentencia if mal formada");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaIf ::= IF expresion THEN sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaAsign ::= ID ASIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaAsign ::= ID ACCESS sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ')' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaES ::= PUT_LINE error NT$9 parametro RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$9 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta '(' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentenciaES ::= LEFTBRACKET error NT$8 parametro RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$8 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'Put_line' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= sentenciaSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencias ::= sentencias sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencias ::= sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= INTEGER COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= ID COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ID LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion ACCESS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion NOTEQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion GREATERTHAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion MINUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Falta ';' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoEstructurado ::= TYPE ID IS RECORD variables END error NT$7 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoEstructurado ::= TYPE ID IS RECORD variables error NT$6 RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'end' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoEstructurado ::= TYPE ID IS RECORD error NT$5 END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$5 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta cuerpo en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoEstructurado ::= TYPE ID IS error NT$4 variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoEstructurado ::= TYPE ID error NT$3 RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'is' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoEstructurado ::= TYPE error NT$2 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta ID en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoEstructurado ::= ID error NT$1 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Falta 'type' en tipo estructurado"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= tipoEstructurado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipos ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipos ::= tipos tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoVariable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoVariable ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoConstante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipoConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionesComunes ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionesComunes ::= subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionesComunes ::= variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionesComunes ::= tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionesComunes ::= variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionesComunes ::= tipos subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionesComunes ::= tipos variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionesComunes ::= tipos variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesComunes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionesGlobales ::= constantesSimbolicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionesGlobales ::= declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionesGlobales ::= constantesSimbolicas declaracionesComunes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesGlobales",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= declaracionesGlobales BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= declaracionesGlobales BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cabecera ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Error en la cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

