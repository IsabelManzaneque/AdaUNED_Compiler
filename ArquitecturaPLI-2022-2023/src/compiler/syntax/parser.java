
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 04 10:24:19 GMT 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 04 10:24:19 GMT 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\277\000\002\002\004\000\002\052\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\007\000\002\053\002" +
    "\000\002\004\010\000\002\054\002\000\002\004\010\000" +
    "\002\055\002\000\002\004\010\000\002\056\002\000\002" +
    "\004\010\000\002\004\007\000\002\005\010\000\002\005" +
    "\007\000\002\005\007\000\002\005\006\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\024\003\000\002\024\003\000\002" +
    "\021\004\000\002\021\003\000\002\020\003\000\002\020" +
    "\003\000\002\022\012\000\002\057\002\000\002\022\013" +
    "\000\002\060\002\000\002\022\013\000\002\061\002\000" +
    "\002\022\013\000\002\062\002\000\002\022\013\000\002" +
    "\063\002\000\002\022\013\000\002\064\002\000\002\022" +
    "\013\000\002\065\002\000\002\022\013\000\002\022\012" +
    "\000\002\023\003\000\002\023\003\000\002\035\005\000" +
    "\002\035\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\031\006\000\002\031" +
    "\005\000\002\031\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\003\000\002\030\003\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\003\000\002" +
    "\032\003\000\002\033\005\000\002\033\005\000\002\011" +
    "\004\000\002\011\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\012\006\000\002\012\006\000\002" +
    "\066\002\000\002\012\007\000\002\067\002\000\002\012" +
    "\007\000\002\070\002\000\002\012\007\000\002\071\002" +
    "\000\002\012\007\000\002\012\005\000\002\012\005\000" +
    "\002\013\005\000\002\013\005\000\002\016\004\000\002" +
    "\014\010\000\002\014\012\000\002\072\002\000\002\014" +
    "\011\000\002\073\002\000\002\014\011\000\002\015\010" +
    "\000\002\074\002\000\002\015\011\000\002\075\002\000" +
    "\002\015\011\000\002\015\010\000\002\017\006\000\002" +
    "\017\006\000\002\017\005\000\002\027\004\000\002\027" +
    "\003\000\002\026\010\000\002\076\002\000\002\026\011" +
    "\000\002\077\002\000\002\026\011\000\002\100\002\000" +
    "\002\026\011\000\002\101\002\000\002\026\011\000\002" +
    "\102\002\000\002\026\011\000\002\026\010\000\002\037" +
    "\004\000\002\037\003\000\002\036\006\000\002\036\005" +
    "\000\002\103\002\000\002\036\007\000\002\104\002\000" +
    "\002\036\007\000\002\105\002\000\002\036\007\000\002" +
    "\036\006\000\002\045\004\000\002\045\003\000\002\044" +
    "\003\000\002\044\003\000\002\046\013\000\002\046\012" +
    "\000\002\106\002\000\002\046\013\000\002\107\002\000" +
    "\002\046\013\000\002\110\002\000\002\046\013\000\002" +
    "\111\002\000\002\046\013\000\002\112\002\000\002\046" +
    "\013\000\002\113\002\000\002\046\013\000\002\114\002" +
    "\000\002\046\013\000\002\047\010\000\002\047\007\000" +
    "\002\047\003\000\002\050\011\000\002\050\010\000\002" +
    "\115\002\000\002\050\011\000\002\116\002\000\002\050" +
    "\011\000\002\117\002\000\002\050\011\000\002\120\002" +
    "\000\002\050\011\000\002\051\010\000\002\051\007\000" +
    "\002\051\007\000\002\051\006\000\002\051\003\000\002" +
    "\042\004\000\002\042\005\000\002\042\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\040\005" +
    "\000\002\040\005\000\002\041\006\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\006\036\000\046\000\001\002\000\004\002" +
    "\u01ad\001\002\000\006\036\010\046\006\001\002\000\004" +
    "\003\u01a8\001\002\000\004\002\uffff\001\002\000\006\003" +
    "\u0198\046\u0197\001\002\000\024\003\035\012\024\022\030" +
    "\023\031\030\022\032\037\036\012\044\032\046\025\001" +
    "\002\000\006\003\u016b\046\u016a\001\002\000\022\012\042" +
    "\022\uffe5\023\031\030\022\032\037\036\012\044\032\046" +
    "\043\001\002\000\022\012\uffda\022\uffda\023\uffda\030\uffda" +
    "\032\uffda\036\uffda\044\uffda\046\uffda\001\002\000\022\012" +
    "\024\022\uffed\023\031\030\022\032\037\036\012\044\032" +
    "\046\025\001\002\000\022\012\uff6f\022\uff6f\023\uff6f\030" +
    "\uff6f\032\uff6f\036\uff6f\044\uff6f\046\uff6f\001\002\000\004" +
    "\002\ufffe\001\002\000\004\022\u015e\001\002\000\022\012" +
    "\042\022\uffe6\023\031\030\022\032\037\036\012\044\032" +
    "\046\043\001\002\000\006\003\u011e\046\u011d\001\002\000" +
    "\004\022\uffee\001\002\000\004\003\u0117\001\002\000\010" +
    "\003\374\010\054\012\375\001\002\000\022\012\uff71\022" +
    "\uff71\023\uff71\030\uff71\032\uff71\036\uff71\044\uff71\046\uff71" +
    "\001\002\000\030\003\uffd9\006\uffd9\011\uffd9\012\uffd9\022" +
    "\uffd9\023\uffd9\030\uffd9\032\uffd9\036\uffd9\044\uffd9\046\uffd9" +
    "\001\002\000\020\005\106\026\365\031\114\037\112\041" +
    "\121\045\107\046\115\001\002\000\032\003\uffc6\006\uffc6" +
    "\011\uffc6\012\uffc6\022\uffc6\023\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\036\uffc6\044\uffc6\046\uffc6\001\002\000\006\003\315" +
    "\046\314\001\002\000\022\012\042\022\uffe7\023\031\030" +
    "\022\032\037\036\012\044\032\046\043\001\002\000\022" +
    "\012\uff8a\022\uff8a\023\uff8a\030\uff8a\032\uff8a\036\uff8a\044" +
    "\uff8a\046\uff8a\001\002\000\004\022\uffec\001\002\000\026" +
    "\003\uff7c\012\uff7c\022\uff7c\023\uff7c\026\uff7c\030\uff7c\032" +
    "\uff7c\036\uff7c\044\uff7c\046\uff7c\001\002\000\032\003\uffc7" +
    "\006\uffc7\011\uffc7\012\uffc7\022\uffc7\023\uffc7\030\uffc7\032" +
    "\uffc7\033\uffc7\036\uffc7\044\uffc7\046\uffc7\001\002\000\030" +
    "\003\uffd8\006\uffd8\011\uffd8\012\uffd8\022\uffd8\023\uffd8\030" +
    "\uffd8\032\uffd8\036\uffd8\044\uffd8\046\uffd8\001\002\000\022" +
    "\012\uff70\022\uff70\023\uff70\030\uff70\032\uff70\036\uff70\044" +
    "\uff70\046\uff70\001\002\000\004\003\310\001\002\000\010" +
    "\003\300\010\054\012\056\001\002\000\022\012\uffdb\022" +
    "\uffdb\023\uffdb\030\uffdb\032\uffdb\036\uffdb\044\uffdb\046\uffdb" +
    "\001\002\000\014\012\042\022\uffea\030\022\036\012\046" +
    "\050\001\002\000\014\012\042\022\uffe9\030\022\036\012" +
    "\046\050\001\002\000\022\012\uff72\022\uff72\023\uff72\030" +
    "\uff72\032\uff72\036\uff72\044\uff72\046\uff72\001\002\000\010" +
    "\003\073\010\054\012\056\001\002\000\010\012\042\022" +
    "\uffe1\046\052\001\002\000\010\003\055\010\054\012\056" +
    "\001\002\000\026\003\uff7d\012\uff7d\022\uff7d\023\uff7d\026" +
    "\uff7d\030\uff7d\032\uff7d\036\uff7d\044\uff7d\046\uff7d\001\002" +
    "\000\006\012\042\046\052\001\002\000\010\023\uff77\032" +
    "\uff77\046\uff77\001\002\000\012\003\060\023\031\032\037" +
    "\046\057\001\002\000\006\003\uffdc\011\uffdc\001\002\000" +
    "\004\011\uff75\001\002\000\006\003\uffdd\011\uffdd\001\002" +
    "\000\006\003\064\011\063\001\002\000\026\003\uff7b\012" +
    "\uff7b\022\uff7b\023\uff7b\026\uff7b\030\uff7b\032\uff7b\036\uff7b" +
    "\044\uff7b\046\uff7b\001\002\000\026\003\uff73\012\uff73\022" +
    "\uff73\023\uff73\026\uff73\030\uff73\032\uff73\036\uff73\044\uff73" +
    "\046\uff73\001\002\000\004\011\066\001\002\000\026\003" +
    "\uff74\012\uff74\022\uff74\023\uff74\026\uff74\030\uff74\032\uff74" +
    "\036\uff74\044\uff74\046\uff74\001\002\000\010\023\031\032" +
    "\037\046\057\001\002\000\004\011\071\001\002\000\026" +
    "\003\uff76\012\uff76\022\uff76\023\uff76\026\uff76\030\uff76\032" +
    "\uff76\036\uff76\044\uff76\046\uff76\001\002\000\026\003\uff7a" +
    "\012\uff7a\022\uff7a\023\uff7a\026\uff7a\030\uff7a\032\uff7a\036" +
    "\uff7a\044\uff7a\046\uff7a\001\002\000\012\005\uff6c\023\uff77" +
    "\032\uff77\046\uff77\001\002\000\004\005\075\001\002\000" +
    "\004\006\076\001\002\000\004\041\077\001\002\000\006" +
    "\023\031\032\037\001\002\000\004\033\101\001\002\000" +
    "\024\003\105\012\042\022\104\023\031\030\022\032\037" +
    "\036\012\044\032\046\043\001\002\000\022\012\uff6b\022" +
    "\uff6b\023\uff6b\030\uff6b\032\uff6b\036\uff6b\044\uff6b\046\uff6b" +
    "\001\002\000\004\022\270\001\002\000\016\005\106\031" +
    "\114\037\112\041\121\045\107\046\115\001\002\000\022" +
    "\012\uff5c\022\uff5c\023\uff5c\030\uff5c\032\uff5c\036\uff5c\044" +
    "\uff5c\046\uff5c\001\002\000\004\003\261\001\002\000\014" +
    "\005\133\027\140\032\134\043\135\046\141\001\002\000" +
    "\004\011\uffae\001\002\000\004\011\uffaf\001\002\000\006" +
    "\003\227\005\226\001\002\000\004\011\225\001\002\000" +
    "\014\005\133\027\140\032\134\043\135\046\141\001\002" +
    "\000\010\005\172\017\171\020\173\001\002\000\004\011" +
    "\uffaa\001\002\000\004\011\uffab\001\002\000\004\011\uffac" +
    "\001\002\000\014\005\133\027\140\032\134\043\135\046" +
    "\141\001\002\000\020\005\106\026\125\031\114\037\112" +
    "\041\121\045\107\046\115\001\002\000\004\011\uffad\001" +
    "\002\000\004\011\130\001\002\000\004\046\126\001\002" +
    "\000\004\011\127\001\002\000\022\012\uff5d\022\uff5d\023" +
    "\uff5d\030\uff5d\032\uff5d\036\uff5d\044\uff5d\046\uff5d\001\002" +
    "\000\024\003\uffb0\005\uffb0\025\uffb0\026\uffb0\031\uffb0\037" +
    "\uffb0\041\uffb0\045\uffb0\046\uffb0\001\002\000\030\003\uffc1" +
    "\006\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\021\uffc1\034\uffc1\042\uffc1\001\002\000\030\003\uffc2" +
    "\006\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\021\uffc2\034\uffc2\042\uffc2\001\002\000\014\005\133" +
    "\027\140\032\134\043\135\046\141\001\002\000\030\003" +
    "\uffba\006\uffba\010\uffba\011\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\021\uffba\034\uffba\042\uffba\001\002\000\030\003" +
    "\uffb5\006\uffb5\010\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\021\uffb5\034\uffb5\042\uffb5\001\002\000\030\003" +
    "\uffc3\006\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\021\uffc3\034\uffc3\042\uffc3\001\002\000\016\011" +
    "\uff9b\013\156\014\154\015\160\016\157\021\155\001\002" +
    "\000\030\003\uffb4\006\uffb4\010\uffb4\011\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\021\uffb4\034\uffb4\042\uffb4\001\002" +
    "\000\034\003\uffb9\005\143\006\uffb9\010\uffb9\011\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\020\144\021\uffb9\034\uffb9" +
    "\042\uffb9\001\002\000\030\003\uffc0\006\uffc0\010\uffc0\011" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\021\uffc0\034\uffc0" +
    "\042\uffc0\001\002\000\016\005\133\006\147\027\140\032" +
    "\134\043\135\046\141\001\002\000\004\046\145\001\002" +
    "\000\032\003\uffb3\006\uffb3\010\uffb3\011\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\020\144\021\uffb3\034\uffb3\042\uffb3" +
    "\001\002\000\030\003\uffb2\006\uffb2\010\uffb2\011\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\021\uffb2\034\uffb2\042\uffb2" +
    "\001\002\000\030\003\uffbd\006\uffbd\010\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd\034\uffbd\042\uffbd" +
    "\001\002\000\020\006\uffc4\010\153\013\156\014\154\015" +
    "\160\016\157\021\155\001\002\000\004\006\152\001\002" +
    "\000\030\003\uffbf\006\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\021\uffbf\034\uffbf\042\uffbf\001\002" +
    "\000\014\005\133\027\140\032\134\043\135\046\141\001" +
    "\002\000\014\005\133\027\140\032\134\043\135\046\141" +
    "\001\002\000\014\005\133\027\140\032\134\043\135\046" +
    "\141\001\002\000\014\005\133\027\140\032\134\043\135" +
    "\046\141\001\002\000\014\005\133\027\140\032\134\043" +
    "\135\046\141\001\002\000\014\005\133\027\140\032\134" +
    "\043\135\046\141\001\002\000\030\003\uffb8\006\uffb8\010" +
    "\uffb8\011\uffb8\013\156\014\154\015\uffb8\016\uffb8\021\uffb8" +
    "\034\uffb8\042\uffb8\001\002\000\030\003\uffb7\006\uffb7\010" +
    "\uffb7\011\uffb7\013\156\014\154\015\160\016\uffb7\021\uffb7" +
    "\034\uffb7\042\uffb7\001\002\000\030\003\uffbc\006\uffbc\010" +
    "\uffbc\011\uffbc\013\uffbc\014\154\015\uffbc\016\uffbc\021\uffbc" +
    "\034\uffbc\042\uffbc\001\002\000\030\003\uffb6\006\uffb6\010" +
    "\uffb6\011\uffb6\013\156\014\154\015\160\016\157\021\uffb6" +
    "\034\uffb6\042\uffb6\001\002\000\030\003\uffbb\006\uffbb\010" +
    "\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\021\uffbb" +
    "\034\uffbb\042\uffbb\001\002\000\004\006\uffc5\001\002\000" +
    "\004\006\170\001\002\000\030\003\uffbe\006\uffbe\010\uffbe" +
    "\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\034" +
    "\uffbe\042\uffbe\001\002\000\014\005\133\027\140\032\134" +
    "\043\135\046\141\001\002\000\020\005\133\006\176\027" +
    "\140\032\134\043\135\046\141\047\177\001\002\000\004" +
    "\046\174\001\002\000\006\017\171\020\173\001\002\000" +
    "\004\011\uff9d\001\002\000\004\011\uff8c\001\002\000\004" +
    "\006\202\001\002\000\004\006\201\001\002\000\004\011" +
    "\uff8e\001\002\000\004\011\uff8d\001\002\000\016\011\uff9c" +
    "\013\156\014\154\015\160\016\157\021\155\001\002\000" +
    "\020\003\206\013\156\014\154\015\160\016\157\021\155" +
    "\042\205\001\002\000\016\005\106\031\114\037\112\041" +
    "\121\045\107\046\115\001\002\000\016\005\uff98\031\uff98" +
    "\037\uff98\041\uff98\045\uff98\046\uff98\001\002\000\016\005" +
    "\106\031\114\037\112\041\121\045\107\046\115\001\002" +
    "\000\020\005\106\026\211\031\114\037\112\041\121\045" +
    "\107\046\115\001\002\000\004\031\212\001\002\000\004" +
    "\011\uff97\001\002\000\024\003\215\005\106\025\214\026" +
    "\216\031\114\037\112\041\121\045\107\046\115\001\002" +
    "\000\016\005\106\031\114\037\112\041\121\045\107\046" +
    "\115\001\002\000\004\031\uff96\001\002\000\004\031\217" +
    "\001\002\000\004\011\uff9a\001\002\000\004\031\221\001" +
    "\002\000\004\011\uff95\001\002\000\020\005\106\026\223" +
    "\031\114\037\112\041\121\045\107\046\115\001\002\000" +
    "\004\031\224\001\002\000\004\011\uff99\001\002\000\024" +
    "\003\uffb1\005\uffb1\025\uffb1\026\uffb1\031\uffb1\037\uffb1\041" +
    "\uffb1\045\uffb1\046\uffb1\001\002\000\016\005\133\027\140" +
    "\032\134\043\135\046\141\047\236\001\002\000\016\005" +
    "\uffa3\027\uffa3\032\uffa3\043\uffa3\046\uffa3\047\uffa1\001\002" +
    "\000\004\047\234\001\002\000\014\005\133\027\140\032" +
    "\134\043\135\046\141\001\002\000\004\006\233\001\002" +
    "\000\004\011\uffa2\001\002\000\004\006\235\001\002\000" +
    "\004\011\uffa0\001\002\000\006\006\242\011\uff9e\001\002" +
    "\000\022\006\uffc4\010\153\011\uff9f\013\156\014\154\015" +
    "\160\016\157\021\155\001\002\000\004\006\241\001\002" +
    "\000\004\011\uffa9\001\002\000\004\011\uffa8\001\002\000" +
    "\020\003\244\013\156\014\154\015\160\016\157\021\155" +
    "\034\245\001\002\000\016\005\uff93\031\uff93\037\uff93\041" +
    "\uff93\045\uff93\046\uff93\001\002\000\016\005\106\031\114" +
    "\037\112\041\121\045\107\046\115\001\002\000\022\003" +
    "\247\005\106\026\250\031\114\037\112\041\121\045\107" +
    "\046\115\001\002\000\004\034\uff91\001\002\000\006\003" +
    "\251\034\252\001\002\000\004\011\uff8f\001\002\000\004" +
    "\011\uff94\001\002\000\004\034\254\001\002\000\004\011" +
    "\uff90\001\002\000\016\005\106\031\114\037\112\041\121" +
    "\045\107\046\115\001\002\000\020\005\106\026\257\031" +
    "\114\037\112\041\121\045\107\046\115\001\002\000\004" +
    "\034\260\001\002\000\004\011\uff92\001\002\000\016\005" +
    "\uffa7\027\uffa7\032\uffa7\043\uffa7\046\uffa7\047\uffa5\001\002" +
    "\000\004\047\266\001\002\000\014\005\133\027\140\032" +
    "\134\043\135\046\141\001\002\000\004\006\265\001\002" +
    "\000\004\011\uffa6\001\002\000\004\006\267\001\002\000" +
    "\004\011\uffa4\001\002\000\016\005\106\031\114\037\112" +
    "\041\121\045\107\046\115\001\002\000\020\005\106\026" +
    "\272\031\114\037\112\041\121\045\107\046\115\001\002" +
    "\000\004\046\273\001\002\000\004\011\274\001\002\000" +
    "\022\012\uff5e\022\uff5e\023\uff5e\030\uff5e\032\uff5e\036\uff5e" +
    "\044\uff5e\046\uff5e\001\002\000\012\022\uffeb\030\022\036" +
    "\012\046\276\001\002\000\004\003\277\001\002\000\004" +
    "\005\uff6c\001\002\000\014\005\uff6c\023\uff77\032\uff77\033" +
    "\uffd6\046\uff77\001\002\000\004\033\302\001\002\000\004" +
    "\040\303\001\002\000\006\012\042\046\052\001\002\000" +
    "\010\012\042\026\305\046\052\001\002\000\004\040\306" +
    "\001\002\000\004\011\307\001\002\000\030\003\uffd5\006" +
    "\uffd5\011\uffd5\012\uffd5\022\uffd5\023\uffd5\030\uffd5\032\uffd5" +
    "\036\uffd5\044\uffd5\046\uffd5\001\002\000\010\023\uff79\032" +
    "\uff79\046\uff79\001\002\000\010\023\031\032\037\046\057" +
    "\001\002\000\004\011\313\001\002\000\026\003\uff78\012" +
    "\uff78\022\uff78\023\uff78\026\uff78\030\uff78\032\uff78\036\uff78" +
    "\044\uff78\046\uff78\001\002\000\006\003\325\033\326\001" +
    "\002\000\004\033\uffd4\001\002\000\004\033\317\001\002" +
    "\000\004\040\320\001\002\000\006\012\042\046\052\001" +
    "\002\000\010\012\042\026\322\046\052\001\002\000\004" +
    "\040\323\001\002\000\004\011\324\001\002\000\030\003" +
    "\uffd3\006\uffd3\011\uffd3\012\uffd3\022\uffd3\023\uffd3\030\uffd3" +
    "\032\uffd3\036\uffd3\044\uffd3\046\uffd3\001\002\000\004\040" +
    "\uffd2\001\002\000\006\003\330\040\327\001\002\000\010" +
    "\003\336\012\042\046\052\001\002\000\006\012\uffd0\046" +
    "\uffd0\001\002\000\006\012\042\046\052\001\002\000\010" +
    "\012\042\026\333\046\052\001\002\000\004\040\334\001" +
    "\002\000\004\011\335\001\002\000\030\003\uffcf\006\uffcf" +
    "\011\uffcf\012\uffcf\022\uffcf\023\uffcf\030\uffcf\032\uffcf\036" +
    "\uffcf\044\uffcf\046\uffcf\001\002\000\004\026\uffce\001\002" +
    "\000\012\003\340\012\042\026\341\046\052\001\002\000" +
    "\004\040\uffcc\001\002\000\006\003\343\040\342\001\002" +
    "\000\006\003\347\011\346\001\002\000\004\011\uffca\001" +
    "\002\000\004\011\345\001\002\000\030\003\uffc9\006\uffc9" +
    "\011\uffc9\012\uffc9\022\uffc9\023\uffc9\030\uffc9\032\uffc9\036" +
    "\uffc9\044\uffc9\046\uffc9\001\002\000\030\003\uffd7\006\uffd7" +
    "\011\uffd7\012\uffd7\022\uffd7\023\uffd7\030\uffd7\032\uffd7\036" +
    "\uffd7\044\uffd7\046\uffd7\001\002\000\030\003\uffc8\006\uffc8" +
    "\011\uffc8\012\uffc8\022\uffc8\023\uffc8\030\uffc8\032\uffc8\036" +
    "\uffc8\044\uffc8\046\uffc8\001\002\000\004\040\351\001\002" +
    "\000\004\011\352\001\002\000\030\003\uffcb\006\uffcb\011" +
    "\uffcb\012\uffcb\022\uffcb\023\uffcb\030\uffcb\032\uffcb\036\uffcb" +
    "\044\uffcb\046\uffcb\001\002\000\004\026\354\001\002\000" +
    "\004\040\355\001\002\000\004\011\356\001\002\000\030" +
    "\003\uffcd\006\uffcd\011\uffcd\012\uffcd\022\uffcd\023\uffcd\030" +
    "\uffcd\032\uffcd\036\uffcd\044\uffcd\046\uffcd\001\002\000\004" +
    "\040\360\001\002\000\006\012\042\046\052\001\002\000" +
    "\010\012\042\026\362\046\052\001\002\000\004\040\363" +
    "\001\002\000\004\011\364\001\002\000\030\003\uffd1\006" +
    "\uffd1\011\uffd1\012\uffd1\022\uffd1\023\uffd1\030\uffd1\032\uffd1" +
    "\036\uffd1\044\uffd1\046\uffd1\001\002\000\004\046\372\001" +
    "\002\000\020\005\106\026\367\031\114\037\112\041\121" +
    "\045\107\046\115\001\002\000\004\046\370\001\002\000" +
    "\004\011\371\001\002\000\004\002\ufff2\001\002\000\004" +
    "\011\373\001\002\000\004\002\ufff0\001\002\000\016\005" +
    "\uff6c\023\uff77\024\uff86\032\uff77\033\uffd6\046\uff77\001\002" +
    "\000\014\003\377\023\031\024\376\032\037\046\057\001" +
    "\002\000\006\003\u0108\017\u0107\001\002\000\006\011\uff75" +
    "\017\uff84\001\002\000\004\017\u0101\001\002\000\010\027" +
    "\u0105\032\u0102\043\u0104\001\002\000\006\003\uffde\011\uffde" +
    "\001\002\000\004\011\u0106\001\002\000\006\003\uffe0\011" +
    "\uffe0\001\002\000\006\003\uffdf\011\uffdf\001\002\000\022" +
    "\012\uff83\022\uff83\023\uff83\030\uff83\032\uff83\036\uff83\044" +
    "\uff83\046\uff83\001\002\000\012\003\u010d\027\u0105\032\u0102" +
    "\043\u0104\001\002\000\010\027\uff82\032\uff82\043\uff82\001" +
    "\002\000\010\027\u0105\032\u0102\043\u0104\001\002\000\004" +
    "\011\u010b\001\002\000\022\012\uff81\022\uff81\023\uff81\030" +
    "\uff81\032\uff81\036\uff81\044\uff81\046\uff81\001\002\000\006" +
    "\003\u0111\011\u0110\001\002\000\004\011\uff80\001\002\000" +
    "\004\011\u010f\001\002\000\022\012\uff7f\022\uff7f\023\uff7f" +
    "\030\uff7f\032\uff7f\036\uff7f\044\uff7f\046\uff7f\001\002\000" +
    "\022\012\uff89\022\uff89\023\uff89\030\uff89\032\uff89\036\uff89" +
    "\044\uff89\046\uff89\001\002\000\022\012\uff7e\022\uff7e\023" +
    "\uff7e\030\uff7e\032\uff7e\036\uff7e\044\uff7e\046\uff7e\001\002" +
    "\000\004\024\u0113\001\002\000\004\017\u0114\001\002\000" +
    "\010\027\u0105\032\u0102\043\u0104\001\002\000\004\011\u0116" +
    "\001\002\000\022\012\uff85\022\uff85\023\uff85\030\uff85\032" +
    "\uff85\036\uff85\044\uff85\046\uff85\001\002\000\012\023\uff79" +
    "\024\uff88\032\uff79\046\uff79\001\002\000\004\024\u0119\001" +
    "\002\000\004\017\u011a\001\002\000\010\027\u0105\032\u0102" +
    "\043\u0104\001\002\000\004\011\u011c\001\002\000\022\012" +
    "\uff87\022\uff87\023\uff87\030\uff87\032\uff87\036\uff87\044\uff87" +
    "\046\uff87\001\002\000\006\003\u0127\005\u0126\001\002\000" +
    "\004\005\uff6a\001\002\000\004\005\u0120\001\002\000\004" +
    "\006\u0121\001\002\000\004\041\u0122\001\002\000\006\023" +
    "\031\032\037\001\002\000\004\033\u0124\001\002\000\024" +
    "\003\105\012\042\022\104\023\031\030\022\032\037\036" +
    "\012\044\032\046\043\001\002\000\022\012\uff69\022\uff69" +
    "\023\uff69\030\uff69\032\uff69\036\uff69\044\uff69\046\uff69\001" +
    "\002\000\010\003\u0131\006\u012f\046\u012e\001\002\000\004" +
    "\006\uff68\001\002\000\004\006\u0129\001\002\000\004\041" +
    "\u012a\001\002\000\006\023\031\032\037\001\002\000\004" +
    "\033\u012c\001\002\000\024\003\105\012\042\022\104\023" +
    "\031\030\022\032\037\036\012\044\032\046\043\001\002" +
    "\000\022\012\uff67\022\uff67\023\uff67\030\uff67\032\uff67\036" +
    "\uff67\044\uff67\046\uff67\001\002\000\006\010\u0153\012\u0154" +
    "\001\002\000\006\003\u0144\041\u0143\001\002\000\012\003" +
    "\uff4a\006\uff4a\011\uff4a\046\uff4a\001\002\000\014\003\uff47" +
    "\006\uff47\011\uff47\041\uff66\046\uff47\001\002\000\012\003" +
    "\u0138\006\u0135\011\u0137\046\u012e\001\002\000\012\003\uff49" +
    "\006\uff49\011\uff49\046\uff49\001\002\000\012\003\uff48\006" +
    "\uff48\011\uff48\046\uff48\001\002\000\004\041\u013a\001\002" +
    "\000\012\003\uff4c\006\uff4c\011\uff4c\046\uff4c\001\002\000" +
    "\006\003\u0138\046\u012e\001\002\000\012\003\uff47\006\uff47" +
    "\011\uff47\046\uff47\001\002\000\012\003\uff4b\006\uff4b\011" +
    "\uff4b\046\uff4b\001\002\000\006\023\031\032\037\001\002" +
    "\000\004\033\u013c\001\002\000\024\003\105\012\042\022" +
    "\104\023\031\030\022\032\037\036\012\044\032\046\043" +
    "\001\002\000\022\012\uff6e\022\uff6e\023\uff6e\030\uff6e\032" +
    "\uff6e\036\uff6e\044\uff6e\046\uff6e\001\002\000\004\041\u013f" +
    "\001\002\000\006\023\031\032\037\001\002\000\004\033" +
    "\u0141\001\002\000\024\003\105\012\042\022\104\023\031" +
    "\030\022\032\037\036\012\044\032\046\043\001\002\000" +
    "\022\012\uff65\022\uff65\023\uff65\030\uff65\032\uff65\036\uff65" +
    "\044\uff65\046\uff65\001\002\000\010\003\u0149\023\031\032" +
    "\037\001\002\000\006\023\uff64\032\uff64\001\002\000\006" +
    "\023\031\032\037\001\002\000\004\033\u0147\001\002\000" +
    "\024\003\105\012\042\022\104\023\031\030\022\032\037" +
    "\036\012\044\032\046\043\001\002\000\022\012\uff63\022" +
    "\uff63\023\uff63\030\uff63\032\uff63\036\uff63\044\uff63\046\uff63" +
    "\001\002\000\004\033\uff62\001\002\000\006\003\u014b\033" +
    "\u014c\001\002\000\024\003\uff60\012\uff60\022\uff60\023\uff60" +
    "\030\uff60\032\uff60\036\uff60\044\uff60\046\uff60\001\002\000" +
    "\024\003\105\012\042\022\104\023\031\030\022\032\037" +
    "\036\012\044\032\046\043\001\002\000\022\012\uff6d\022" +
    "\uff6d\023\uff6d\030\uff6d\032\uff6d\036\uff6d\044\uff6d\046\uff6d" +
    "\001\002\000\024\003\105\012\042\022\104\023\031\030" +
    "\022\032\037\036\012\044\032\046\043\001\002\000\022" +
    "\012\uff5f\022\uff5f\023\uff5f\030\uff5f\032\uff5f\036\uff5f\044" +
    "\uff5f\046\uff5f\001\002\000\004\033\u0151\001\002\000\024" +
    "\003\105\012\042\022\104\023\031\030\022\032\037\036" +
    "\012\044\032\046\043\001\002\000\022\012\uff61\022\uff61" +
    "\023\uff61\030\uff61\032\uff61\036\uff61\044\uff61\046\uff61\001" +
    "\002\000\004\046\u012e\001\002\000\014\023\031\032\037" +
    "\035\u0156\044\032\046\u0155\001\002\000\004\003\u0159\001" +
    "\002\000\012\023\031\032\037\044\032\046\u0155\001\002" +
    "\000\012\003\uff46\006\uff46\011\uff46\046\uff46\001\002\000" +
    "\012\003\uff44\006\uff44\011\uff44\046\uff44\001\002\000\004" +
    "\033\uffd6\001\002\000\012\003\uff45\006\uff45\011\uff45\046" +
    "\uff45\001\002\000\012\003\uff43\006\uff43\011\uff43\046\uff43" +
    "\001\002\000\014\022\uffe4\023\031\032\037\044\032\046" +
    "\u0155\001\002\000\012\022\uffe8\030\022\036\012\046\276" +
    "\001\002\000\020\005\106\026\u0160\031\114\037\112\041" +
    "\121\045\107\046\115\001\002\000\020\005\106\026\u0163" +
    "\031\114\037\112\041\121\045\107\046\115\001\002\000" +
    "\004\046\u0161\001\002\000\004\011\u0162\001\002\000\004" +
    "\002\ufff1\001\002\000\004\046\u0164\001\002\000\004\011" +
    "\u0165\001\002\000\004\002\ufff3\001\002\000\004\022\uffef" +
    "\001\002\000\022\012\uff8b\022\uff8b\023\uff8b\030\uff8b\032" +
    "\uff8b\036\uff8b\044\uff8b\046\uff8b\001\002\000\014\022\uffe3" +
    "\023\031\032\037\044\032\046\u0155\001\002\000\010\012" +
    "\042\022\uffe2\046\052\001\002\000\006\003\u0184\005\u0183" +
    "\001\002\000\004\005\uff59\001\002\000\004\005\u016d\001" +
    "\002\000\004\006\u016e\001\002\000\004\033\u016f\001\002" +
    "\000\024\003\u0173\012\042\022\u0172\023\031\030\022\032" +
    "\037\036\012\044\032\046\043\001\002\000\022\012\uff58" +
    "\022\uff58\023\uff58\030\uff58\032\uff58\036\uff58\044\uff58\046" +
    "\uff58\001\002\000\004\022\u017b\001\002\000\020\005\106" +
    "\026\u0175\031\114\037\112\041\121\045\107\046\115\001" +
    "\002\000\022\012\uff4d\022\uff4d\023\uff4d\030\uff4d\032\uff4d" +
    "\036\uff4d\044\uff4d\046\uff4d\001\002\000\020\005\106\026" +
    "\u0178\031\114\037\112\041\121\045\107\046\115\001\002" +
    "\000\004\046\u0176\001\002\000\004\011\u0177\001\002\000" +
    "\022\012\uff4e\022\uff4e\023\uff4e\030\uff4e\032\uff4e\036\uff4e" +
    "\044\uff4e\046\uff4e\001\002\000\004\046\u0179\001\002\000" +
    "\004\011\u017a\001\002\000\022\012\uff50\022\uff50\023\uff50" +
    "\030\uff50\032\uff50\036\uff50\044\uff50\046\uff50\001\002\000" +
    "\020\005\106\026\u017c\031\114\037\112\041\121\045\107" +
    "\046\115\001\002\000\004\046\u0181\001\002\000\020\005" +
    "\106\026\u017e\031\114\037\112\041\121\045\107\046\115" +
    "\001\002\000\004\046\u017f\001\002\000\004\011\u0180\001" +
    "\002\000\022\012\uff51\022\uff51\023\uff51\030\uff51\032\uff51" +
    "\036\uff51\044\uff51\046\uff51\001\002\000\004\011\u0182\001" +
    "\002\000\022\012\uff4f\022\uff4f\023\uff4f\030\uff4f\032\uff4f" +
    "\036\uff4f\044\uff4f\046\uff4f\001\002\000\010\003\u018a\006" +
    "\u0189\046\u012e\001\002\000\004\006\uff57\001\002\000\004" +
    "\006\u0186\001\002\000\004\033\u0187\001\002\000\024\003" +
    "\u0173\012\042\022\u0172\023\031\030\022\032\037\036\012" +
    "\044\032\046\043\001\002\000\022\012\uff56\022\uff56\023" +
    "\uff56\030\uff56\032\uff56\036\uff56\044\uff56\046\uff56\001\002" +
    "\000\006\003\u0192\033\u0193\001\002\000\014\003\uff47\006" +
    "\uff47\011\uff47\033\uff55\046\uff47\001\002\000\012\003\u0138" +
    "\006\u018c\011\u0137\046\u012e\001\002\000\004\033\u018d\001" +
    "\002\000\024\003\u0173\012\042\022\u0172\023\031\030\022" +
    "\032\037\036\012\044\032\046\043\001\002\000\022\012" +
    "\uff5b\022\uff5b\023\uff5b\030\uff5b\032\uff5b\036\uff5b\044\uff5b" +
    "\046\uff5b\001\002\000\004\033\u0190\001\002\000\024\003" +
    "\u0173\012\042\022\u0172\023\031\030\022\032\037\036\012" +
    "\044\032\046\043\001\002\000\022\012\uff54\022\uff54\023" +
    "\uff54\030\uff54\032\uff54\036\uff54\044\uff54\046\uff54\001\002" +
    "\000\024\003\uff53\012\uff53\022\uff53\023\uff53\030\uff53\032" +
    "\uff53\036\uff53\044\uff53\046\uff53\001\002\000\024\003\u0173" +
    "\012\042\022\u0172\023\031\030\022\032\037\036\012\044" +
    "\032\046\043\001\002\000\022\012\uff5a\022\uff5a\023\uff5a" +
    "\030\uff5a\032\uff5a\036\uff5a\044\uff5a\046\uff5a\001\002\000" +
    "\024\003\u0173\012\042\022\u0172\023\031\030\022\032\037" +
    "\036\012\044\032\046\043\001\002\000\022\012\uff52\022" +
    "\uff52\023\uff52\030\uff52\032\uff52\036\uff52\044\uff52\046\uff52" +
    "\001\002\000\006\003\u019e\005\u019d\001\002\000\004\005" +
    "\ufffa\001\002\000\004\005\u019a\001\002\000\004\006\u019b" +
    "\001\002\000\004\033\u019c\001\002\000\024\003\ufff9\012" +
    "\ufff9\022\ufff9\023\ufff9\030\ufff9\032\ufff9\036\ufff9\044\ufff9" +
    "\046\ufff9\001\002\000\006\003\u01a3\006\u01a2\001\002\000" +
    "\004\006\ufff8\001\002\000\004\006\u01a0\001\002\000\004" +
    "\033\u01a1\001\002\000\024\003\ufff7\012\ufff7\022\ufff7\023" +
    "\ufff7\030\ufff7\032\ufff7\036\ufff7\044\ufff7\046\ufff7\001\002" +
    "\000\006\003\u01a6\033\u01a7\001\002\000\004\033\ufff6\001" +
    "\002\000\004\033\u01a5\001\002\000\024\003\ufff5\012\ufff5" +
    "\022\ufff5\023\ufff5\030\ufff5\032\ufff5\036\ufff5\044\ufff5\046" +
    "\ufff5\001\002\000\024\003\ufff4\012\ufff4\022\ufff4\023\ufff4" +
    "\030\ufff4\032\ufff4\036\ufff4\044\ufff4\046\ufff4\001\002\000" +
    "\024\003\ufffd\012\ufffd\022\ufffd\023\ufffd\030\ufffd\032\ufffd" +
    "\036\ufffd\044\ufffd\046\ufffd\001\002\000\004\005\ufffc\001" +
    "\002\000\004\005\u01aa\001\002\000\004\006\u01ab\001\002" +
    "\000\004\033\u01ac\001\002\000\024\003\ufffb\012\ufffb\022" +
    "\ufffb\023\ufffb\030\ufffb\032\ufffb\036\ufffb\044\ufffb\046\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\006\002\003\052\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\016\006" +
    "\017\007\022\020\013\021\032\022\037\023\026\026\033" +
    "\027\014\036\035\037\020\044\025\045\012\046\040\050" +
    "\015\001\001\000\002\001\001\000\024\020\013\021\u0167" +
    "\022\037\023\026\036\035\037\u0168\044\046\046\040\050" +
    "\015\001\001\000\002\001\001\000\032\007\u0165\020\013" +
    "\021\032\022\037\023\026\026\u0166\036\035\037\020\044" +
    "\025\045\012\046\040\050\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\020\013\021" +
    "\u015b\022\037\023\026\036\052\044\025\045\u015c\046\040" +
    "\050\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\112\011\365\012\110\013\107\014" +
    "\122\015\117\016\116\017\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\020\043\022\037\023\026\036" +
    "\035\037\044\044\025\045\045\046\040\050\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\036" +
    "\052\044\025\045\274\046\040\050\015\001\001\000\014" +
    "\036\035\037\050\044\046\046\040\050\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\071\001" +
    "\001\000\004\104\066\001\001\000\006\023\060\024\061" +
    "\001\001\000\002\001\001\000\004\105\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\060\024\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\104\066\106\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\077\001\001\000\002\001\001\000\032\007\102\020" +
    "\013\021\032\022\037\023\026\036\035\037\020\044\025" +
    "\045\012\046\040\047\101\050\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\112\011\121\012\110" +
    "\013\107\014\122\015\117\016\116\017\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\131\031\135" +
    "\032\130\033\141\034\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\030\131\031\135\032\130\033\141\034\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\030\131\031\135\032\130\033\141\034" +
    "\136\001\001\000\020\010\123\012\110\013\107\014\122" +
    "\015\117\016\116\017\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\030\131\031\135\032\130\033\141\034\147" +
    "\035\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\030\131\031\135\032" +
    "\130\033\141\034\147\035\150\001\001\000\004\033\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\030\131\031\135\032\130\033\141\034\147\035" +
    "\165\001\001\000\014\030\131\031\135\032\130\033\141" +
    "\034\164\001\001\000\014\030\131\031\135\032\130\033" +
    "\141\034\163\001\001\000\014\030\131\031\135\032\130" +
    "\033\141\034\162\001\001\000\014\030\131\031\135\032" +
    "\130\033\141\034\161\001\001\000\014\030\131\031\135" +
    "\032\130\033\141\034\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\131\031\135\032\130\033\141\034\202" +
    "\001\001\000\016\030\131\031\135\032\130\033\141\034" +
    "\147\035\177\001\001\000\004\013\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\112\011" +
    "\212\012\110\013\107\014\122\015\117\016\116\017\115" +
    "\001\001\000\004\072\206\001\001\000\022\010\112\011" +
    "\207\012\110\013\107\014\122\015\117\016\116\017\115" +
    "\001\001\000\020\010\123\012\110\013\107\014\122\015" +
    "\117\016\116\017\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\123\012\110\013\107\014\122\015" +
    "\117\016\116\017\115\001\001\000\022\010\112\011\221" +
    "\012\110\013\107\014\122\015\117\016\116\017\115\001" +
    "\001\000\004\073\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\123\012\110\013\107\014\122\015\117\016\116\017\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\030\131\031\135\032\130\033\141\034\236" +
    "\035\237\001\001\000\006\070\230\071\227\001\001\000" +
    "\002\001\001\000\016\030\131\031\135\032\130\033\141" +
    "\034\147\035\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\254\001\001" +
    "\000\022\010\112\011\245\012\110\013\107\014\122\015" +
    "\117\016\116\017\115\001\001\000\020\010\123\012\110" +
    "\013\107\014\122\015\117\016\116\017\115\001\001\000" +
    "\004\075\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\112\011\255\012\110\013\107\014\122\015\117" +
    "\016\116\017\115\001\001\000\020\010\123\012\110\013" +
    "\107\014\122\015\117\016\116\017\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\066\262\067\261\001" +
    "\001\000\002\001\001\000\016\030\131\031\135\032\130" +
    "\033\141\034\147\035\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\010\112\011\270\012\110\013\107\014\122\015\117\016" +
    "\116\017\115\001\001\000\020\010\123\012\110\013\107" +
    "\014\122\015\117\016\116\017\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\046" +
    "\046\040\050\015\001\001\000\002\001\001\000\004\106" +
    "\073\001\001\000\010\057\300\104\066\106\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\035\037" +
    "\303\001\001\000\004\036\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\310\001" +
    "\001\000\006\023\060\024\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\035" +
    "\037\320\001\001\000\004\036\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\356" +
    "\001\001\000\002\001\001\000\006\036\035\037\336\001" +
    "\001\000\004\062\330\001\001\000\006\036\035\037\331" +
    "\001\001\000\004\036\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\352\001\001" +
    "\000\004\036\052\001\001\000\004\064\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\035" +
    "\037\360\001\001\000\004\036\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\123\012\110\013\107\014\122\015\117\016" +
    "\116\017\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\057\300\077\u0111\104\066\106\073\001\001\000\006" +
    "\023\060\024\061\001\001\000\002\001\001\000\006\100" +
    "\377\105\064\001\001\000\002\001\001\000\004\025\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u010b" +
    "\001\001\000\004\101\u0108\001\001\000\004\025\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u010d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\076\u0117\103\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0122\001\001\000\002" +
    "\001\001\000\032\007\102\020\013\021\032\022\037\023" +
    "\026\036\035\037\020\044\025\045\012\046\040\047\u0124" +
    "\050\015\001\001\000\002\001\001\000\012\040\u0132\041" +
    "\u0133\042\u0131\043\u012f\001\001\000\004\110\u0127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u012a\001" +
    "\001\000\002\001\001\000\032\007\102\020\013\021\032" +
    "\022\037\023\026\036\035\037\020\044\025\045\012\046" +
    "\040\047\u012c\050\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\111" +
    "\u013d\001\001\000\010\040\u0132\041\u0133\043\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\u0132\041\u0133\043\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u013a\001" +
    "\001\000\002\001\001\000\032\007\102\020\013\021\032" +
    "\022\037\023\026\036\035\037\020\044\025\045\012\046" +
    "\040\047\u013c\050\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u013f\001\001\000\002\001\001\000" +
    "\032\007\102\020\013\021\032\022\037\023\026\036\035" +
    "\037\020\044\025\045\012\046\040\047\u0141\050\015\001" +
    "\001\000\002\001\001\000\004\023\u0149\001\001\000\004" +
    "\112\u0144\001\001\000\004\023\u0145\001\001\000\002\001" +
    "\001\000\032\007\102\020\013\021\032\022\037\023\026" +
    "\036\035\037\020\044\025\045\012\046\040\047\u0147\050" +
    "\015\001\001\000\002\001\001\000\004\113\u014f\001\001" +
    "\000\002\001\001\000\004\114\u014d\001\001\000\032\007" +
    "\102\020\013\021\032\022\037\023\026\036\035\037\020" +
    "\044\025\045\012\046\040\047\u014c\050\015\001\001\000" +
    "\002\001\001\000\032\007\102\020\013\021\032\022\037" +
    "\023\026\036\035\037\020\044\025\045\012\046\040\047" +
    "\u014e\050\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\102\020\013\021\032\022\037\023\026\036" +
    "\035\037\020\044\025\045\012\046\040\047\u0151\050\015" +
    "\001\001\000\002\001\001\000\006\040\u0159\041\u015a\001" +
    "\001\000\010\020\u0156\022\037\023\026\001\001\000\002" +
    "\001\001\000\010\020\u0157\022\037\023\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\043\022" +
    "\037\023\026\001\001\000\010\044\046\046\040\050\015" +
    "\001\001\000\022\010\112\011\u015e\012\110\013\107\014" +
    "\122\015\117\016\116\017\115\001\001\000\020\010\123" +
    "\012\110\013\107\014\122\015\117\016\116\017\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\043\022\037" +
    "\023\026\001\001\000\004\036\052\001\001\000\002\001" +
    "\001\000\004\115\u016b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\u0170\020\013\021" +
    "\032\022\037\023\026\036\035\037\020\044\025\045\012" +
    "\046\040\050\015\051\u016f\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\112\011\u0173\012\110\013\107" +
    "\014\122\015\117\016\116\017\115\001\001\000\002\001" +
    "\001\000\020\010\123\012\110\013\107\014\122\015\117" +
    "\016\116\017\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\112\011\u017c\012\110\013" +
    "\107\014\122\015\117\016\116\017\115\001\001\000\002" +
    "\001\001\000\020\010\123\012\110\013\107\014\122\015" +
    "\117\016\116\017\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\040\u0132\041\u0133\042\u018a\043\u012f\001\001" +
    "\000\004\116\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\u0170\020\013\021\032\022\037\023\026" +
    "\036\035\037\020\044\025\045\012\046\040\050\015\051" +
    "\u0187\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u018e\001\001\000\010\040\u0132\041\u0133\043\u0135\001" +
    "\001\000\002\001\001\000\032\007\u0170\020\013\021\032" +
    "\022\037\023\026\036\035\037\020\044\025\045\012\046" +
    "\040\050\015\051\u018d\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\u0170\020\013\021\032\022\037\023" +
    "\026\036\035\037\020\044\025\045\012\046\040\050\015" +
    "\051\u0190\001\001\000\002\001\001\000\004\120\u0194\001" +
    "\001\000\032\007\u0170\020\013\021\032\022\037\023\026" +
    "\036\035\037\020\044\025\045\012\046\040\050\015\051" +
    "\u0193\001\001\000\002\001\001\000\032\007\u0170\020\013" +
    "\021\032\022\037\023\026\036\035\037\020\044\025\045" +
    "\012\046\040\050\015\051\u0195\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u019e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u01a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u01a8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // paramReferencia ::= ID COMMA paramReferencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramReferencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // paramReferencia ::= ID COLON OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramReferencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // paramValor ::= ID COMMA paramValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramValor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // paramValor ::= ID COLON tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramValor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // paramSub ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Error en parametros de subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramSub",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // paramSub ::= paramReferencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramSub",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // paramSub ::= paramValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramSub",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // paramsSub ::= paramSub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSub",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // paramsSub ::= paramsSub SEMICOLON paramSub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSub",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // paramsSub ::= paramsSub paramSub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSub",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // cuerpoProcedimiento ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Error en la estructura del cuerpo de un procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // cuerpoProcedimiento ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // cuerpoProcedimiento ::= decFunPro BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // cuerpoProcedimiento ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // cuerpoProcedimiento ::= decFunPro BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProcedimiento",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET error NT$38 cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$38 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'is' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // procedimiento ::= PROCEDURE ID LEFTBRACKET error NT$37 IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$37 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ')' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // procedimiento ::= PROCEDURE ID error NT$36 RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$36 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta '(' en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // procedimiento ::= PROCEDURE error NT$35 LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$35 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ID en procedimiento"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // procedimiento ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // procedimiento ::= PROCEDURE ID LEFTBRACKET paramsSub RIGHTBRACKET IS cuerpoProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cuerpoFuncion ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Error en la estructura del cuerpo de una funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // cuerpoFuncion ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // cuerpoFuncion ::= decFunPro BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo error NT$34 cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$34 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'is' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN error NT$33 IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$33 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta tipo primitivo en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET error NT$32 tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$32 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'return' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // funcion ::= FUNCTION ID LEFTBRACKET error NT$31 RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$31 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ')' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // funcion ::= FUNCTION ID error NT$30 RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$30 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta '(' en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // funcion ::= FUNCTION error NT$29 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$29 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ID en funcion"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // funcion ::= ID error NT$28 LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$28 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'function/procedure' en subprograma"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // funcion ::= FUNCTION ID LEFTBRACKET RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // funcion ::= FUNCTION ID LEFTBRACKET paramsSub RIGHTBRACKET RETURN tipoPrimitivo IS cuerpoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // subprograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // subprograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variable ::= ID COLON tipoVariable error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Falta ';' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variable ::= ID COLON error NT$27 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$27 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta tipo primitivo/id en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // variable ::= ID error NT$26 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$26 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ':' en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // variable ::= COLON error NT$25 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$25 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ID en variable"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // variable ::= ID COMMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // variable ::= ID COLON tipoVariable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Falta ';' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // constanteSimbolica ::= ID COLON CONSTANT ASIGN error NT$24 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$24 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta valor entero/logico en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // constanteSimbolica ::= ID COLON CONSTANT error NT$23 tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$23 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ':=' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // constanteSimbolica ::= ID COLON error NT$22 ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$22 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'constant' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // constanteSimbolica ::= ID error NT$21 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$21 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ':' en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // constanteSimbolica ::= COLON error NT$20 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$20 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ID en constante"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constantesSimbolicas ::= constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constantesSimbolicas ::= constantesSimbolicas constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentenciaSubprograma ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentenciaSubprograma ::= ID LEFTBRACKET STRING RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentenciaSubprograma ::= ID LEFTBRACKET expresiones RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSubprograma",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentenciaWhile ::= WHILE expresion LOOP sentencias END error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentenciaWhile ::= WHILE expresion LOOP sentencias error NT$19 LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$19 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'end' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciaWhile ::= WHILE expresion error NT$18 sentencias END LOOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$18 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'loop' en sentencia while");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentenciaIf ::= IF expresion THEN sentencias error NT$17 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$17 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'end' en sentencia if");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentenciaIf ::= IF expresion error NT$16 sentencias END IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$16 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("sentencia if mal formada");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentenciaIf ::= IF expresion THEN sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaReturn ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaAsign ::= ID ASIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentenciaAsign ::= ID ACCESS sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentenciaES ::= PUT_LINE LEFTBRACKET STRING 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Falta ')' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaES ::= PUT_LINE LEFTBRACKET expresion 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Falta ')' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciaES ::= PUT_LINE error NT$15 STRING RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$15 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta '(' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaES ::= PUT_LINE error NT$14 expresiones RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$14 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta '(' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaES ::= LEFTBRACKET error NT$13 STRING RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$13 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'Put_line' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaES ::= LEFTBRACKET error NT$12 expresiones RIGHTBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$12 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'Put_line' en sentencia E/S");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenciaES ::= PUT_LINE LEFTBRACKET STRING RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaES ::= PUT_LINE LEFTBRACKET expresiones RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= sentenciaSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia ::= sentenciaReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia ::= sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia ::= sentenciaES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencias ::= sentencias sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencias ::= sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresionAcceso ::= ID ACCESS expresionAcceso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAcceso",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresionAcceso ::= ID ACCESS ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAcceso",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionLogica ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionLogica ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionLogica ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionLogica ::= expresion NOTEQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionLogica ::= expresion GREATERTHAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionAritmetica ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionAritmetica ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionAritmetica ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresionAritmetica ::= expresion MINUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionSubprograma ::= ID LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionSubprograma",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionSubprograma ::= LEFTBRACKET expresiones RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionSubprograma",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionSubprograma ::= ID LEFTBRACKET expresiones RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionSubprograma",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresionAcceso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresionAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresionSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresiones ::= expresion COMMA expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoRecord ::= TYPE ID IS RECORD variables END RECORD error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Falta ';' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoRecord ::= TYPE ID IS RECORD variables END error NT$11 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$11 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoRecord ::= TYPE ID IS RECORD variables error NT$10 RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$10 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'end' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoRecord ::= TYPE ID IS RECORD error NT$9 END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta cuerpo en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoRecord ::= TYPE ID IS error NT$8 variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$8 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'record' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoRecord ::= TYPE ID error NT$7 RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$7 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'is' en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoRecord ::= TYPE error NT$6 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$6 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ID en tipo estructurado");errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoRecord ::= ID error NT$5 IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$5 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'type' en tipo estructurado"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoRecord ::= TYPE ID IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRecord",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= tipoRecord 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipos ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipos ::= tipos tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoVariable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoVariable ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoConstante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decFunPro ::= tipos subprogramas variables 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decFunPro ::= subprogramas variables 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decFunPro ::= subprogramas tipos 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decFunPro ::= variables tipos 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decFunPro ::= subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decFunPro ::= variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decFunPro ::= tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decFunPro ::= variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decFunPro ::= tipos subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decFunPro ::= tipos variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decFunPro ::= tipos variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decFunPro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decGlobal ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Estructura de declaraciones incorrecta"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decGlobal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decGlobal ::= constantesSimbolicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decGlobal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decGlobal ::= decFunPro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decGlobal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decGlobal ::= constantesSimbolicas decFunPro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decGlobal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= decGlobal BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= decGlobal BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("Falta 'is' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cabecera ::= PROCEDURE ID LEFTBRACKET error NT$4 IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ')' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cabecera ::= PROCEDURE ID error NT$3 RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta '(' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cabecera ::= PROCEDURE error NT$2 LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta ID en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cabecera ::= ID error NT$1 LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("Falta 'procedure' en cabecera del programa"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

