
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 21 10:29:05 GMT 2022
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 21 10:29:05 GMT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\040\002\000\002\002" +
    "\004\000\002\003\004\000\002\004\007\000\002\005\010" +
    "\000\002\005\007\000\002\005\007\000\002\005\006\000" +
    "\002\006\006\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\022\003\000\002\022\003\000\002\017" +
    "\004\000\002\017\003\000\002\016\003\000\002\016\003" +
    "\000\002\020\012\000\002\021\003\000\002\021\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\006\000\002\026\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\010\004\000" +
    "\002\010\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\011" +
    "\006\000\002\012\005\000\002\013\010\000\002\013\012" +
    "\000\002\014\004\000\002\015\010\000\002\037\003\000" +
    "\002\037\003\000\002\025\004\000\002\025\003\000\002" +
    "\024\010\000\002\041\002\000\002\024\011\000\002\042" +
    "\002\000\002\024\011\000\002\043\002\000\002\024\011" +
    "\000\002\044\002\000\002\024\011\000\002\045\002\000" +
    "\002\024\011\000\002\024\010\000\002\030\004\000\002" +
    "\030\003\000\002\027\006\000\002\027\005\000\002\046" +
    "\002\000\002\027\007\000\002\047\002\000\002\027\007" +
    "\000\002\050\002\000\002\027\007\000\002\027\006\000" +
    "\002\034\004\000\002\034\003\000\002\033\003\000\002" +
    "\033\003\000\002\035\013\000\002\036\011\000\002\031" +
    "\004\000\002\031\003\000\002\032\006\000\002\032\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\036\000\001\002\000\004\002\315\001" +
    "\002\000\004\036\006\001\002\000\004\046\311\001\002" +
    "\000\004\002\uffff\001\002\000\022\012\022\022\025\023" +
    "\027\030\021\032\034\036\011\044\030\046\023\001\002" +
    "\000\004\046\303\001\002\000\010\022\uffeb\030\021\036" +
    "\011\001\002\000\010\022\uffa7\030\uffa7\036\uffa7\001\002" +
    "\000\022\012\uffe4\022\uffe4\023\uffe4\030\uffe4\032\uffe4\036" +
    "\uffe4\044\uffe4\046\uffe4\001\002\000\022\012\022\022\uffee" +
    "\023\027\030\021\032\034\036\011\044\030\046\023\001" +
    "\002\000\004\002\ufffe\001\002\000\024\006\uffe2\012\uffe2" +
    "\022\uffe2\023\uffe2\030\uffe2\032\uffe2\036\uffe2\044\uffe2\046" +
    "\uffe2\001\002\000\014\012\141\022\uffec\030\021\036\011" +
    "\046\142\001\002\000\004\046\252\001\002\000\004\003" +
    "\244\001\002\000\010\003\211\010\150\012\212\001\002" +
    "\000\010\022\uffa9\030\uffa9\036\uffa9\001\002\000\016\026" +
    "\202\031\045\037\043\041\051\045\040\046\046\001\002" +
    "\000\024\006\uffe3\012\uffe3\022\uffe3\023\uffe3\030\uffe3\032" +
    "\uffe3\036\uffe3\044\uffe3\046\uffe3\001\002\000\032\003\uffdf" +
    "\006\uffdf\011\uffdf\012\uffdf\022\uffdf\023\uffdf\030\uffdf\032" +
    "\uffdf\033\uffdf\036\uffdf\044\uffdf\046\uffdf\001\002\000\004" +
    "\046\173\001\002\000\022\012\141\022\uffed\023\027\030" +
    "\021\032\034\036\011\044\030\046\142\001\002\000\022" +
    "\012\uffc2\022\uffc2\023\uffc2\030\uffc2\032\uffc2\036\uffc2\044" +
    "\uffc2\046\uffc2\001\002\000\016\012\uffb4\022\uffb4\026\uffb4" +
    "\030\uffb4\036\uffb4\046\uffb4\001\002\000\032\003\uffe0\006" +
    "\uffe0\011\uffe0\012\uffe0\022\uffe0\023\uffe0\030\uffe0\032\uffe0" +
    "\033\uffe0\036\uffe0\044\uffe0\046\uffe0\001\002\000\004\022" +
    "\037\001\002\000\010\022\uffa8\030\uffa8\036\uffa8\001\002" +
    "\000\016\026\052\031\045\037\043\041\051\045\040\046" +
    "\046\001\002\000\014\005\066\027\070\032\064\043\067" +
    "\046\065\001\002\000\004\011\uffcf\001\002\000\004\011" +
    "\uffd0\001\002\000\004\005\127\001\002\000\004\011\126" +
    "\001\002\000\014\005\066\027\070\032\064\043\067\046" +
    "\065\001\002\000\004\017\113\001\002\000\004\011\uffcd" +
    "\001\002\000\004\011\uffcc\001\002\000\014\005\066\027" +
    "\070\032\064\043\067\046\065\001\002\000\004\046\062" +
    "\001\002\000\016\026\056\031\045\037\043\041\051\045" +
    "\040\046\046\001\002\000\004\011\uffce\001\002\000\004" +
    "\011\061\001\002\000\004\046\057\001\002\000\004\011" +
    "\060\001\002\000\012\002\ufffc\022\ufffc\030\ufffc\036\ufffc" +
    "\001\002\000\020\025\uffd1\026\uffd1\031\uffd1\037\uffd1\041" +
    "\uffd1\045\uffd1\046\uffd1\001\002\000\004\011\063\001\002" +
    "\000\012\002\ufffa\022\ufffa\030\ufffa\036\ufffa\001\002\000" +
    "\024\006\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\021\uffd5\034\uffd5\042\uffd5\001\002\000\030\005\107\006" +
    "\uffd6\010\106\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\021\uffd6\034\uffd6\042\uffd6\001\002\000\014\005\066\027" +
    "\070\032\064\043\067\046\065\001\002\000\024\006\uffd4" +
    "\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\021\uffd4\034" +
    "\uffd4\042\uffd4\001\002\000\024\006\uffd3\011\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\021\uffd3\034\uffd3\042\uffd3\001" +
    "\002\000\016\011\uffc7\013\074\014\072\015\076\016\075" +
    "\021\073\001\002\000\014\005\066\027\070\032\064\043" +
    "\067\046\065\001\002\000\014\005\066\027\070\032\064" +
    "\043\067\046\065\001\002\000\014\005\066\027\070\032" +
    "\064\043\067\046\065\001\002\000\014\005\066\027\070" +
    "\032\064\043\067\046\065\001\002\000\014\005\066\027" +
    "\070\032\064\043\067\046\065\001\002\000\024\006\uffdc" +
    "\011\uffdc\013\074\014\072\015\uffdc\016\uffdc\021\uffdc\034" +
    "\uffdc\042\uffdc\001\002\000\024\006\uffdb\011\uffdb\013\074" +
    "\014\072\015\076\016\uffdb\021\uffdb\034\uffdb\042\uffdb\001" +
    "\002\000\024\006\uffde\011\uffde\013\uffde\014\072\015\uffde" +
    "\016\uffde\021\uffde\034\uffde\042\uffde\001\002\000\024\006" +
    "\uffda\011\uffda\013\074\014\072\015\076\016\075\021\uffda" +
    "\034\uffda\042\uffda\001\002\000\024\006\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\021\uffdd\034\uffdd\042\uffdd" +
    "\001\002\000\016\006\105\013\074\014\072\015\076\016" +
    "\075\021\073\001\002\000\024\006\uffd9\011\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\021\uffd9\034\uffd9\042\uffd9\001" +
    "\002\000\014\005\066\027\070\032\064\043\067\046\065" +
    "\001\002\000\014\005\066\027\070\032\064\043\067\046" +
    "\065\001\002\000\016\006\111\013\074\014\072\015\076" +
    "\016\075\021\073\001\002\000\024\006\uffd8\011\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\021\uffd8\034\uffd8\042\uffd8" +
    "\001\002\000\024\006\uffd7\011\uffd7\013\074\014\072\015" +
    "\076\016\075\021\073\034\uffd7\042\uffd7\001\002\000\014" +
    "\005\066\027\070\032\064\043\067\046\065\001\002\000" +
    "\016\011\uffca\013\074\014\072\015\076\016\075\021\073" +
    "\001\002\000\016\013\074\014\072\015\076\016\075\021" +
    "\073\042\116\001\002\000\014\031\045\037\043\041\051" +
    "\045\040\046\046\001\002\000\020\025\120\026\121\031" +
    "\045\037\043\041\051\045\040\046\046\001\002\000\014" +
    "\031\045\037\043\041\051\045\040\046\046\001\002\000" +
    "\004\031\122\001\002\000\004\011\uffc9\001\002\000\016" +
    "\026\124\031\045\037\043\041\051\045\040\046\046\001" +
    "\002\000\004\031\125\001\002\000\004\011\uffc8\001\002" +
    "\000\020\025\uffd2\026\uffd2\031\uffd2\037\uffd2\041\uffd2\045" +
    "\uffd2\046\uffd2\001\002\000\016\005\066\027\070\032\064" +
    "\043\067\046\065\047\130\001\002\000\004\006\uffc4\001" +
    "\002\000\004\006\133\001\002\000\016\006\uffc5\013\074" +
    "\014\072\015\076\016\075\021\073\001\002\000\004\011" +
    "\uffcb\001\002\000\016\013\074\014\072\015\076\016\075" +
    "\021\073\034\135\001\002\000\014\031\045\037\043\041" +
    "\051\045\040\046\046\001\002\000\016\026\137\031\045" +
    "\037\043\041\051\045\040\046\046\001\002\000\004\034" +
    "\140\001\002\000\004\011\uffc6\001\002\000\004\003\167" +
    "\001\002\000\010\003\151\010\150\012\152\001\002\000" +
    "\022\012\uffe5\022\uffe5\023\uffe5\030\uffe5\032\uffe5\036\uffe5" +
    "\044\uffe5\046\uffe5\001\002\000\010\012\141\022\ufff1\046" +
    "\142\001\002\000\010\022\ufff0\030\021\036\011\001\002" +
    "\000\010\022\uffaa\030\uffaa\036\uffaa\001\002\000\016\012" +
    "\uffb5\022\uffb5\026\uffb5\030\uffb5\036\uffb5\046\uffb5\001\002" +
    "\000\006\012\141\046\142\001\002\000\010\023\uffaf\032" +
    "\uffaf\046\uffaf\001\002\000\012\003\154\023\027\032\034" +
    "\046\153\001\002\000\006\003\uffe6\011\uffe6\001\002\000" +
    "\004\011\uffad\001\002\000\006\003\uffe7\011\uffe7\001\002" +
    "\000\006\003\160\011\157\001\002\000\016\012\uffb3\022" +
    "\uffb3\026\uffb3\030\uffb3\036\uffb3\046\uffb3\001\002\000\016" +
    "\012\uffab\022\uffab\026\uffab\030\uffab\036\uffab\046\uffab\001" +
    "\002\000\004\011\162\001\002\000\016\012\uffac\022\uffac" +
    "\026\uffac\030\uffac\036\uffac\046\uffac\001\002\000\010\023" +
    "\027\032\034\046\153\001\002\000\004\011\165\001\002" +
    "\000\016\012\uffae\022\uffae\026\uffae\030\uffae\036\uffae\046" +
    "\uffae\001\002\000\016\012\uffb2\022\uffb2\026\uffb2\030\uffb2" +
    "\036\uffb2\046\uffb2\001\002\000\010\023\uffb1\032\uffb1\046" +
    "\uffb1\001\002\000\010\023\027\032\034\046\153\001\002" +
    "\000\004\011\172\001\002\000\016\012\uffb0\022\uffb0\026" +
    "\uffb0\030\uffb0\036\uffb0\046\uffb0\001\002\000\004\033\174" +
    "\001\002\000\004\040\175\001\002\000\006\012\141\046" +
    "\142\001\002\000\010\012\141\026\177\046\142\001\002" +
    "\000\004\040\200\001\002\000\004\011\201\001\002\000" +
    "\024\006\uffe1\012\uffe1\022\uffe1\023\uffe1\030\uffe1\032\uffe1" +
    "\036\uffe1\044\uffe1\046\uffe1\001\002\000\004\046\207\001" +
    "\002\000\016\026\204\031\045\037\043\041\051\045\040" +
    "\046\046\001\002\000\004\046\205\001\002\000\004\011" +
    "\206\001\002\000\012\002\ufffb\022\ufffb\030\ufffb\036\ufffb" +
    "\001\002\000\004\011\210\001\002\000\012\002\ufff9\022" +
    "\ufff9\030\ufff9\036\ufff9\001\002\000\012\023\uffaf\024\uffbe" +
    "\032\uffaf\046\uffaf\001\002\000\014\003\213\023\027\024" +
    "\214\032\034\046\153\001\002\000\006\011\uffad\017\uffbc" +
    "\001\002\000\006\003\216\017\215\001\002\000\012\003" +
    "\226\027\223\032\220\043\222\001\002\000\010\027\uffba" +
    "\032\uffba\043\uffba\001\002\000\010\027\223\032\220\043" +
    "\222\001\002\000\006\003\uffe8\011\uffe8\001\002\000\004" +
    "\011\224\001\002\000\006\003\uffea\011\uffea\001\002\000" +
    "\006\003\uffe9\011\uffe9\001\002\000\022\012\uffb9\022\uffb9" +
    "\023\uffb9\030\uffb9\032\uffb9\036\uffb9\044\uffb9\046\uffb9\001" +
    "\002\000\006\003\232\011\231\001\002\000\004\011\uffb8" +
    "\001\002\000\004\011\230\001\002\000\022\012\uffb7\022" +
    "\uffb7\023\uffb7\030\uffb7\032\uffb7\036\uffb7\044\uffb7\046\uffb7" +
    "\001\002\000\022\012\uffc1\022\uffc1\023\uffc1\030\uffc1\032" +
    "\uffc1\036\uffc1\044\uffc1\046\uffc1\001\002\000\022\012\uffb6" +
    "\022\uffb6\023\uffb6\030\uffb6\032\uffb6\036\uffb6\044\uffb6\046" +
    "\uffb6\001\002\000\004\017\234\001\002\000\010\027\223" +
    "\032\220\043\222\001\002\000\004\011\236\001\002\000" +
    "\022\012\uffbb\022\uffbb\023\uffbb\030\uffbb\032\uffbb\036\uffbb" +
    "\044\uffbb\046\uffbb\001\002\000\004\024\240\001\002\000" +
    "\004\017\241\001\002\000\010\027\223\032\220\043\222" +
    "\001\002\000\004\011\243\001\002\000\022\012\uffbd\022" +
    "\uffbd\023\uffbd\030\uffbd\032\uffbd\036\uffbd\044\uffbd\046\uffbd" +
    "\001\002\000\012\023\uffb1\024\uffc0\032\uffb1\046\uffb1\001" +
    "\002\000\004\024\246\001\002\000\004\017\247\001\002" +
    "\000\010\027\223\032\220\043\222\001\002\000\004\011" +
    "\251\001\002\000\022\012\uffbf\022\uffbf\023\uffbf\030\uffbf" +
    "\032\uffbf\036\uffbf\044\uffbf\046\uffbf\001\002\000\004\005" +
    "\253\001\002\000\004\046\254\001\002\000\006\010\265" +
    "\012\266\001\002\000\006\006\257\046\254\001\002\000" +
    "\006\006\uffa3\046\uffa3\001\002\000\004\041\261\001\002" +
    "\000\006\006\uffa4\046\uffa4\001\002\000\006\023\027\032" +
    "\034\001\002\000\004\033\263\001\002\000\022\012\022" +
    "\022\025\023\027\030\021\032\034\036\011\044\030\046" +
    "\023\001\002\000\010\022\uffa6\030\uffa6\036\uffa6\001\002" +
    "\000\004\046\254\001\002\000\004\035\267\001\002\000" +
    "\010\023\027\032\034\044\030\001\002\000\006\006\uffa2" +
    "\046\uffa2\001\002\000\006\006\uffa1\046\uffa1\001\002\000" +
    "\010\022\uffef\030\021\036\011\001\002\000\010\022\ufff2" +
    "\030\021\036\011\001\002\000\014\012\141\022\ufff3\030" +
    "\021\036\011\046\142\001\002\000\022\012\141\022\ufff4" +
    "\023\027\030\021\032\034\036\011\044\030\046\142\001" +
    "\002\000\022\012\uffc3\022\uffc3\023\uffc3\030\uffc3\032\uffc3" +
    "\036\uffc3\044\uffc3\046\uffc3\001\002\000\014\012\141\022" +
    "\ufff5\030\021\036\011\046\142\001\002\000\010\022\ufff6" +
    "\030\021\036\011\001\002\000\010\022\ufff8\030\021\036" +
    "\011\001\002\000\010\022\ufff7\030\021\036\011\001\002" +
    "\000\004\005\304\001\002\000\004\046\254\001\002\000" +
    "\006\006\306\046\254\001\002\000\004\033\307\001\002" +
    "\000\022\012\022\022\025\023\027\030\021\032\034\036" +
    "\011\044\030\046\023\001\002\000\010\022\uffa5\030\uffa5" +
    "\036\uffa5\001\002\000\004\005\312\001\002\000\004\006" +
    "\313\001\002\000\004\033\314\001\002\000\022\012\ufffd" +
    "\022\ufffd\023\ufffd\030\ufffd\032\ufffd\036\ufffd\044\ufffd\046" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\002\003\040\004\001\001\000\002\001" +
    "\001\000\006\003\006\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\015\006\034\016\013\017" +
    "\030\020\016\021\025\024\031\025\014\027\032\030\017" +
    "\033\023\034\011\035\035\036\012\001\001\000\002\001" +
    "\001\000\010\033\145\035\035\036\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\013\017\274\020" +
    "\016\021\025\024\275\027\032\030\273\033\023\034\272" +
    "\035\035\036\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\027\146\033\023\034\271\035\035\036\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\043\010\202\011\041" +
    "\012\040\013\053\014\046\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\142" +
    "\020\016\021\025\027\032\030\143\033\023\034\144\035" +
    "\035\036\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\043\010\052\011\041\012\040\013\053\014\046" +
    "\015\047\001\001\000\004\026\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\070\001\001\000\002" +
    "\001\001\000\016\007\054\011\041\012\040\013\053\014" +
    "\046\015\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\102\001\001\000\004\026\101\001\001\000\004\026" +
    "\100\001\001\000\004\026\077\001\001\000\004\026\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\111\001\001\000\004\026" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\043\010\116\011\041\012\040" +
    "\013\053\014\046\015\047\001\001\000\016\007\054\011" +
    "\041\012\040\013\053\014\046\015\047\001\001\000\020" +
    "\007\043\010\122\011\041\012\040\013\053\014\046\015" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\054\011\041\012\040\013\053\014\046\015\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\131\037\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\043\010\135\011\041\012\040\013" +
    "\053\014\046\015\047\001\001\000\016\007\054\011\041" +
    "\012\040\013\053\014\046\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\146\001\001\000\010\033" +
    "\145\035\035\036\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\165\001\001\000\004\047\162\001" +
    "\001\000\006\021\154\022\155\001\001\000\002\001\001" +
    "\000\004\050\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\154\022\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\167\001\001\000\006\021\154\022\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\032\030\175\001\001\000\004\027" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\054\011\041\012" +
    "\040\013\053\014\046\015\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\236\047\162\001\001\000\006" +
    "\021\154\022\155\001\001\000\006\043\232\050\160\001" +
    "\001\000\002\001\001\000\004\023\224\001\001\000\004" +
    "\044\216\001\001\000\004\023\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\244\046\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\254\032\255\001\001\000\002\001\001\000" +
    "\004\032\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\261\001\001\000\002\001" +
    "\001\000\036\005\263\006\034\016\013\017\030\020\016" +
    "\021\025\024\031\025\014\027\032\030\017\033\023\034" +
    "\011\035\035\036\012\001\001\000\002\001\001\000\004" +
    "\032\270\001\001\000\002\001\001\000\010\016\267\020" +
    "\016\021\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\145\035\035\036\012\001\001\000\010\033" +
    "\145\035\035\036\012\001\001\000\014\027\146\033\023" +
    "\034\301\035\035\036\012\001\001\000\024\016\142\020" +
    "\016\021\025\027\032\030\276\033\023\034\277\035\035" +
    "\036\012\001\001\000\002\001\001\000\014\027\146\033" +
    "\023\034\300\035\035\036\012\001\001\000\010\033\145" +
    "\035\035\036\012\001\001\000\010\033\145\035\035\036" +
    "\012\001\001\000\010\033\145\035\035\036\012\001\001" +
    "\000\002\001\001\000\006\031\304\032\255\001\001\000" +
    "\004\032\257\001\001\000\002\001\001\000\036\005\307" +
    "\006\034\016\013\017\030\020\016\021\025\024\031\025" +
    "\014\027\032\030\017\033\023\034\011\035\035\036\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();
	int errorCounter = 0;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametroSubprograma ::= ID COMMA parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametroSubprograma ::= ID COLON OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroSubprograma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametrosSubprograma ::= parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametrosSubprograma ::= parametrosSubprograma parametroSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosSubprograma",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // procedimiento ::= PROCEDURE ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET IS cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funcion ::= FUNCTION ID LEFTBRACKET parametrosSubprograma RIGHTBRACKET RETURN tipoPrimitivo IS cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // subprograma ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // subprograma ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable ::= ID COLON tipoVariable error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba ;"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable ::= ID COLON error NT$8 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$8 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un tipo primitivo/id"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variable ::= ID error NT$7 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$7 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba :"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variable ::= COLON error NT$6 tipoVariable SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$6 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba ID"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable ::= ID COMMA variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable ::= ID COLON tipoVariable SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo ("Se esperaba ;"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // constanteSimbolica ::= ID COLON CONSTANT ASIGN error NT$5 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$5 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba un valor entero/logico"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constanteSimbolica ::= ID COLON CONSTANT error NT$4 tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$4 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba :="); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constanteSimbolica ::= ID COLON error NT$3 ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba constant"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // constanteSimbolica ::= ID error NT$2 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba :"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // constanteSimbolica ::= COLON error NT$1 CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo ("Se esperaba ID"); errorCounter ++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // constanteSimbolica ::= ID COLON CONSTANT ASIGN tipoConstante SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteSimbolica",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // constantesSimbolicas ::= constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // constantesSimbolicas ::= constantesSimbolicas constanteSimbolica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesSimbolicas",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametro ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametro ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaReturn ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciaIf ::= IF expresion THEN sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciaAsign ::= ID ASIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciaES ::= PUT_LINE LEFTBRACKET parametro RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= sentenciaReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= sentenciaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= sentenciaES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencias ::= sentencias sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencias ::= sentencia SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= ID COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= ID LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= LEFTBRACKET expresion RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion NOTEQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion GREATERTHAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion MINUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoPrimitivo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoPrimitivo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoEstructurado ::= TYPE ID IS RECORD variables END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoEstructurado",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= tipoEstructurado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipos ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipos ::= tipos tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoVariable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoVariable ::= tipoPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoConstante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoConstante ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoConstante ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoConstante",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaraciones ::= subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaraciones ::= variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaraciones ::= tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaraciones ::= constantesSimbolicas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaraciones ::= variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaraciones ::= tipos subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones ::= tipos variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaraciones ::= constantesSimbolicas subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaraciones ::= constantesSimbolicas variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaraciones ::= constantesSimbolicas tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= constantesSimbolicas tipos variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= constantesSimbolicas tipos subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciones ::= constantesSimbolicas variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones ::= constantesSimbolicas tipos variables subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= declaraciones BEGIN END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= declaraciones BEGIN sentencias END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cabecera ::= PROCEDURE ID LEFTBRACKET RIGHTBRACKET IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabecera",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabecera cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		if(errorCounter != 0) syntaxErrorManager.syntaxInfo ("Numero de errores: " + errorCounter);
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

